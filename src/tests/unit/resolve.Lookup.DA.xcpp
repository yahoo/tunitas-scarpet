// This is -*- c++ -*- C++23 in the stylings of S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc. 2021.
// Licensed under the terms of the Apache-2.0 license.
// See the LICENSE file in https://github.com/yahoo/tunitas-scarpet/blob/master/LICENSE for terms.
#divert <fpp>
#import tests.unit.resolve.Lookup.declaration
namespace tests::unit::resolve {
  template<> class Lookup<DA>;
}
#endiv
#divert <hpp>
#import cppunit.Test
#import cppunit.test.Fixture
namespace tests::unit::resolve {
  template<> class Lookup<DA> : public cppunit::test::Fixture {
  public:
    auto test_case_01() -> void;
    auto test_case_02() -> void;
    static auto suite() -> cppunit::Test *;
  };
}
#endiv
#divert <cpp>
#import tunitas.scarpet.resolve.lookup.DA
namespace tests::unit::resolve {
  auto Lookup<DA>::test_case_01() -> void {
#warning WRITETHIS auto Lookup<DA>::test_case_01() -> void
    CPPUNIT_ASSERT(true);
  }
  auto Lookup<DA>::test_case_02() -> void {
#warning WRITETHIS auto Lookup<DA>::test_case_02() -> void
    CPPUNIT_ASSERT(true);
  }
}
#import rigging.suite.io
auto tests::unit::resolve::Lookup<tests::unit::resolve::DA>::suite() -> cppunit::Test * {
  using namespace ::rigging::suite;
  Stream series{"lookup<DA>"};
  {
    Stream cas{"case"};
    cas << call("01", &Lookup::test_case_01)
        << call("02", &Lookup::test_case_02)
      ;
    series << move(cas);
  }
  return finalize(series);
}
#endiv
