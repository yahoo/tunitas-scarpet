// This is -*- c++ -*- C++2a in the stylings of S.C.O.L.D. stylings that are so popular these days.
// Copyright 2019, Oath Inc.; Copyright 2020, Verizon Media
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-scarpet/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/services/scarpet/tree/LICENSE
#divert <fpp>
#import tunitas.scarpet
namespace tests::unit::scarpet {
  namespace [[eponymous]] fixture {
    class Fixture;
    namespace library = ::tunitas::scarpet;
  }
  using fixture::Fixture;
}
#endiv
#divert <hpp>
struct tests::unit::scarpet::fixture::Fixture : public cppunit::test::Fixture {
  auto test_usage_Encoding() -> void; // because there is a separate fixture tests::unit::scarpet::Encoding
  auto test_Club() -> void;
  auto test_Protocol() -> void;
  static auto suite() -> cppunit::Test *;
};
#endiv
#divert <cpp>
#import tunitas.scarpet.Encoding
#import tunitas.scarpet.Club
#import tunitas.scarpet.Protocol
#import tests.unit.scarpet.Encoding
namespace tests::unit::scarpet::fixture {
  auto Fixture::test_usage_Encoding() -> void {
    using Subject = library::Encoding;
    auto p = Subject::PEM;
    auto d = Subject::DER_BASE64URL;
    CPPUNIT_ASSERT(p != d);
  }
  auto Fixture::test_Club() -> void {
    auto subject = library::Club{"cudgel"};
    CPPUNIT_ASSERT(0 != subject.size());
    CPPUNIT_ASSERT("cudgel"sv == view(subject));
  }
  auto Fixture::test_Protocol() -> void {
    auto subject = library::Protocol{"this+that"};
    CPPUNIT_ASSERT(0 != subject.size());
    CPPUNIT_ASSERT("this+that"sv == view(subject));
  }
  auto Fixture::suite() -> cppunit::Test * {
    using namespace rigging::suite;
    auto series = Stream{"scarpet"};
    series << []() {
                Stream use("usage");
                use << call("Encoding", &Fixture::test_usage_Encoding)
                  // Club and Protocol are tested directly (no subfixture)
                    << END;
                return move(use);
              }()
           << call("Club", &Fixture::test_Club)
           << call("Protocol", &Fixture::test_Protocol)
           << add<Encoding>()
           << END;
    return finalize(series);
  }
}
#endiv
