// This is -*- c++ -*- C++23 in the stylings of S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc. 2021.
// Licensed under the terms of the Apache-2.0 license.
// See the LICENSE file at https://github.com/yahoo/tunitas-scarpet/blob/master/LICENSE for terms.
// See the LICENSE file at https://git.tunitas.technology/all/services/scarpet/tree/LICENSE
#divert <hpp>
#import mod.scarpet.httpd
namespace mod::scarpet::config {
  //
  // Syntax
  //    <Scarpet>
  //       MethodName <name>
  //       LocationPrefix <prefix>
  //    </Scarpet>
  //
  // Args defined by Apache HTTPd
  // return (defined by Apache HTTPd
  //    nullptr on success
  //    a (char const *) message on failure to parse the stanza
  //
  auto parse(httpd::cmd_parms *cmd, void *unclear_what_this_is, char const *start_token_just_recognized) -> char const *;
  extern char const NAME[];
  extern char const ENDNAME[];
  extern char const DESCRIPTION[];
}
#endiv
#divert <cpp>
char const mod::scarpet::config::NAME[] = "<Scarpet"; // missing the '>'
char const mod::scarpet::config::ENDNAME[] = "</Scarpet>";
char const mod::scarpet::config::DESCRIPTION[] = "The mod_scarpet Configuration Container";
#import apache.httpd.config.Parser
#import apache.httpd.module_config.get
#import apache.httpd.server.root
#import boost.lexical_cast
#import mod.scarpet.server.State
#import mod.scarpet.httpd.module
#import path.filename.workbench
#import std.all_of
#import std.cerr
#import std.dec
#import std.empty
#import std.isalnum
#import std.string
auto mod::scarpet::config::parse(httpd::cmd_parms *cmd, void */*???*/, char const *start_token_just_recognized) -> char const * {
  // reminder  void *cmd_params::info contains the 2nd arg to AP_INIT_NOARGS in module.cpp

  //
  // <Scarpet>
  //     MethodName mumblecore
  // </Scarpet>
  //
  apache::httpd::config::Parser parser(cmd, NAME, ENDNAME);
  Specification *specification = [&cmd]() {
                                   auto *state = apache::httpd::module_config::get<server::State>(cmd, scarpet_module);
                                   return nullptr == state ? nullptr : &state->specification;
                                 }();
  if (nullptr == specification) {
    return parser.pstrcat(" (internal error?) no specification object for ", &NAME[0], ">");
  }

  // Complain if the <Scarpet> directive is not well formed
  if ( ! parser.well_formed_start(start_token_just_recognized) ) {
    return parser.pstrcat("the directive [", start_token_just_recognized, "] is inappropriate or missing the closing '>'");
  }

  while (parser.get_line() && ! parser.at_end()) {
    std::cerr << "DEBUG line: length=" << parser.buffer.size() << " q(" << parser.buffer.data() << ")\n";
    if (parser.ignorable()) {
      continue;
    }

    auto tokens = parser.split_line();
    if (2 != tokens.size()) {
      // At this point buffer should not be empty because parser.ignorable avoided empty lines
      return parser.pstrcat("bad directive [", parser.buffer.data(), "], expected two space-separated tokens, but found ", boost::lexical_cast<std::string>(tokens.size()));
    }
        
    auto const &name(tokens[0]);
    auto const &value(tokens[1]);

    bool matched = false;
    matched |= specification->did_club_name.set_if(name, value);
    matched |= specification->did_method_name.set_if(name, value);
    matched |= specification->resolver_protocol_name.set_if(name, value);
    matched |= specification->location_prefix.set_if(name, value);
    if ( ! matched ) {
      return parser.pstrcat("bad directive [", name, "], unsupported directive name");
    }
  }
  if (!parser.at_end()) {
    return parser.pstrcat("missing end token [", ENDNAME, "]");
  }

  if ( !is_barely_valid(specification->did_method_name.value)) {
      return parser.pstrcat("bad DID method value [", specification->did_method_name.value, "], the DID method must be a single DNS name (no dots)");
  }
  // All is good.
  return nullptr;
}
#endiv
