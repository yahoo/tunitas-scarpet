// This is -*- c++ -*- nearly C++23 with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc. 2021.
// Licensed under the terms of the Apache-2.0 license.
// See the LICENSE file at https://github.com/yahoo/tunitas-scarpet/blob/master/LICENSE for terms.
// See the LICENSE file at https://git.tunitas.technology/all/services/scarpet/tree/LICENSE
#divert <fpp>
namespace tunitas::scarpet::drrs::tree {
  //
  // "Tree Pointer" is this is a fancy word for std:unique_ptr which can be positioned as a type (or alias) within Tree
  // It is declare-defined in split phase so that Tree::Pointer can be declared,
  // yet std::unique_ptr<Tree> requires the complete type of Tree to be uttered
  //
  class Pointer;
}
#endiv
#divert <hpp>
#import std.unique_ptr
#forward tunitas.scarpet.drrs.Tree
class tunitas::scarpet::drrs::tree::Pointer : protected std::unique_ptr<Tree> {
  using Ancestor = std::unique_ptr<Tree>;
public:
  Pointer() = default;
  using Ancestor::unique_ptr;
};
#endiv
