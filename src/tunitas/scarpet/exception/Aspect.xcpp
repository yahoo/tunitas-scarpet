// This is -*- c++ -*- nearly C++2a with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright 2019-2019, Oath Inc.
// Licensed under the terms of the Apache-2.0 license. See the LICENSE file in https://github.com/yahoo/tunitas-scarpet/blob/master/LICENSE for terms.
#divert <fpp>
namespace tunitas::scarpet::exception {
  //
  // The aspect of a Scarpet exception
  // Descendants only.
  // This is a mixin; it is not a complete class.
  // It allows the normal exception taxonomy to be used while at the same time offering
  // a dimension which is unique to the Tunitas Scarpet subsystem.
  //
  // It is HIGHLY LIKELY that you will also need to mixin tunitas::exception::Aspect
  // Various schemes expect Tunitas-Aspect, Scarpet-Aspect and App-Aspect (which are all independent)
  //
  // Usage:
  //
  //   class my::Difficulty : public tunitas::scarpet::exception::Aspect,
  //                          public std::runtime_error {
  //   public:
  //      Difficulty(std::string const &reason);
  //      auto what() const noexcept -> char const * override;
  //   };
  //
  //   class my::Problem : public tunitas::exception::Aspect,
  //                       public tunitas::scarpet::exception::Aspect,
  //                       public std::runtime_error {
  //   public:
  //      Problem(std::string const &reason);
  //      auto what() const noexcept -> char const * override;
  //   };
  //
  //   try {
  //     ...
  //     throw Problem{...somehow...};
  //     ...
  //   } catch (Aspect const &e) {
  //     ...complain...
  //   }
  //
  class Aspect;
}
#endiv
#divert <hpp>
class tunitas::scarpet::exception::Aspect {
protected:
  virtual ~Aspect() = default;
public:
  Aspect() = default;
  virtual auto what() const noexcept -> char const * = 0;
};
#endiv
