// This is -*- c++ -*- C++23 in the stylings of S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc. 2021.
// Licensed under the terms of the Apache-2.0 license.
// See the LICENSE file in https://github.com/yahoo/tunitas-scarpet/blob/master/LICENSE for terms.
#divert <fpp>
namespace tests::unit::pki::key { class Publik; }
#endiv
#divert <hpp>
#import cppunit.Test
#import cppunit.test.Fixture
#import tunitas.scarpet.pki.key.Publik
class tests::unit::pki::key::Publik : public cppunit::test::Fixture {
public:
  using Presubject = tunitas::scarpet::pki::key::Pair; // because you can't "generate a public key"
  using Subject = tunitas::scarpet::pki::key::Publik;
  auto test_constructor_default() -> void;
  auto test_to_string() -> void;
  auto test_to_stream() -> void;
  static auto suite() -> cppunit::Test *;
};
#endiv
#divert <cpp>
auto tests::unit::pki::key::Publik::test_constructor_default() -> void {
  Subject subject;
  CPPUNIT_ASSERT(sizeof (subject));
}
#import std.string
#import std.ostream
#import tunitas.scarpet.pki.key.generate
#import tunitas.scarpet.pki.key.to_string
auto tests::unit::pki::key::Publik::test_to_string() -> void {
  using namespace ::tunitas::scarpet::pki::key;
  auto generated = generate<Presubject>();
  auto specimen = std::move(generated.publik());
  auto actual = to_string(specimen);
  CPPUNIT_ASSERT(std::empty(actual));
  std::ostream &outbound{std::cerr};
  outbound << "publik to_string " << to_string(specimen) << '\n';
}
#import std.ostringstream
#import tunitas.scarpet.pki.key.to_stream
auto tests::unit::pki::key::Publik::test_to_stream() -> void {
  using namespace ::tunitas::scarpet::pki::key;
  auto generated = generate<Presubject>();
  auto const &specimen = generated.publik();
  std::ostringstream buf;
  auto &streamed = to_stream(buf, specimen);
  CPPUNIT_ASSERT((bool) streamed);
  auto actual = buf.str();
  CPPUNIT_ASSERT(std::empty(actual));
  std::ostream &outbound{std::cerr};
  outbound << "publik to_stream "; to_stream(outbound, specimen) << '\n';
}
#import rigging.suite.io
auto tests::unit::pki::key::Publik::suite() -> cppunit::Test * {
  using namespace ::rigging::suite;
  Stream series("Publik");
  {
    Stream con("constructor");
    con << call("default", &Publik::test_constructor_default)
      ;
    series << move(con);
  }
  return finalize(series);
}
#endiv
