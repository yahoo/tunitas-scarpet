// This is -*- c++ -*- C++2a in the stylings of S.C.O.L.D. stylings that are so popular these days.
// Copyright 2019-2019, Oath Inc.
// Licensed under the terms of the Apache-2.0 license. See the LICENSE file in https://github.com/yahoo/tunitas-scarpet/blob/master/LICENSE for terms.
#divert <fpp>
namespace tunitas::scarpet::url {
  //
  // The URI parser
  //
  //   /prefix/{ID}  ->  ( /prefix, ID )
  //   /{ID}         ->  ( /, ID )
  //
  class Parser;
}
#endiv
#divert <hpp>
#import std.string
#import tunitas.scarpet.url.URI
class tunitas::scarpet::url::Parser {
public:
  inline explicit Parser(std::string const &bare_prefix);
  inline auto operator()(std::string const &syntax) -> URI;
protected:
  // A slash is appended from the constructor's argument
  std::string prefix_slash;
  inline auto isidentifier_thereon(std::string const &syntax, std::string::size_type start_at) -> bool;
  // The set of "safe" characters that you can find in a DNS-type name.
  inline static auto isidentifier(char) -> bool;
};
#endiv
#divert <ipp>
#import std.isalnum
#import std.all_of
#import std.max
#import std.move
#import std.invalid_argument
namespace tunitas::scarpet {
  url::Parser::Parser(std::string const &prefix)
    : prefix_slash{prefix} {
    if (prefix_slash.empty() || '/' != prefix_slash.back()) {
      prefix_slash += '/';
    }
  }
  auto url::Parser::isidentifier(char specimen) -> bool {
    return std::isalnum(specimen) || '-' == specimen || '_' == specimen || '.' == specimen;
  }
  auto url::Parser::isidentifier_thereon(std::string const &syntax, std::string::size_type start_at) -> bool {
    auto start = syntax.begin() + start_at;
    auto finish = syntax.end();
    return std::all_of(start, finish, isidentifier);
  }
  auto url::Parser::operator()(std::string const &syntax) -> URI {
    //
    // With a trivial prefix of '/'
    //
    //     /{ID}     -------------------> { "/" "{ID}" }
    //     ^
    //     |
    //     |
    //     \----------- zero (of course)
    //                  slash is the same, zero
    //
    // With a non-trivial prefix
    //
    //     /prefix/{ID}     ------------> { "/" "{ID}" }
    //     ^      ^
    //     |      |
    //     |      \---- slash
    //     \----------- zero (of course)
    //
    // WATCHOUT - we have the usual problem with "/" here
    // the path from root is signified as "/" and is irreducible.
    // but slashes further down in the string are separators.
    //
    if ('/' != prefix_slash.back()) {
      throw std::invalid_argument{"no trailing slash"};
    }
    std::string::size_type rest_index = prefix_slash.size();
    if (0 != syntax.find(prefix_slash) || syntax.size() < rest_index+1 || !isidentifier_thereon(syntax, rest_index)) {
      return URI{false, std::string(), std::string()};
    } else {
       auto prefix_length = std::max<decltype(rest_index)>(1, rest_index-1);
      return URI{true, prefix_slash.substr(0, prefix_length), syntax.substr(rest_index)};
    }
  }
}
#endiv
