// This is -*- c++ -*- C++2a in the stylings of S.C.O.L.D. stylings that are so popular these days.
// Copyright 2019-2019, Oath Inc.
// Licensed under the terms of the Apache-2.0 license. See the LICENSE file in https://github.com/yahoo/tunitas-scarpet/blob/master/LICENSE for terms.
#divert <fpp>
#import tests.unit.answer.Fields.declaration
namespace tests::unit::answer {
  template<> class Fields<subject::Fields<fields::PROOF>>;
}
#endiv
#divert <hpp>
#import cppunit.Test
#import cppunit.test.Fixture
#import tunitas.scarpet.answer.Fields.PROOF
namespace tests::unit::answer {
  template<> class Fields<subject::Fields<fields::PROOF>> : public cppunit::test::Fixture {
  public:
    using Subject = subject::Fields<fields::PROOF>;
    auto test_constructor_default() -> void;
    // We don't care about hte copy constructor (why would you copy one of these?)
    // We don't care (much) about the move-constructor or move-assignment (why would you move one of these?)
    static auto suite() -> cppunit::Test *;
  };
}
#endiv
#divert <cpp>
namespace tests::unit::answer {
  auto Fields<subject::Fields<fields::PROOF>>::test_constructor_default() -> void {
    auto subject = Subject{};
    CPPUNIT_ASSERT(sizeof(subject));
  }
}
#import rigging.suite.io
namespace tests::unit::answer {
  auto Fields<subject::Fields<fields::PROOF>>::suite() -> cppunit::Test * {
    using namespace ::rigging::suite;
    Stream series{"Fields<PROOF>"};
    series << call("constructor", &Fields::test_constructor_default)
      ;
    return finalize(series);
  }
}
#endiv
