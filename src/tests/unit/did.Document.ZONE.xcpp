// This is -*- c++ -*- C++23 in the stylings of S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc. 2021.
// Licensed under the terms of the Apache-2.0 license.
// See the LICENSE file in https://github.com/yahoo/tunitas-scarpet/blob/master/LICENSE for terms.
#divert <fpp>
#import tests.unit.did.Document.declaration
#import tunitas.scarpet.did.Document.ZONE
namespace tests::unit::did {
  template<> class Document<subjecting::Document<ZONE>>;
}
#endiv
#divert <hpp>
#import cppunit.Test
#import cppunit.test.Fixture
namespace tests::unit::did {
  template<> class Document<subjecting::Document<ZONE>> : public cppunit::test::Fixture {
  public:
    using Subject = subjecting::Document<ZONE>;
    auto test_case_01() -> void;
    auto test_case_02() -> void;
    static auto suite() -> cppunit::Test *;
  };
}
#endiv
#divert <cpp>
namespace tests::unit::did {
  auto rigging::Document<ZONE>::test_case_01() -> void {
#warning WRITETHIS auto Document<ZONE>::test_case_01() -> void
    CPPUNIT_ASSERT(true);
  }
  auto rigging::Document<ZONE>::test_case_02() -> void {
#warning WRITETHIS auto Document<ZONE>::test_case_02() -> void
    CPPUNIT_ASSERT(true);
  }
}
#import rigging.suite.io
auto tests::unit::did::rigging::Document<tests::unit::did::ZONE>::suite() -> cppunit::Test * {
  using namespace ::rigging::suite;
  Stream series{"Document<ZONE>"};
  {
    Stream cas{"case"};
    cas << call("01", &Document::test_case_01)
        << call("02", &Document::test_case_02)
      ;
    series << move(cas);
  }
  return finalize(series);
}
#endiv
