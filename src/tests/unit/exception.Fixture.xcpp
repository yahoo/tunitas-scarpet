// This is -*- c++ -*- C++2a in the stylings of S.C.O.L.D. stylings that are so popular these days.
// Copyright 2019-2019, Oath Inc.
// Licensed under the terms of the Apache-2.0 license. See the LICENSE file in https://github.com/yahoo/tunitas-scarpet/blob/master/LICENSE for terms.
#divert <fpp>
namespace tests::unit::exception { class Fixture; }
#endiv
#divert <hpp>
#import cppunit.Test
#import cppunit.test.Fixture
class tests::unit::exception::Fixture : public cppunit::test::Fixture {
public:
  template<typename EXCEPTION> auto test_Aspect() -> void;
  auto test_Coding() -> void;
  auto test_Crypto() -> void;
  auto test_Options() -> void;
  auto test_Quitting() -> void;
  auto test_Version() -> void;
  static auto suite() -> cppunit::Test *;
protected:
  template<typename EXCEPTION> struct Thrower;
};
#endiv
#divert <tpp>
#import tests.unit.exception.Fixture.Thrower
#import tunitas.scarpet.exception.Aspect
namespace tests::unit::exception {
  template<typename EXCEPTION> auto Fixture::test_Aspect() -> void {
    try {
      Thrower<EXCEPTION> thrower;
      thrower();
    } catch (::tunitas::scarpet::exception::Aspect const &) {
      CPPUNIT_ASSERT(true);
    }
  }
}
#endiv
#divert <cpp>
#import tunitas.scarpet.exception.Coding
auto tests::unit::exception::Fixture::test_Coding() -> void {
  tunitas::scarpet::exception::Coding subject{"base19"};
  CPPUNIT_ASSERT(nullptr != subject.what());
}
#import tunitas.scarpet.exception.Crypto
auto tests::unit::exception::Fixture::test_Crypto() -> void {
  tunitas::scarpet::exception::Crypto subject{"rot13"};
  CPPUNIT_ASSERT(nullptr != subject.what());
}
#import tunitas.scarpet.exception.Options
auto tests::unit::exception::Fixture::test_Options() -> void {
  tunitas::scarpet::exception::Options subject{"Encoding"};
  CPPUNIT_ASSERT(nullptr != subject.what());
}
#import tunitas.scarpet.exception.Quitting
auto tests::unit::exception::Fixture::test_Quitting() -> void {
  tunitas::scarpet::exception::Quitting subject{"a.out"};
  CPPUNIT_ASSERT(nullptr != subject.what());
}
#import tunitas.scarpet.exception.Version
auto tests::unit::exception::Fixture::test_Version() -> void {
  tunitas::scarpet::exception::Version subject{"a.out"};
  CPPUNIT_ASSERT(nullptr != subject.what());
}
#import rigging.suite.io
auto tests::unit::exception::Fixture::suite() -> cppunit::Test * {
  using namespace ::rigging::suite;
  Stream series("exception");
  series  << call("Coding", &Fixture::test_Coding)
          << call("Crypto", &Fixture::test_Crypto)
          << call("Options", &Fixture::test_Options)
          << call("Quitting", &Fixture::test_Quitting)
          << call("Version", &Fixture::test_Version)
    ;
  {
    Stream asp("Aspect");
    namespace subjecting = ::tunitas::scarpet::exception;
    asp << call("Coding", &Fixture::test_Aspect<subjecting::Coding>)
        << call("Crypto", &Fixture::test_Aspect<subjecting::Crypto>)
        << call("Options", &Fixture::test_Aspect<subjecting::Options>)
        << call("Quitting", &Fixture::test_Aspect<subjecting::Quitting>)
        << call("Version", &Fixture::test_Aspect<subjecting::Version>)
      ;
    series << move(asp);
  }
  return finalize(series);
}
#endiv
