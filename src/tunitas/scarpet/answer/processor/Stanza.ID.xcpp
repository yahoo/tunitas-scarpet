// This is -*- c++ -*- nearly C++2a with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright 2019, Oath Inc.; Copyright 2020, Verizon Media
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-scarpet/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/services/scarpet/tree/LICENSE
#divert <fpp>
#import tunitas.scarpet.answer.processor.Stanza.declaration
namespace tunitas::scarpet::answer::processor {
  //
  // The top-level ID Field
  // There can only be one of these in a document
  //
  // Example: (see Stanza.declaration.hpp, and 'marfa' being an illustrative DID Method)
  //
  //   id.123456789abcdefghi.marfa URI 1 1 "did:example:123456789abcdefghi"
  //
  template<> class Stanza<stanza::ID>;
}
#endiv
#divert <hpp>
namespace tunitas::scarpet::answer::processor {
  template<> class Stanza<stanza::ID> : public Prototype, public ares::function::Query<Response<drrs::Record<dns::URI>>> {
    using Ancestor = ares::function::Query<Response<drrs::Record<dns::URI>>>;
  public:
    inline explicit Stanza(State &);
    auto receive(error::Code<ARES>, Count timeouts, Buffer) -> void override final;
  };
}
#endiv
#divert <ipp>
namespace tunitas::scarpet::answer::processor {
  Stanza<stanza::ID>::Stanza(State &response) : Ancestor{response} { }
}
#endiv
#divert <cpp>
namespace tunitas::scarpet::answer::processor {
  auto Stanza<stanza::ID>::receive(error::Code<ARES> code, Count timeouts, Buffer buffer) -> void {
    using namespace ares;
    if (error::Code<ARES>::SUCCESS != code) {
      this->state.success = std::error_code{code};
    } else {
      reply::Record<URI> records;
      auto parsed = reply::parse<URI>(std::nothrow, buffer, records);
      if (!ok(parsed)) {
        this->state.success = error_code(parsed);
      } else if (1 != records.size()) { // [[FIXTHIS]] this is common enough that ares::List should special-case unit length lists
        this->state.success = std::error_code{error::Code<SCARPET>::FOUND_MULTIPLE_RECORDS};
      } else {
        auto const &record = *records.begin();
        this->state.referenced.priority = record.priority();
        this->state.referenced.weight = record.weight();
        this->state.referenced.endpoint = record.uri();
        this->state.success = Success{SUCCESS};
      }
    }
  }
}
#endiv
