// This is -*- c++ -*- nearly C++2a with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright 2019, Oath Inc.; Copyright 2020, Verizon Media
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-scarpet/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/services/scarpet/tree/LICENSE
#divert <fpp>
namespace app::publish::options {
  //
  // The publish (publishment, publication) option parser
  //
  // Usage:
  //
  //   auto av = Args{...somehow...};
  //   auto cfg = Configuration{...somehow...};
  //   auto specification = Specification{...somehow...};
  //
  //   auto parser = Parser{specification, cfg};
  //   auto parsed = parse(av);
  //   if (ok(parsed)) {
  //      ...yay!...
  //   } else {
  //      ...sad...
  //   }
  //
  class Parser;
}
#endiv
#divert <hpp>
#import app.options.Parser
#import tunitas.Success
#import app.publish.Configuration
#import tunitas.application.options.Args
class app::publish::options::Parser : public app::options::Parser {
  using Ancestor = app::options::Parser;
public:
  inline explicit Parser(Specification const &, Configuration &);
  Parser(Specification &&) = delete;
  using Result = tunitas::Success; // not Ancestor::Result
  auto operator()(Args) -> Result;
protected:
  Configuration &cfg;
};
#endiv
#divert <ipp>
namespace app::publish::options {
  Parser::Parser(Specification const &spc, Configuration &cfg)
    : Ancestor{spc}
    , cfg{cfg}
  { }
}
#endiv
#divert <cpp>
#import app.exits.constants
#import app.exception.Version
#import app.options.exception.Bad_Filepath
#import app.options.exception.Bad_Domain
#import app.options.exception.Bad_Secret
#import app.options.get_domain
#import app.options.get_secret_literal
#import app.publish.defaults
#import app.publish.exception.Usage
#import app.publish.options.indicator.constants
#import app.publish.options.Specification
#import options.longish.Getter
#import options.longish.Step
#import std.error_code
#import tunitas.application.options.exception.Unspecified
#import tunitas.application.options.get_filepath
#import tunitas.scarpet.error.Code
namespace app::publish::options {
  auto Parser::operator()(Args av) -> Result {
    namespace error = tunitas::scarpet::error;
    // WATCHOUT as of tunitas-basics <= 1.7.0, module-options' namespace options is not cascaded into tunitas::application::options
    using ::options::longish::Getter;
    using ::options::longish::Step;
    Getter get{spc.shortish(), spc.longish(), av};
    for (Step step=get(); more(step); step=get()) {
      try {
        switch (code(step)) {
          namespace oi = options::indicator;
        case oi::CHR_h:
        case oi::USAGE_SUBCOMMAND:
          throw exception::Usage{cfg.NAME, exits::OK};
        case oi::CHR_V:
        case oi::VERSION_SUBCOMMAND:
          throw exception::Version{cfg.NAME};
        case oi::CHR_w:
        case oi::WARNING_MODE:
          cfg.warning_mode = true;
          break;
        case oi::CHR_q:
        case oi::QUIET_MODE:
          cfg.quiet_mode = true;
          break;
        case oi::CHR_v:
        case oi::VERBOSE_MODE:
          cfg.verbose_mode = true;
          break;
        case oi::CHR_d:
        case oi::DEBUG_MODE:
          cfg.debug_mode = true;
          break;
        case oi::CHR_y:
        case oi::DRY_RUN_MODE:
          cfg.dry_run_mode = true;
          break;
        case oi::CHR_n:
        case oi::NAME_SERVER:
          cfg.name_server = get_domain<exception::Bad_Domain>(cfg, step);
          break;
        case oi::CHR_k:
        case oi::NAME_SERVER_UPDATE_TSIG_SECRET_VALUE:
          cfg.update_tsig_key_value = get_secret_literal<exception::Bad_Secret>(cfg, step);
          break;
        case oi::CHR_K:
        case oi::NAME_SERVER_UPDATE_TSIG_SECRET_FILEPATH:
          // Here we don't care what the filepath suffix is.
          cfg.update_tsig_key_file = get_filepath<exception::Bad_Filepath>(cfg, step);
          break;
        case oi::DID_DOCUMENT_GUESS:
          {
            auto guess = get_filepath<exception::Bad_Filepath>(cfg, step);
            auto extension = guess.extension();
            if (false) {
            } else if (".json"s == extension) {
              cfg.did_document_json = std::move(guess);
            } else if (".zone"s == extension) {
              cfg.did_document_zone = std::move(guess);
            } else {
              notice(cfg) << "neither 'json' nor 'zone' suffix on --document=" << guess << '\n';
              /* [[FIXME]] ee(cfg) */ ::options::error(cfg) << "could not guess the type of the file from the suffix\n";
            }
          }
          break;
        case oi::DID_DOCUMENT_JSON:
          cfg.did_document_json = get_filepath<exception::Bad_Filepath>(cfg, step);
          // don't care what the suffix is ... we will treat it as JSON later
          break;
        case oi::DID_DOCUMENT_ZONE:
          cfg.did_document_zone = get_filepath<exception::Bad_Filepath>(cfg, step);
          // don't care what the suffix is ... we will treat it as ZONE later
          break;
        case oi::DID_DOCUMENT_STORAGE_SERVICE_DOMAIN:
          cfg.did_document_storage_service_domain = get_domain<exception::Bad_Domain>(cfg, step);
          break;
        case oi::MISSING:
          /* [[FIXTHIS ee(cfg)) */ ::options::error(cfg) << "missing value on " << word_in_error(step) << '\n';
          return Result{std::error_code{tunitas::scarpet::error::Code::OPTIONS}};
        case oi::UNKNOWN:
          /* [[FIXTHIS]] ee(cfg) */ ::options::error(cfg) << "invalid option " << word_in_error(step) << '\n';
          return Result{std::error_code{tunitas::scarpet::error::Code::OPTIONS}};
        default:
          // This is a programmer error.
          // It means that the specification of the option parser is wider than this switch statement.
          // Someone (you) forgot to take care of some eventuality.
          throw exception::Unspecified{NAME};
        }
      } catch (exception::Bad_Domain const &e) {
        /* [[FIXTHIS ee(cfg)) */ ::options::error(cfg) << "invalid domain " << required(step) << " value on --" << word(step) << '\n';
        return Result{std::error_code{tunitas::scarpet::error::Code::OPTIONS}};
      } catch (exception::Bad_Filepath const &e) {
        /* [[FIXTHIS ee(cfg)) */ ::options::error(cfg) << "invalid file path " << required(step) << " value on --" << word(step) << '\n';
        return Result{std::error_code{tunitas::scarpet::error::Code::OPTIONS}};
      } catch (exception::Bad_Secret const &e) {
        /* [[FIXTHIS ee(cfg)) */ ::options::error(cfg) << "invalid secret " << required(step) << " value on --" << word(step) << '\n';
        return Result{std::error_code{tunitas::scarpet::error::Code::OPTIONS}};
      }
    }
    auto const remaining = Arguments{get.begin(), get.end()};
    if (!std::empty(remaining)) {
      /* [[FIXTHIS]] ee(cfg) */ ::options::error(cfg) << "there are extra words after the options\n";
      return Result{std::error_code{error::Code::OPTIONS}};
    }
    if (!cfg.did_document_json && !cfg.did_document_zone) {
      /* [[FIXTHIS]] ee(cfg) */ ::options::error(cfg) << "for --did-document neither a JSON file nor a ZONE file was given\n";
      return Result{std::error_code{error::Code::OPTIONS}};
    }
    if (cfg.did_document_json && cfg.did_document_zone) {
      /* [[FIXTHIS]] ee(cfg) */ ::options::error(cfg) << "both a JSON file and a ZONE file cannot be given\n";
      return Result{std::error_code{error::Code::OPTIONS}};
    }
    if (!cfg.did_document_storage_service_domain) {
      /* [[FIXTHIS]] ee(cfg) */ ::options::error(cfg) << "the domain (Qualified Domain Name) into which to load this DID Document not defined\n";
      return Result{std::error_code{error::Code::OPTIONS}};
    }
    if (!cfg.name_server) {
      /* [[FIXTHIS]] ee(cfg) */ ::options::error(cfg) << "the name server into which to load this DID Document not defined\n";
      return Result{std::error_code{error::Code::OPTIONS}};
    }
    if (!cfg.update_tsig_key_value && !cfg.update_tsig_key_file) {
      notice(cfg) << "the update secret must be given literally or from a file\n";
      /* [[FIXTHIS]] ee(cfg) */ ::options::error(cfg) << "the update secret is not defined at all\n";
      return Result{std::error_code{error::Code::OPTIONS}};
    }
    if (cfg.update_tsig_key_value && cfg.update_tsig_key_file) {
      notice(cfg) << "the both --name-server-update-secret-value=SECRET and --name-server-update-secret-file=FILEPATH appear\n";
      /* [[FIXTHIS]] ee(cfg) */ ::options::error(cfg) << "the update secret cannot be both from a file and literally\n";
      return Result{std::error_code{error::Code::OPTIONS}};
    }
    return Result{tunitas::SUCCESS};
  }
}
#endiv
