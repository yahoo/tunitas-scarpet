// This is -*- c++ -*- nearly C++2a with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright 2019-2019, Oath Inc.
// Licensed under the terms of the Apache-2.0 license. See LICENSE file in https://github.com/yahoo/tunitas-scarpet/blob/master/LICENSE for terms.
#divert <fpp>
namespace tunitas::scarpet::exception {
  //
  // The Scarpet-flavored coding encryption ("crypto") exception
  //
  // Encompases at least
  // - character set problems
  // - BASE64 encoding (base64url)
  // - BASE64 decoding (base64url)
  // 
  // Usage:
  //
  //   auto location = std::string{...};        location meaning something simpler __FUNCTION__
  //   throw Crypto{location}                   where reason is expected to be terse
  //
  class Crypto;
}
#endiv
#divert <hpp>
#import tunitas.scarpet.exception.Aspect
#import std.runtime_error
class tunitas::scarpet::exception::Crypto : public Aspect, public std::runtime_error {
  struct ancestors {
    using Aspect = scarpet::exception::Aspect;
    using Exception = std::runtime_error;
  };
public:
  inline explicit Crypto(std::string const &location);
  auto what() const noexcept -> char const * final;
};
#endiv
#divert <ipp>
namespace tunitas::scarpet::exception {
  Crypto::Crypto(std::string const &location)
    : ancestors::Exception{location}
  { }
}
#endiv
#divert <cpp>
namespace tunitas::scarpet::exception {
  auto Crypto::what() const noexcept -> char const * {
    return ancestors::Exception::what();
  }
}
#endiv
