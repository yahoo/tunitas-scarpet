// This is -*- c++ -*- C++2a in the stylings of S.C.O.L.D. stylings that are so popular these days.
// Copyright 2019-2019, Oath Inc.
// Licensed under the terms of the Apache-2.0 license. See the LICENSE file in https://github.com/yahoo/tunitas-scarpet/blob/master/LICENSE for terms.
#divert <fpp>
#import apache.httpd.status.Code
#import apache.httpd.io
namespace mod::scarpet::method {
  namespace HTTP = apache::httpd::status::HTTP;
  namespace HANDLER = apache::httpd::status::handler;
  namespace io = apache::httpd::io;
}
namespace mod::scarpet::method {
  //
  // The method prototype (descendants only)
  // Every method (response) captures the apache request, the specification and a url parser.
  //
  // Usage: see Getter, Poster, Putter
  //
  class Prototype;
}
#endiv
#divert <hpp>
#import mod.scarpet.httpd.module
namespace mod::scarpet::method {
  //
  // The HTTPd module index ... every descendant of Prototype will need to have this lexically visible
  //
  // Else ...
  //
  //   src/mod/scarpet/method/Getter.xcpp:56:19: error: ‘aplog_module_index’ was not declared in this scope
  //   ap_log_rerror(APLOG_MARK, APLOG_TRACE4, /*status*/0, req, "returning did_status=%d", (int) did_status);
  //
  using httpd::aplog_module_index;
}
#import apache.httpd.io.Stream
#import apache.httpd.status.Code
#import apache.httpd.request_rec
#import mod.scarpet.server.State
#import tunitas.scarpet.url.Parser
#import tunitas.scarpet.did.Parser
class mod::scarpet::method::Prototype {
protected:
  ~Prototype() = default;
public:
  inline Prototype(apache::httpd::request_rec *, server::State *);
  // The descendant must implement (the non-virtual)
  //   auto operator()() -> apache::httpd::status::Code;
protected:
  // Of course, the containing apache request record must have a longer lifetime than the method
  apache::httpd::request_rec *req;
  // Of course, the Specification must have a longer lifetime than the method (descendant)
  // Even GET requires non-const state; e.g. to operate the channel
  server::State *state;
  // ... because parsing occurs.
  tunitas::scarpet::url::Parser uri_parser;
  // ... because more parsing occurs.
  tunitas::scarpet::did::Parser did_parser;
  // ... because every method handler will need to respond onto an html stream.
  apache::httpd::io::Stream rs;
};
#endiv
#divert <ipp>
mod::scarpet::method::Prototype::Prototype(apache::httpd::request_rec *req, server::State *state)
  : req{req}
  , state{state}
  , uri_parser{state->specification.location_prefix.value}
  , did_parser{}
  , rs{req}
{ }
#endiv
