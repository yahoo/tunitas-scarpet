// This is -*- c++ -*- in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc. 2021.
// Licensed under the terms of the Apache-2.0 license.
// See the LICENSE file in https://github.com/yahoo/tunitas-scarpet/blob/master/LICENSE for terms.
#divert <fpp>
namespace app::signify::exception {
  //
  // The signify usage message, as an application exception
  //
  // Usage: (sic)
  //
  //   throw Usage{"program"};
  //
  // Usage: (sic)
  //
  //   try {
  //     ...
  //     throw Usage{"program"};
  //     ...
  //   } catch (tunitas::scarpet::exception::Aspect const &g) {
  //     g.stream() << g << '\n';
  //     return g.code();          ... equivalently ::exit(g.code());
  //   }
  //
  class [[nodiscard]] Usage;
}
#endiv
#divert <hpp>
#import tunitas.app.exception.Usage
#import tunitas.app.exception.Messaging
#import tunitas.scarpet.exception.aspect.Exiting
#import std.exception
#import std.string
class app::signify::exception::Usage
  : public tunitas::scarpet::exception::aspect::Exiting,
    public tunitas::app::exception::Usage,
    public tunitas::app::exception::Messaging,
    public std::exception {
  struct ancestors {
    using Aspect = tunitas::scarpet::exception::aspect::Exiting;
    using Usage = tunitas::app::exception::Usage;
    using Messaging = tunitas::app::exception::Messaging;
    using Exception = std::exception;
  };
public:
  inline explicit Usage(std::string const &NAME);
  inline Usage(std::string const &NAME, sys::exits::Code);
  auto what() const noexcept -> char const * final;
  auto stream() const noexcept -> std::ostream & final;
  auto code() const noexcept -> sys::exits::Code final;
private:
  static auto format(std::string const &NAME) -> std::string;
};
#endiv
#divert <ipp>
#import sys.exits.constants
app::signify::exception::Usage::Usage(std::string const &NAME)
  : Usage{NAME, sys::exits::OK}
{ }
app::signify::exception::Usage::Usage(std::string const &NAME, sys::exits::Code code)
  : ancestors::Usage{code}
  , ancestors::Messaging{format(NAME)}
  , ancestors::Exception{}
{ }
#endiv
#divert <cpp>
#import std.ostringstream
#import app.well_known
namespace app::signify::exception {
  auto Usage::format(std::string const &NAME) -> std::string {
    std::ostringstream buf;
    buf << "Sign the Certificate Signing Request (CSR), returning the signed Certificate (CRT)\n"
        << "Presumably the CSR was created with " << well_known::SCISSOR << " or other such tooling\n"
        << '\n'
        << "usage: " << NAME << " [...options...]\n"
        << '\n'
        << "Signing Options:\n"
        << '\n'
        << "--authority-private-side=FILEPATH         the CA private key from the FILEPATH\n"
        << " --authority-private-key=FILEPATH         alternate\n"
        << "     --authority-private=FILEPATH         simple\n"
        << "          --private-side=FILEPATH         simpler\n"
        << "           --private-key=FILEPATH         simpler\n"
        << "               --private=FILEPATH         simplest\n"
        << "                   --key=FILEPATH         simplest\n"
        << '\n'
        << "--authority-public-side=FILEPATH          the CA public certificate from the FILEPATH\n"
        << " --authority-public-crt=FILEPATH          alternate\n"
        << "     --authority-public=FILEPATH          simple\n"
        << "          --public-side=FILEPATH          simpler\n"
        << "               --public=FILEPATH          simplest\n"
        << '\n'
        << "--certificate-signing-request=FILEPATH    the Certificate Signing Request (CSR)\n"
        << "            --signing-request=FILEPATH    simple\n"
        << "                    --request=FILEPATH    simpler\n"
        << "                       --sign=FILEPATH    simplest\n"
        << "                        --csr=FILEPATH    simplest\n"
        << '\n'
        << "General Options:\n"
        << '\n'
        << "--usage, --help, -h                       emit this message, and exit\n"
        << "--version, -V                             emit the package version, and exit\n"
        << "--dry-run, --dryrun, -y                   dry run, do not start the server\n"
        << "--warnings, --warning, -w                 emit warnings\n"
        << "--quiet, -q                               be quiet, emit no notices or warnings\n"
        << "--verbose, -v                             be verbose (independent of --quiet)\n"
        << "--debug, -d                               debug output (you should not need this)"; // no '\n'
    return buf.str();
  }
  auto Usage::what() const noexcept -> char const * {
    return ancestors::Messaging::what();
  }
  auto Usage::stream() const noexcept -> std::ostream & {
    return ancestors::Usage::stream();                                                         
  }
  auto Usage::code() const noexcept -> sys::exits::Code {
    return ancestors::Usage::code();
  }
}
#endiv
