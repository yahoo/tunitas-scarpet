// This is -*- c++ -*- C++23 in the stylings of S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc. 2021.
// Licensed under the terms of the Apache-2.0 license.
// See the LICENSE file at https://github.com/yahoo/tunitas-scarpet/blob/master/LICENSE for terms.
// See the LICENSE file at https://git.tunitas.technology/all/services/scarpet/tree/LICENSE
#divert <fpp>
#import tunitas.scarpet.dns.Type
namespace tests::unit::drrs {
  namespace dns = ::tunitas::scarpet::dns;
  class Allocator;
}
#endiv
#divert <hpp>
#import tunitas.scarpet.drrs.tree.Allocator
#import tunitas.scarpet.drrs.Tree
#import tunitas.scarpet.dns.type.constants
class tests::unit::drrs::Allocator : public cppunit::test::Fixture {
public:
  using Subject = ::tunitas::scarpet::drrs::tree::Allocator;
  using Tree = ::tunitas::scarpet::drrs::Tree;
  auto test_constructor() -> void;
  auto test_make_child() -> void;
  template<dns::Type> auto test_make_record() -> void;
  auto test_exercise_01() -> void;
  auto test_exercise_02() -> void;
  static auto suite() -> cppunit::Test *;
};
namespace tests::unit::drrs {
  template<> auto Allocator::test_make_record<dns::PTR>() -> void;
  template<> auto Allocator::test_make_record<dns::SRV>() -> void;
  template<> auto Allocator::test_make_record<dns::TXT>() -> void;
  template<> auto Allocator::test_make_record<dns::URI>() -> void;
}
#endiv
#divert <cpp>
auto tests::unit::drrs::Allocator::test_constructor() -> void {
  Tree top{"www", Tree::top()};
  Subject subject{top};
  CPPUNIT_ASSERT(true); // yup, it constructed.
}
auto tests::unit::drrs::Allocator::test_make_child() -> void {
  Tree top{"www", Tree::top()};
  Subject subject{top};
  auto &c1 = subject.make_child("rewww", top.ref());
  CPPUNIT_ASSERT(0 == c1.children().size());
  CPPUNIT_ASSERT(0 == c1.records().size());
  auto &c2 = subject.make_child("dewww", top.ref());
  CPPUNIT_ASSERT(0 == c2.children().size());
  CPPUNIT_ASSERT(0 == c2.records().size());
  auto &c3 = subject.make_child("again", top.ref());
  CPPUNIT_ASSERT(0 == c3.children().size());
  CPPUNIT_ASSERT(0 == c3.records().size());
  //
  CPPUNIT_ASSERT(3 == top.children().size());
  CPPUNIT_ASSERT(&c1 != &c2);
  CPPUNIT_ASSERT(&c2 != &c3);
  CPPUNIT_ASSERT(&c3 != &c1);
}
template<> auto tests::unit::drrs::Allocator::test_make_record<tests::unit::drrs::dns::PTR>() -> void {
  Tree top{"www", Tree::top()};
  Subject subject{top};
  auto &p1 = subject.make_record<dns::PTR>(dns::Name{"www1.example."});
  auto &p2 = subject.make_record<dns::PTR>(dns::Name{"www2.example."});
  CPPUNIT_ASSERT(&p1 != &p2);
  CPPUNIT_ASSERT(2 == top.records().size());
}
template<> auto tests::unit::drrs::Allocator::test_make_record<tests::unit::drrs::dns::SRV>() -> void {
  Tree top{"www", Tree::top()};
  Subject subject{top};
  auto const w = dns::Weight{1};
  auto const p = dns::Priority{1};
  auto &s1 = subject.make_record<dns::SRV>(p, w, dns::Name{"www1.example."});
  auto &s2 = subject.make_record<dns::SRV>(p, w, dns::Name{"www2.example."});
  CPPUNIT_ASSERT(&s1 != &s2);
  CPPUNIT_ASSERT(2 == top.records().size());
}
template<> auto tests::unit::drrs::Allocator::test_make_record<tests::unit::drrs::dns::TXT>() -> void {
  Tree top{"www", Tree::top()};
  Subject subject{top};
  auto &t1 = subject.make_record<dns::TXT>("Four Score and Seven Years."s);
  auto &t2 = subject.make_record<dns::TXT>("ago, our forefathers brought forth upon this land."s);
  CPPUNIT_ASSERT(&t1 != &t2);
  CPPUNIT_ASSERT(2 == top.records().size());
}
template<> auto tests::unit::drrs::Allocator::test_make_record<tests::unit::drrs::dns::URI>() -> void {
  Tree top{"www", Tree::top()};
  Subject subject{top};
  auto const w = dns::Weight{1};
  auto const p = dns::Priority{1};
  auto &u1 = subject.make_record<dns::URI>(p, w, std::string{"https://www1.example."});
  auto &u2 = subject.make_record<dns::URI>(p, w, std::string{"https://www2.example."});
  CPPUNIT_ASSERT(&u1 != &u2);
  CPPUNIT_ASSERT(2 == top.records().size());
}
auto tests::unit::drrs::Allocator::test_exercise_01() -> void {
  auto top = Tree{"example", Tree::top()};
  Subject subject{top};
  auto &l1 = subject.make_child("123456789", top.ref());
  auto &l2 = subject.make_child("abcdefg", l1.ref());
  auto &l2a = Subject{l2}.make_child("hhijk", l2.ref());
  CPPUNIT_ASSERT(2u == top.children().size());
  CPPUNIT_ASSERT(0u == l1.children().size());
  CPPUNIT_ASSERT(1u == l2.children().size());
  CPPUNIT_ASSERT(0u == l2a.children().size());
}
#import std.move
auto tests::unit::drrs::Allocator::test_exercise_02() -> void {
  //
  // from https://w3c-ccg.github.io/did-spec/
  //
  //            id.0.publickey.123456789abcdefghi.marfa URI 1 1 "did:example:123456789abcdefghi#keys-1"
  //    created.id.0.publickey.123456789abcdefghi.marfa TXT "2002-10-10T17:00:00Z"
  //    updated.id.0.publickey.123456789abcdefghi.marfa TXT "2016-10-17T02:41:00Z"
  //          type.0.publickey.123456789abcdefghi.marfa TXT "RsaVerificationKey2018"
  //    controller.0.publickey.123456789abcdefghi.marfa URI 1 1 "did:example:123456789abcdefghi"
  //           key.0.publickey.123456789abcdefghi.marfa TXT "pem.-----BEGIN PUBLIC KEY...something-something-dark_side...END PUBLIC KEY-----\r\n" ; [[VARIANCE]]
  //  publicKeyPem.0.publickey.123456789abcdefghi.marfa TXT "-----BEGIN PUBLIC KEY...something-something-dark_side...END PUBLIC KEY-----\r\n"
  //
  Tree marfa{"marfa", Tree::top()};
  //
  auto &abc = Subject{marfa}.make_child("123456789abcdefghi", marfa.ref());
  auto &pub = Subject{abc}.make_child("publickey", abc.ref());
  auto &zero = Subject{pub}.make_child("zero", pub.ref());
  auto &id = Subject{zero}.make_child("id", zero.ref());
  Subject{id}.make_record<dns::URI>(dns::Priority{1}, dns::Weight{1}, "did:example:123456789abcdefghi#keys-1"s);
  //
  auto &created = Subject{id}.make_child("created", id.ref());
  Subject{created}.make_record<dns::TXT>("2019-06-14"s);
  auto &updated = Subject{id}.make_child("updated", id.ref());
  Subject{updated}.make_record<dns::TXT>("2019-06-15"s);
  //
  auto &type = Subject{zero}.make_child("type", zero.ref());
  Subject{type}.make_record<dns::TXT>("RsaVerificationKey2018"s);
  //
  auto &controller = Subject{zero}.make_child("controller", zero.ref());
  Subject{controller}.make_record<dns::URI>(dns::Priority{1}, dns::Weight{1}, "did:example:123456789abcdefghi"s);
  //
  auto &key = Subject{zero}.make_child("key", zero.ref());
  Subject{key}.make_record<dns::TXT>("pem.-----BEGIN PUBLIC KEY...something-something-dark_side...END PUBLIC KEY-----\r\n"s);
  //
  auto &pem = Subject{zero}.make_child("publicKeyPem", zero.ref());
  Subject{pem}.make_record<dns::TXT>("-----BEGIN PUBLIC KEY...something-something-dark_side...END PUBLIC KEY-----\r\n"s);
  //
  // [[FIXTHIS]] hey ... we should print this thing out or something...
}
auto tests::unit::drrs::Allocator::suite() -> cppunit::Test * {
  using namespace ::rigging::suite;
  Stream series{"Allocator"};
  series << call("constructor", &Allocator::test_constructor)
         << call("make_child", &Allocator::test_make_child)
         << []() {
              Stream rec{"make_record"};
              rec << call("PTR", &Allocator::test_make_record<dns::PTR>)
                  << call("SRV", &Allocator::test_make_record<dns::SRV>)
                  << call("TXT", &Allocator::test_make_record<dns::TXT>)
                  << call("URI", &Allocator::test_make_record<dns::URI>)
                ;
              return move(rec);
            }()
         << []() {
              Stream exe{"exercise"};
              exe << call("01", &Allocator::test_exercise_01)
                  << call("02", &Allocator::test_exercise_02)
                ;
              return move(exe);
            }()
    ;
  return finalize(series);
}
#endiv
