// This is -*- c++ -*- C++2a in the stylings of S.C.O.L.D. stylings that are so popular these days.
// Copyright 2019-2019, Oath Inc.
// Licensed under the terms of the Apache-2.0 license. See the LICENSE file in https://github.com/yahoo/tunitas-scarpet/blob/master/LICENSE for terms.
#divert <fpp>
namespace tests::unit::error { class Fixture; }
#endiv
#divert <hpp>
#import cppunit.Test
#import cppunit.test.Fixture
class tests::unit::error::Fixture : public cppunit::test::Fixture {
public:
  auto test_Condition() -> void;
  auto test_Code() -> void;
  auto test_category() -> void;
  auto test_Category() -> void;
  static auto suite() -> cppunit::Test *;
};
#endiv
#divert <cpp>
#import tunitas.scarpet.error.Condition
auto tests::unit::error::Fixture::test_Condition() -> void {
  using namespace ::tunitas::scarpet::error;
  auto good = Condition::SUCCESS;
  auto bad = Condition::FAILURE;
  CPPUNIT_ASSERT(good != bad);
}
#import tunitas.scarpet.error.Code
auto tests::unit::error::Fixture::test_Code() -> void {
  using namespace ::tunitas::scarpet::error;
  auto good = Code::SUCCESS;
  auto bad = Code::FAILURE;
  CPPUNIT_ASSERT(good != bad);
}
#import tunitas.scarpet.error.category
auto tests::unit::error::Fixture::test_category() -> void {
  using namespace ::tunitas::scarpet::error;
  auto const &c = category();
  CPPUNIT_ASSERT(nullptr != c.name());
}
#import tunitas.scarpet.error.Category
auto tests::unit::error::Fixture::test_Category() -> void {
  using namespace ::tunitas::scarpet::error;
  auto const &c = category();
  auto s0 = c.message((int) Code::SUCCESS);
  CPPUNIT_ASSERT(!s0.empty());
  auto f1 = c.message((int) Code::FAILURE);
  CPPUNIT_ASSERT(!f1.empty());
  auto f2 = c.message((int) Code::OPTIONS);
  CPPUNIT_ASSERT(!f2.empty());
}
#import tests.unit.error.Category
#import rigging.suite.io
auto tests::unit::error::Fixture::suite() -> cppunit::Test * {
  using namespace ::rigging::suite;
  Stream series{"error"};
  series << call("Condition", &Fixture::test_Condition)
         << call("Code", &Fixture::test_Code)
         << call("category", &Fixture::test_category)
         << call("Category", &Fixture::test_Category)
         << add<Category>()
    ;
  return finalize(series);
}
#endiv
