// This is -*- c++ -*- C++2a in the stylings of S.C.O.L.D. stylings that are so popular these days.
// Copyright 2019, Oath Inc.; Copyright 2020, Verizon Media
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-scarpet/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/services/scarpet/tree/LICENSE
#divert <fpp>
namespace tests::unit::drrs { class Fixture; }
#endiv
#divert <hpp>
#import cppunit.Test
#import cppunit.test.Fixture
#import tunitas.scarpet.dns.type.constants
class tests::unit::drrs::Fixture : public cppunit::test::Fixture {
public:
  using Type = ::tunitas::scarpet::dns::Type;
  template<Type> auto test_record() -> void;
  static auto suite() -> cppunit::Test *;
};
namespace tests::unit::drrs {
  template<> auto Fixture::test_record<tunitas::scarpet::dns::DAPTR>() -> void;
  template<> auto Fixture::test_record<tunitas::scarpet::dns::NAPTR>() -> void;
  template<> auto Fixture::test_record<tunitas::scarpet::dns::PTR>() -> void;
  template<> auto Fixture::test_record<tunitas::scarpet::dns::SRV>() -> void;
  template<> auto Fixture::test_record<tunitas::scarpet::dns::TXT>() -> void;
  template<> auto Fixture::test_record<tunitas::scarpet::dns::URI>() -> void;
}
#endiv
#divert <cpp>
#import tunitas.scarpet.drrs.Record
namespace tests::unit::drrs {
  template<> auto Fixture::test_record<tunitas::scarpet::dns::DAPTR>() -> void {
    using namespace ::tunitas::scarpet;
    namespace drrs = ::tunitas::scarpet::drrs;
    auto subject = drrs::Record<dns::DAPTR>{};
    CPPUNIT_ASSERT(sizeof (subject)); // yup, it constructed
  }
  template<> auto Fixture::test_record<tunitas::scarpet::dns::NAPTR>() -> void {
    using namespace ::tunitas::scarpet;
    namespace drrs = ::tunitas::scarpet::drrs;
    auto subject = drrs::Record<dns::NAPTR>{};
    CPPUNIT_ASSERT(sizeof (subject)); // yup, it constructed
  }
  template<> auto Fixture::test_record<tunitas::scarpet::dns::PTR>() -> void {
    using namespace ::tunitas::scarpet;
    namespace drrs = ::tunitas::scarpet::drrs;
    auto subject = drrs::Record<dns::PTR>{};
    CPPUNIT_ASSERT(sizeof (subject)); // yup, it constructed
  }
  template<> auto Fixture::test_record<tunitas::scarpet::dns::SRV>() -> void {
    using namespace ::tunitas::scarpet;
    namespace drrs = ::tunitas::scarpet::drrs;
    auto subject = drrs::Record<dns::SRV>{};
    CPPUNIT_ASSERT(sizeof (subject)); // yup, it constructed
  }
  template<> auto Fixture::test_record<tunitas::scarpet::dns::TXT>() -> void {
    using namespace ::tunitas::scarpet;
    namespace drrs = ::tunitas::scarpet::drrs;
    auto subject = drrs::Record<dns::TXT>{};
    CPPUNIT_ASSERT(sizeof (subject)); // yup, it constructed
  }
  template<> auto Fixture::test_record<tunitas::scarpet::dns::URI>() -> void {
    using namespace ::tunitas::scarpet;
    namespace drrs = ::tunitas::scarpet::drrs;
    auto subject = drrs::Record<dns::URI>{};
    CPPUNIT_ASSERT(sizeof (subject)); // yup, it constructed
  }
}
#import tests.unit.drrs.Allocator
#import tests.unit.drrs.Flat
#import tests.unit.drrs.Record
#import tests.unit.drrs.Tree
#import rigging.suite.io
auto tests::unit::drrs::Fixture::suite() -> cppunit::Test * {
  using namespace ::rigging::suite;
  Stream series{"drrs"};
  {
    Stream use{"usage"};
    {
      Stream rec{"record"};
      using namespace tunitas::scarpet::dns::type::constants;
      rec << call("DAPTR", &Fixture::test_record<dns::DAPTR>)
          << call("NAPTR", &Fixture::test_record<dns::NAPTR>)
          << call("PTR", &Fixture::test_record<dns::PTR>)
          << call("TXT", &Fixture::test_record<dns::TXT>)
          << call("SRV", &Fixture::test_record<dns::SRV>)
          << call("URI", &Fixture::test_record<dns::URI>)
        ;
      use << move(rec);
    }
    series << move(use);
  }
  series << add(Record<dns::DAPTR>::suite())
         << add(Record<dns::NAPTR>::suite())
         << add(Record<dns::PTR>::suite())
         << add(Record<dns::TXT>::suite())
         << add(Record<dns::SRV>::suite())
         << add(Record<dns::URI>::suite())
         << add(Tree::suite())
         << add(Flat::suite())
         << add(Allocator::suite())
              ;
  return finalize(series);
}
#endiv
