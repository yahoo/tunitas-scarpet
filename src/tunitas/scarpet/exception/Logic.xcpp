// This is -*- c++ -*- nearly C++2a with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright 2019-2019, Oath Inc.
// Licensed under the terms of the Apache-2.0 license. See the LICENSE file in https://github.com/yahoo/tunitas-scarpet/blob/master/LICENSE for terms.
#divert <fpp>
namespace tunitas::scarpet::exception {
  //
  // Some (control flow) logic has been violated.
  // These are always programmer errors based upon the self-consistency of the code.
  // For example, finding out that a switch case was not handled; or a "but this was checked above"
  //
  // Usage:
  //
  //   throw exception::Logic{};
  //   throw exception::Logic{"programmer error"};
  //
  class Logic;
}
#endiv
#divert <hpp>
#import tunitas.scarpet.exception.Aspect
#import std.logic_error
#import std.string
class tunitas::scarpet::exception::Logic : public Aspect, public std::logic_error {
  struct ancestors {
    using Aspect = scarpet::exception::Aspect;
    using Exception = std::logic_error;
  };
public:
  inline Logic();
  inline explicit Logic(std::string const &reason);
  auto what() const noexcept -> char const * override;
};
#endiv
#divert <ipp>
namespace tunitas::scarpet::exception {
  Logic::Logic()
    : Logic{"bad logic"}
  { }
  Logic::Logic(std::string const &reason)
    : ancestors::Exception{reason}
  { }
}
#endiv
#divert <cpp>
namespace tunitas::scarpet::exception {
  auto Logic::what() const noexcept -> char const * {
    return ancestors::Exception::what();
  }
}
#endiv
