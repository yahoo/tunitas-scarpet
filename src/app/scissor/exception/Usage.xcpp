// This is -*- c++ -*- in the S.C.O.L.D. stylings that are so popular these days.
// Copyright 2019, Oath Inc.; Copyright 2020, Verizon Media
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-scarpet/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/services/scarpet/tree/LICENSE
#divert <fpp>
namespace app::scissor::exception {
  //
  // The scissor usage message, as an application exception
  //
  // Usage: (sic)
  //
  //   throw Usage{"program"};
  //
  // Usage: (sic)
  //
  //   try {
  //     ...
  //     throw Usage{"program"};
  //     ...
  //   } catch (exception::aspect::Quitting const &g) {
  //     g.stream() << g << '\n';
  //     return g.code();          ... equivalently ::exit(g.code());
  //   }
  //
  class [[nodiscard]] Usage;
}
#endiv
#divert <hpp>
#import app.exception.partial.Usage
class app::scissor::exception::Usage final : public app::exception::partial::Usage {
  using Ancestor = app::exception::partial::Usage;
public:
  inline explicit Usage(Arguments::Name);
  inline explicit Usage(Arguments::Name, exits::Code);
private:
  static auto format(Arguments::Name NAME) -> Arguments::Message;
};
#endiv
#divert <ipp>
#import app.exits.constants
namespace app::scissor::exception {
  Usage::Usage(Arguments::Name NAME) : Usage{NAME, exits::OK} { }
  Usage::Usage(Arguments::Name NAME, exits::Code code) : Ancestor{format(NAME), code} { }
}
#endiv
#divert <cpp>
#import std.ostringstream
#import app.well_known
namespace app::scissor::exception {
  auto Usage::format(Arguments::Name NAME) -> Arguments::Message {
    std::ostringstream buf;
    buf << "Generate a Certificate Signing Request (CSR) using the X.509 fields"
        << "\nGenerally, a Certificate Authority (CA) will only sign the minimum admissible statement (e.g. CN)"
        << "\nUse " << well_known::SIGNIFY << " to execute the CSR locally or else use a remote signing service"
        << '\n'
        << "\nusage: " << NAME << " [...options...] [...fields...]"
        << '\n'
        << "\nX.509 Field Values:"
        << '\n'
        << "\n  C=country                        optional, ISO 3166-1 alpha-2)"
        << "\n  ST=state                         optional, full name, do not abbreviate"
        << "\n  L=locality                       optional, full name, do not abbreviate"
        << "\n  O=organization                   optional, legal business name, should be canonical"
        << "\n  OU=organizational unit           optional"
        << "\n  CN=common name                   required, explicitly or use --generate-common-name"
#if 0
      // [[FIXTHIS]] not yet ... this is not yet a field in module-openssl <= 0.3.0-0.devel
        << "\n  eA=email                         leave blank, this is not helpful in a Certificate Authority"
#endif
        << '\n'
        << "\nGeneration Options:"
        << '\n'
        << "\n--generate-common-name             generate the common name with 256 bits"
        << "\n         --generate-cn             this option precludes the use of CN=name"
        << "\n              --gen-cn             simpler"
        << "\n               --gencn             simplest"
        << '\n'
        << "\n--private-side=FILEPATH            write the private key to the FILEPATH"
        << "\n --private-key=FILEPATH            simpler"
        << "\n     --private=FILEPATH            simplest"
        << '\n'
        << "\n--public-side=FILEPATH             write the public certificate to the FILEPATH"
        << "\n --public-csr=FILEPATH             simpler"
        << "\n     --public=FILEPATH             simplest"
        << '\n'
        << "\nGeneral Options:"
        << '\n'
        << "\n--usage, --help, -h                emit this message, and exit"
        << "\n--version, -V                      emit the package version, and exit"
        << "\n--dry-run, --dryrun, -y            dry run, do not start the server"
        << "\n--warnings, --warning, -w          emit warnings"
        << "\n--quiet, -q                        be quiet, emit no notices or warnings"
        << "\n--verbose, -v                      be verbose (independent of --quiet)"
        << "\n--debug, -d                        debug output (you should not need this)";
    return buf.str();
  }
}
#endiv
