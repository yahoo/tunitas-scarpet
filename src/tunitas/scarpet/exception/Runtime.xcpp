// This is -*- c++ -*- nearly C++23 with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc. 2021.
// Licensed under the terms of the Apache-2.0 license.
// See the LICENSE file in https://github.com/yahoo/tunitas-scarpet/blob/master/LICENSE for terms.
#divert <fpp>
namespace tunitas::scarpet::exception {
  //
  // Some runtime error; a.k.a. "there was some problem"
  //
  // Recall: whereas exception objects must have copy constructors that offer the nothrow guarantee,
  // The string argument must be copied in the constructor into indirect (readonly) storage which will not throw.
  // Thus the constructor SHOULD take a reference argument because the string will be copied anyway in the ancestor.
  // Cite the verbiage on cppreference.com wherein that is elaborated.
  //
  // Usage:
  //
  //   throw exception::Runtime{};
  //   throw exception::Runtime{"the Sun rose in the West"};
  //
  class Runtime;
}
#endiv
#divert <hpp>
#import tunitas.scarpet.exception.Aspect
#import std.runtime_error
#import std.string
class tunitas::scarpet::exception::Runtime : public Aspect, public std::runtime_error {
  struct ancestors {
    using Aspect = scarpet::exception::Aspect;
    using Exception = std::runtime_error;
  };
public:
  inline Runtime();
  inline explicit Runtime(std::string const &reason);
  auto what() const noexcept -> char const * override;
};
#endiv
#divert <ipp>
namespace tunitas::scarpet::exception {
  Runtime::Runtime()
    : Runtime{"there was some problem"}
  { }
  Runtime::Runtime(std::string const &reason)
    : ancestors::Exception{reason}
  { }
}
#endiv
#divert <cpp>
namespace tunitas::scarpet::exception {
  auto Runtime::what() const noexcept -> char const * {
    return ancestors::Exception::what();
  }
}
#endiv
