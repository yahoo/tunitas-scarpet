// This is -*- c++ -*- nearly C++23 with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc. 2021.
// Licensed under the terms of the Apache-2.0 license.
// See the LICENSE file in https://github.com/yahoo/tunitas-scarpet/blob/master/LICENSE for terms.
#divert <fpp>
#import tunitas.scarpet.dns.Type
#import tunitas.scarpet.dns.type.constants
#include <hpp/tunitas.scarpet.dns.type.constants>
namespace tunitas::scarpet::compiler::detail::dome_zone {
  //
  // The Row is a convenience structure for use with the nearby Accreter
  // The Row is assembled by the row(...) function template.
  //
  // Whereas the constructor arguments are moved-or-copied into the convenience,
  // the lifetimes of the constructor arguments is immaterial.
  //
  // Usage: (by example)
  //
  //   accreter = Accreter{...somehow...};
  //   accreter << row(unparse(label, source),                           drrs::Record<PTR>{unparse(ith, label, source)})
  //            << row(unparse("transaction"_label, ith, label, source), drrs::Record<dns::TXT>{record.transaction})
  //            << (unparse("created"_label, ith, label, source),        drrs::Record<dns::TXT>{record.created})
  //            << row(unparse("creator"_label, ith, label, source),     drrs::Record<dns::URI>{record.creator})
  //            << row(unparse("description"_label, ith, label, source), drrs::Record<dns::TXT>{record.description})
  //            << row(unparse("signature"_label, ith, label, source),   drrs::Record<dns::TXT>{record.signature})
  //            << row(unparse("reference"_label, ith, label, source),   drrs::Record<dns::URI>{record.reference});
  //
  template<dns::Type TYPE> struct Row;
}
#endiv
#divert <hpp>
#import tunitas.scarpet.dns.Labels
#import tunitas.scarpet.drrs.Record
namespace tunitas::scarpet::compiler::detail {
  template<dns::Type TYPE> struct dome_zone::Row {
    using Leftside = dns::Labels;
    using Rightside = drrs::Record<TYPE>;
    inline Row(Leftside, Rightside);
    Leftside leftside;
    Rightside rightside;
  };
}
#endiv
#divert <ipp>
namespace tunitas::scarpet::compiler::detail::dome_zone {
  template<dns::Type _> Row<_>::Row(Leftside l, Rightside r) : leftside{std::move(l)}, rightside{std::move(r)} { }
}
#endiv
