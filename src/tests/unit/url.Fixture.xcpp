// This is -*- c++ -*- C++2a in the stylings of S.C.O.L.D. stylings that are so popular these days.
// Copyright 2019-2019, Oath Inc.
// Licensed under the terms of the Apache-2.0 license. See the LICENSE file in https://github.com/yahoo/tunitas-scarpet/blob/master/LICENSE for terms.
#divert <fpp>
namespace tests::unit::url { class Fixture; }
#endiv
#divert <hpp>
#import cppunit.Test
#import cppunit.test.Fixture
class tests::unit::url::Fixture : public cppunit::test::Fixture {
public:
  auto test_Parser_slash() -> void;
  auto test_Parser_slashprefix() -> void;
  static auto suite() -> cppunit::Test *;
};
#endiv
#divert <cpp>
#import tunitas.scarpet.url.Parser
#import format.q
#import std.clog
auto tests::unit::url::Fixture::test_Parser_slash() -> void {
  ::tunitas::scarpet::url::Parser parser("/");
  { auto u = parser("");
    CPPUNIT_ASSERT(!ok(u)); }
  { auto u = parser("/");
    CPPUNIT_ASSERT(!ok(u)); }
  { auto u = parser("/prefix");
    CPPUNIT_ASSERT(ok(u));
    if (ok(u)) {
      using format::q;
      std::clog << "prefix=" << q(prefix(u)) << '\n';
      std::clog << "identifier=" << q(identifier(u)) << '\n';
    }
    CPPUNIT_ASSERT("/" == prefix(u));
    CPPUNIT_ASSERT("prefix" == identifier(u)); }
  { auto u = parser("/2");
    CPPUNIT_ASSERT(ok(u));
    { std::string expected = "/";
      std::string actual = prefix(u);
      CPPUNIT_ASSERT_EQUAL(expected, actual); }
    { std::string expected = "2";
      std::string actual = identifier(u);
      CPPUNIT_ASSERT_EQUAL(expected, actual); } }
}
auto tests::unit::url::Fixture::test_Parser_slashprefix() -> void {
  ::tunitas::scarpet::url::Parser parser("/prefix");
  { auto u = parser("");
    CPPUNIT_ASSERT(!ok(u)); }
  { auto u = parser("/");
    CPPUNIT_ASSERT(!ok(u)); }
  { auto u = parser("/perfidy");
    CPPUNIT_ASSERT(!ok(u)); }
  { auto u = parser("/prefix");
    CPPUNIT_ASSERT(!ok(u)); }
  { auto u = parser("/prefix/");
    if (ok(u)) {
      using format::q;
      std::clog << "prefix=" << q(prefix(u)) << '\n';
      std::clog << "identifier=" << q(identifier(u)) << '\n';
    }
    CPPUNIT_ASSERT(!ok(u)); }
  { auto u = parser("/prefix/2");
    CPPUNIT_ASSERT(ok(u));
    { std::string expected = "/prefix";
      std::string actual = prefix(u);
      CPPUNIT_ASSERT_EQUAL(expected, actual); }
    { std::string expected = "2";
      std::string actual = identifier(u);
      CPPUNIT_ASSERT_EQUAL(expected, actual); } }
}
#import tests.unit.url.Parser
#import unit.rigging.suite.Stream
#import unit.rigging.suite.add
#import unit.rigging.suite.call
auto tests::unit::url::Fixture::suite() -> cppunit::Test * {
  using namespace ::unit::rigging::suite;
  Stream series("url");
  series << call("Parser_slash", &Fixture::test_Parser_slash)
         << call("Parser_slashprefix", &Fixture::test_Parser_slashprefix)
         << add(Parser::suite())
    ;
  return series.release();
}
#endiv
