// This is -*- c++ -*- nearly C++2a with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright 2019, Oath Inc.; Copyright 2020, Verizon Media
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-scarpet/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/services/scarpet/tree/LICENSE
#divert <fpp>
namespace tunitas::scarpet::options {
  //
  // The encoding schemes
  //
  // RFC 4648  The Base16, Base32 and Base64 Data Encodings
  //   https://tools.ietf.org/html/rfc4648
  // Especially Section 5, Base 64 Encoding with URL and Filename Safe Alphabet
  //   https://tools.ietf.org/html/rfc4648#section-5
  //
  // Also
  //   https://wiki.openssl.org/index.php/Base64
  //
  // Usage:
  //
  //   auto enc = Encoding::DER_BASE64URL;
  //   auto enc = Encoding::PEM;
  //   cerr << enc;
  //   cin >> enc;
  //   auto s = to_string(enc);
  //
  enum class Encoding {
    PEM,
    DER_BASE64URL, // RFC
  };
}
#endiv
#divert <hpp>
#import nonstd.required.Character
#import nonstd.required.Character_Traits
#import std.basic_istream
#import std.basic_ostream
#import std.nothrow_t
#import std.string
#import tunitas.Outcome
namespace tunitas::scarpet::options {
  template<nonstd::required::Character CHAR, nonstd::required::Character_Traits TRAITS> inline auto operator<<(std::basic_ostream<CHAR, TRAITS> &, Encoding) -> std::basic_ostream<CHAR, TRAITS> &;
  template<nonstd::required::Character CHAR, nonstd::required::Character_Traits TRAITS> inline auto operator>>(std::basic_istream<CHAR, TRAITS> &, Encoding &) -> std::basic_istream<CHAR, TRAITS> &;
  inline auto to_string(Encoding) -> std::string;
  template<typename RESULT> auto from_string(std::string const &) -> RESULT = delete;
  template<typename RESULT> auto from_string(std::nothrow_t, std::string const &) -> Outcome<RESULT> = delete;
  template<> inline auto from_string<Encoding>(std::string const &) -> Encoding;
  template<> inline auto from_string<Encoding>(std::nothrow_t, std::string const &) -> Outcome<Encoding>;
  namespace detail {
    inline auto codeword(Encoding) -> char const *;
  }
}
#endiv
#divert <ipp>
#import std.error_code
#import std.logic_error
#import std.ostringstream
#import tunitas.scarpet.error.Code
#import tunitas.scarpet.exception.Options
#import std.string_literals
namespace tunitas::scarpet {
  using namespace std::literals;
  auto options::detail::codeword(Encoding en) -> char const * {
    switch (en) {
    case Encoding::PEM: return "pem";
    case Encoding::DER_BASE64URL: return "der+base64url";
    default: throw std::logic_error("codeword"); // This is a programmer error; the caller should have handled this
    }
  }
  template<nonstd::required::Character CHAR, nonstd::required::Character_Traits TRAITS> auto options::operator<<(std::basic_ostream<CHAR, TRAITS> &os, Encoding en) -> std::basic_ostream<CHAR, TRAITS> & {
    switch (en) {
    case Encoding::PEM:
    case Encoding::DER_BASE64URL:
      os << detail::codeword(en);
      break;
    default:
      // Something is always printable, even if this is an invalid encoding
      os << "Encoding-" << (int) en;
      break;
    }
    return os;
  }
  template<nonstd::required::Character CHAR, nonstd::required::Character_Traits TRAITS> auto options::operator>>(std::basic_istream<CHAR, TRAITS> &is, Encoding &en) -> std::basic_istream<CHAR, TRAITS> & {
    std::string word;
    if (is >> word) {
      if ("pem"s == word) {
        en = Encoding::PEM;
      } else if ("der"s == word || "der+base64"s == word || "der+base64url"s == word) {
        en = Encoding::DER_BASE64URL;
      } else {
        is.setstate(std::ios::failbit);
      }
    }
    return is;
  }
  auto options::to_string(Encoding en) -> std::string {
    switch (en) {
    case Encoding::PEM:
    case Encoding::DER_BASE64URL:
      return detail::codeword(en);
    default: {
        std::ostringstream buf;
        buf << en;
        return buf.str();
      }
    }
  }
  template<> auto options::from_string<options::Encoding>(std::string const &candidate) -> Encoding {
    if (false) {
    } else if ("pem"s == candidate) {
      return Encoding::PEM;
    } else if ("der"s == candidate || "der+base64"s == candidate || "der+base64url"s == candidate) {
      return Encoding::DER_BASE64URL;
    } else {
      throw exception::Options{"Encoding"};
    }
  }
  template<> auto options::from_string<options::Encoding>(std::nothrow_t, std::string const &candidate) -> Outcome<Encoding> try {
    return Outcome<Encoding>{from_string<Encoding>(candidate)};
  } catch (...) {
    return Outcome<Encoding>{std::error_code{error::Code::OPTIONS}};
  }
}
#endiv
