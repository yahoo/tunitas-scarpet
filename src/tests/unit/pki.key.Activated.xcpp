// This is -*- c++ -*- C++2a in the stylings of S.C.O.L.D. stylings that are so popular these days.
// Copyright 2019, Oath Inc.; Copyright 2020, Verizon Media
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-scarpet/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/services/scarpet/tree/LICENSE
#divert <fpp>
namespace tests::unit::pki::key { class Activated; }
#endiv
#divert <hpp>
#import cppunit.Test
#import cppunit.test.Fixture
#import tunitas.scarpet.pki.key.Activated
class tests::unit::pki::key::Activated : public cppunit::test::Fixture {
public:
  using Subject = ::tunitas::scarpet::pki::key::Activated;
  auto test_constructor_default() -> void;
  auto test_constructor_pointer() -> void;
  auto test_generate() -> void;
  auto test_to_string() -> void;
  auto test_to_stream() -> void;
  static auto suite() -> cppunit::Test *;
};
#endiv
#divert <cpp>
#import tunitas.scarpet.pki.key.generate
auto tests::unit::pki::key::Activated::test_constructor_default() -> void {
  Subject subject;
  CPPUNIT_ASSERT(sizeof (subject));
}
auto tests::unit::pki::key::Activated::test_constructor_pointer() -> void {
#if 0
  // This interface does not test the pointer conversion constructor; there is no such constructor (any more)
  using namespace tunitas::scarpet::pki::key;
  Subject subject = generate<Subject>();
  CPPUNIT_ASSERT(sizeof (subject));
#else
  CPPUNIT_ASSERT(true);
#endif
}
auto tests::unit::pki::key::Activated::test_generate() -> void {
  using namespace tunitas::scarpet::pki::key;
  auto generated = generate<Subject>();
  std::ostream &outbound{std::cerr};
  outbound << "generated pair public  " << to_string(publik(generated)) << '\n'
           << "generated pair private " << to_string(privat(generated)) << '\n';
  CPPUNIT_ASSERT(true);
}
#import std.empty
#import tunitas.scarpet.pki.key.to_string
auto tests::unit::pki::key::Activated::test_to_string() -> void {
  using namespace tunitas::scarpet::pki::key;
  auto generated = generate<Subject>();
  CPPUNIT_ASSERT(!std::empty(to_string(publik(generated))));
  CPPUNIT_ASSERT(!std::empty(to_string(privat(generated))));
  std::ostream &outbound{std::cerr};
  outbound << "to_string pair " << to_string(publik(generated)) << "||" << to_string(privat(generated)) << '\n';
}
#import std.string
#import std.ostringstream
#import tunitas.scarpet.pki.key.to_stream
#import tunitas.scarpet.pki.key.pair
auto tests::unit::pki::key::Activated::test_to_stream() -> void {
  using namespace tunitas::scarpet::pki::key;
  auto generated = generate<Subject>();
  std::ostringstream buf;
  auto &streamed = to_stream(buf, pair(generated));
  CPPUNIT_ASSERT((bool) streamed);
  auto actual = buf.str();
  CPPUNIT_ASSERT(!std::empty(actual));
  std::ostream &outbound{std::cerr};
  outbound << "to_stream "; to_stream(buf, pair(generated)) << '\n';
}
#import rigging.suite.io
auto tests::unit::pki::key::Activated::suite() -> cppunit::Test * {
  using namespace ::rigging::suite;
  Stream series("Activated");
  series << []() {
              Stream con("constructor");
              con << call("default", &Activated::test_constructor_default)
                  << call("pointer", &Activated::test_constructor_pointer)
                ;
              return move(con);
            }()
         << call("generate", &Activated::test_generate)
         << call("to_string", &Activated::test_to_string)
         << call("to_stream", &Activated::test_to_stream)
    ;
  return finalize(series);
}
#endiv
