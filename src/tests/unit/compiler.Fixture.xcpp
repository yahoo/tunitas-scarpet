// This is -*- c++ -*- C++2a in the stylings of S.C.O.L.D. stylings that are so popular these days.
// Copyright 2019, Oath Inc.; Copyright 2020, Verizon Media
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-scarpet/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/services/scarpet/tree/LICENSE
#divert <fpp>
namespace tests::unit::compiler { class Fixture; }
#endiv
#divert <hpp>
#import cppunit.Test
#import cppunit.test.Fixture
class tests::unit::compiler::Fixture : public cppunit::test::Fixture {
public:
  auto test_compile_DOME() -> void;
  auto test_compile_JSON() -> void;
  auto test_compile_ZONE() -> void;
  static auto suite() -> cppunit::Test *;
};
#endiv
#divert <cpp>
#import tunitas.scarpet.compiler.compile.ANSWER.DOME
auto tests::unit::compiler::Fixture::test_compile_DOME() -> void {
#warning WRITETHIS auto tests::unit::compiler::Fixture::test_compile_DOME() -> void
  CPPUNIT_ASSERT(true);
}
#import tunitas.scarpet.compiler.compile.DOME.JSON
auto tests::unit::compiler::Fixture::test_compile_JSON() -> void {
#warning WRITETHIS auto tests::unit::compiler::Fixture::test_compile_JSON() -> void
  CPPUNIT_ASSERT(true);
}
#import tunitas.scarpet.compiler.compile.DOME.ZONE
auto tests::unit::compiler::Fixture::test_compile_ZONE() -> void {
#warning WRITETHIS auto tests::unit::compiler::Fixture::test_compile_ZONE() -> void
  CPPUNIT_ASSERT(true);
}
#import tests.unit.compiler.Compile.ANSWER.DOME
#import tests.unit.compiler.Compile.DOME.JSON
#import tests.unit.compiler.Compile.DOME.ZONE
#import tests.unit.output.Fixture
#import rigging.suite.io
auto tests::unit::compiler::Fixture::suite() -> cppunit::Test * {
  using namespace ::rigging::suite;
  Stream series{"compiler"};
  series << []() {
              Stream com{"compile"};
              com << call("DOME", &Fixture::test_compile_DOME)
                  << call("JSON", &Fixture::test_compile_JSON)
                  << call("ZONE", &Fixture::test_compile_ZONE)
                ;
              return move(com);
            }()
         << add<compiler::Compile<compiler::answer_dome::Source, compiler::answer_dome::Destination>>()
         << add<compiler::Compile<compiler::dome_json::Source, compiler::dome_json::Destination>>()
         << add<compiler::Compile<compiler::dome_zone::Source, compiler::dome_zone::Destination>>()
    ;
  return finalize(series);
}
#endiv
