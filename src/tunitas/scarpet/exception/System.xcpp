// This is -*- c++ -*- nearly C++23 with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc. 2021.
// Licensed under the terms of the Apache-2.0 license.
// See the LICENSE file at https://github.com/yahoo/tunitas-scarpet/blob/master/LICENSE for terms.
// See the LICENSE file at https://git.tunitas.technology/all/services/scarpet/tree/LICENSE
#divert <fpp>
namespace tunitas::scarpet::exception {
  //
  // An system (operating system) error was encountered.
  // These are just system_error in the POSIX sense, but they also are "scarpet-flavored"
  //
  // Usage:
  //
  //   try {
  //     ...
  //     throw exception::System{errc::No_such_file_or_directory,  "some excuse"};
  //     throw exception::System{sys::error::E::BADF,  "some excuse"};
  //     ...
  //   } catch (exception::Aspect const &) {
  //     ...handle it...
  //   } catch (std::exception const &) {
  //     ...handle it...
  //   }
  //
  class [[nodiscard]] System;
}
#endiv
#divert <hpp>
#import nonstd.exception.System
#import std.errc
#import std.error_category
#import std.error_code
#import tunitas.exception.Aspect
#import tunitas.scarpet.exception.Aspect
#import tunitas.string.View
class tunitas::scarpet::exception::System final : public tunitas::exception::Aspect,
                                                  public scarpet::exception::Aspect,
                                                  public nonstd::exception::System<string::View> {
  struct Ancestors {
    struct Aspects { /*who cares*/ };
    using Exception = nonstd::exception::System<string::View>;
  };
public:
  inline System(int, std::error_category const &, string::View reason);
  inline System(std::errc, string::View reason);
  inline System(std::error_code, string::View reason);
  auto what() const noexcept -> char const * override;
};
#endiv
#divert <ipp>
#import std.error_condition
#import std.system_category
namespace tunitas::scarpet::exception {
  System::System(int code, std::error_category const &category, string::View reason)
    : Ancestors::Exception{std::error_code{code, category}, reason}
  { } 
  System::System(std::errc code, string::View reason)
    : Ancestors::Exception{std::error_code{std::error_condition{code}.value(), std::system_category()}, reason}
  { }
  System::System(std::error_code ec, string::View reason)
    : Ancestors::Exception{ec, reason}
  { }
}
#endiv
#divert <cpp>
auto tunitas::scarpet::exception::System::what() const noexcept -> char const * {
  return Ancestors::Exception::what();
}
#endiv
