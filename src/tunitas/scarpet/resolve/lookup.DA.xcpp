// This is -*- c++ -*- nearly C++2a with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright 2019-2019, Oath Inc.
// Licensed under the terms of the Apache-2.0 license. See the LICENSE file in https://github.com/yahoo/tunitas-scarpet/blob/master/LICENSE for terms.
#divert <hpp>
#import tunitas.scarpet.resolve.lookup.declaration
namespace tunitas::scarpet::resolve {
  //
  // The DAPTR lookup is cut & paste of the NAPTR lookup.
  // Whereas the DAPTR is "just like" the NAPTR except that it does not have the regexp fieid
  // Also the DAPTR is non-standard and unannounced ot the network.
  // Missing:
  //   tunitas::scarpet::reply::Record<DAPTR> which the local extension of ares::reply::Record<DAPTR> rhyming with ares::reply::Record<NAPTR>, 
  //   tunitas::scarpet::reply:;parse<DAPTR>(...) which rhymes with  ares::reply:;parse<NAPTR>(...).
  //
  template<> auto lookup<DA>(Service &, Method const &, Identifier const &, Protocol const &, Club const &) -> Outcome<dns::Name>;
}
#endiv
#divert <cpp>
#import ares.dns.class.constants
#import ares.dns.type.constants
#import ares.error.Code
#import ares.query
#import ares.reply.Record
#import ares.reply.parse
#import ares.run
#import tunitas.scarpet.dns.type.constants
#import nonstd.exception.Unimplemented
#import std.error_code
#import std.optional
#import std.string_view
#import std.string
#import std.ostringstream
#import tunitas.scarpet.error.Code
namespace tunitas::scarpet::resolve {
  template<> auto lookup<DA>(Service &service, Method const &method, Identifier const &identifier, Protocol const &configured_protocol, Club const &configured_club) -> Outcome<dns::Name> {
    auto qdn = [method, identifier, configured_club] {
                 // [[DELETETHIS]] auto review = [](auto const &str) { return std::string_view{str.data(), str.size()}; };
                 std::ostringstream buf;
                 buf << "id" << '.' << view(identifier) << '.' << view(method) << '.' << view(configured_club);
                 return buf.str();
               }();
    auto const dnsclass = dns::IN;
    auto const dnstype = dns::DAPTR;
    auto unimplemented = false;
    std::optional<dns::Name> success;
    std::optional<std::error_code> failure;
    auto const receive = [configured_protocol, &success, &failure, &unimplemented](ares::error::Code code, ares::Count timeouts, ares::Buffer<std::byte const> buffer) -> void {
                           using namespace ares;
                           if (ares::error::Code::SUCCESS != code) {
                             failure = std::error_code{code};
                             return;
                           }
#warning DAPTR is unimplemented, augment
#if 1
                           unimplemented = true;
                           throw nonstd::exception::Unimplemented{__FUNCTION__, __FILE__, __LINE__};
#else
                           reply::Record<DAPTR> records;
                           auto parsed = reply::parse<DAPTR>(std::nothrow, buffer, records);
                           if (!ok(parsed)) {
                             failure = error_code(parsed);
                             return;
                           }
                           using Awkward = nonstd::span<char const>;
                           for (auto const &record : records) {
                             auto const found_protocol = [record]() {
                                                          auto spun = record.service<Awkward>();
                                                          return Protocol{spun.data(), spun.data()+spun.size()};
                                                        }();
                             if (found_protocol == configured_protocol) {
                               success = [record]() {
                                           auto spun = record.replacement<Awkward>();
                                           return dns::Name{spun.data(), spun.data()+spun.size()};
                                         }();
                               return;
                             }
                           }
#endif
                           // and maybe we finish up setting either failure or success (that will be recorded as a failure)
                         };
    qq(*service.channel, qdn, dnsclass, dnstype, receive);
    run(*service.channel, 5_count, 500ms); // WATCHOUT - ares::run(...) does NOT signal exceptions; it is basically 'noexcept' at this point [[FIXTHAT]] ares::run(...) and ares::process(...) should rethrow the exceptions; but they don't.
    if (failure) {
      return Outcome<dns::Name>{*failure};
    } else if (success) {
      return Outcome<dns::Name>{*success};
    } else if (unimplemented) {
      return Outcome<dns::Name>{std::error_code{error::Code::NOT_IMPLEMENTED}};
    } else {
      return Outcome<dns::Name>{std::error_code{error::Code::NOT_FOUND}};
    }
  }
}
#endiv
