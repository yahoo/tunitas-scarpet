// This is -*- c++ -*- nearly C++2a with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright 2019, Oath Inc.; Copyright 2020, Verizon Media
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-scarpet/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/services/scarpet/tree/LICENSE
#divert <hpp>
#import tunitas.scarpet.answer.PublicKey
#import tunitas.scarpet.resolve.Service
#import tunitas.scarpet.dns.Name
#import std.string
namespace tunitas::scarpet::answer {
  //
  // Whereas Fields<KEY>, Fields<AUTHENTICATION> are basically the same thing;
  // and both of those are just thin inheritance wrappers around PublicKey,
  // Here is the query launcher for the PublicKey overload.
  //
  // Launch the queries.
  // See the example and documentariat, nearby, at Fields
  //
  // Prior to calling this variant of launch(...) you should have done a launch(...)&run(...) on Fields<STANZA>
  //
  // The documentariat herein is phrased in terms of KEYS (publickey, sic)
  // but it equally applies to AUTHENTICATIONS (authentications).
  //
  // Examples: (from https://w3c-ccg.github.io/did-spec/)
  //
  //                                          <------------ Base ---------------->
  //   publickey.123456789abcdefghi.marfa PTR 0.publickey.123456789abcdefghi.marfa
  //   publickey.123456789abcdefghi.marfa PTR 1.publickey.123456789abcdefghi.marfa
  //   publickey.123456789abcdefghi.marfa PTR 2.publickey.123456789abcdefghi.marfa
  //
  // the record (itself)
  //
  //              <------------ Base ---------------->
  //           id.0.publickey.123456789abcdefghi.marfa URI 1 1 "did:example:123456789abcdefghi#keys-1"
  //   created.id.0.publickey.123456789abcdefghi.marfa TXT  "2002-10-10T17:00:00Z"
  //   updated.id.0.publickey.123456789abcdefghi.marfa TXT "2016-10-17T02:41:00Z"
  //         type.0.publickey.123456789abcdefghi.marfa TXT "RsaVerificationKey2018"
  //   controller.0.publickey.123456789abcdefghi.marfa URI 1 1 "did:example:123456789abcdefghi"
  //          key.0.publickey.123456789abcdefghi.marfa TXT "pem.-----BEGIN PUBLIC KEY...END PUBLIC KEY-----\r\n"
  //
  // Usage:
  //
  //   See document<DRRS>(...) for the overall usage scenario among the Fields,
  //   Fields<STANZA>, Fields<KEY>, Fields<AUTHENTICATION>, Fields<SERVICE>, Fields<PROOF>.
  //
  //
  namespace packaging {
    namespace launching { }
    namespace launching_PublicKey {
      using namespace launching; // cascade to get reqdn(...)
      namespace function {
        using resolve::Service;
        //
        // We actually don't get that much power out of the ancestry herein packaging::PublicKey
        // because Fields<KEY> and PublicKey<KEY>
        //     and Fields<AUTHENTICATION> and PublicKey<AUTHENTICTION>
        // are about the same complexity.
        //
        // not saving much ----------------------------------------------\ (here)
        //                                                               |
        //                                                               v
        template<processor::stanza::Name NAME> using Record = packaging::PublicKey<NAME>; // ............................................. Fields<KEY>, Fields<AUTHENTICATION>
        using Base = dns::Name; // the PTR record target
        template<processor::stanza::Name NAME> inline auto launch(Service &, Record<NAME> &, Base const &) -> void;
      }
    }
    // ADL expects to find it against packaging::Fields<STANZA>; c.f. document<DDRS>(...)
    using launching_PublicKey::function::launch;
  }
  // And we expect to find it at namespace answer for explicit naming.
  using packaging::launch;
}
#endiv
#divert <ipp>
#import ares.query
#import ares.dns.class.constants
#import std.cerr // REMOVETHIS
#import tunitas.scarpet.answer.launching.reqdn
namespace tunitas::scarpet::answer::packaging::launching_PublicKey {
  template<processor::stanza::Name NAME> auto function::launch(Service &service, Record<NAME> &record, Base const &base) -> void {
    auto invoke = [&service, &base](auto &field) {
                    namespace dns = scarpet::dns; // REMOVETHIS?
                    std::cerr << "DEBUG query type=" << (int) field.type() << " for " << reqdn(field.name(), base) << '\n'; // REMOVETHIS
                    qq(*service.channel, reqdn(field.name(), base), dns::IN, field.type(), field.processor);
                  };
    invoke(record.id);
    invoke(record.type);
    invoke(record.controller);
    invoke(record.key);
  }
}
#endiv
