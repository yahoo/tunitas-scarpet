// This is -*- c++ -*- nearly C++2a with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright 2019, Oath Inc.; Copyright 2020, Verizon Media
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-scarpet/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/services/scarpet/tree/LICENSE
#divert <fpp>
namespace tunitas::scarpet::exception {
  //
  // Some runtime error; a.k.a. "there was some problem"
  //
  // Recall: whereas exception objects must have copy constructors that offer the nothrow guarantee,
  // The string argument must be copied in the constructor into indirect (readonly) storage which will not throw.
  // Thus the constructor SHOULD take a reference argument because the string will be copied anyway in the Ancestor.
  // Cite the verbiage on cppreference.com wherein that is elaborated.
  //
  // Usage:
  //
  //   throw exception::Runtime{};
  //   throw exception::Runtime{"the Sun rose in the West"};
  //
  class [[nodiscard]] Runtime;
}
#endiv
#divert <hpp>
#import nonstd.exception.Runtime
#import tunitas.exception.Aspect
#import tunitas.scarpet.exception.Aspect
#import tunitas.string.View
class tunitas::scarpet::exception::Runtime final : public tunitas::exception::Aspect,
                                                   public scarpet::exception::Aspect,
                                                   public nonstd::exception::Runtime<string::View> {
  struct Ancestors {
    struct Aspects { /*who cares*/ };
    using Exception = nonstd::exception::Runtime<string::View>;
  };
public:
  inline Runtime();
  inline explicit Runtime(string::View reason);
  auto what() const noexcept -> char const * override;
};
#endiv
#divert <ipp>
namespace tunitas::scarpet::exception {
  Runtime::Runtime()
    : Runtime{"there was some problem"}
  { }
  Runtime::Runtime(string::View reason)
    : Ancestors::Exception{reason}
  { }
}
#endiv
#divert <cpp>
namespace tunitas::scarpet::exception {
  auto Runtime::what() const noexcept -> char const * {
    return Ancestors::Exception::what();
  }
}
#endiv
