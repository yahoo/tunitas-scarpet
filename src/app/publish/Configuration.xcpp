// This is -*- c++ -*- nearly C++2a with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright 2019-2019, Oath Inc.
// Licensed under the terms of the Apache-2.0 license. See LICENSE file in https://github.com/yahoo/tunitas-scarpet/blob/master/LICENSE for terms.
#divert <fpp>
namespace app::publish {
  //
  // The configuration of the DID Document Publisher
  //
  // Usage:
  //
  //   auto av = Args{cc, vv};
  //   auto program = Program{av};
  //   auto cfg = Configuration{program};
  //
  class Configuration;
}
#endiv
#divert <hpp>
#import app.Configuration
#import std.filesystem.path
#import std.optional
#import std.string
#import tunitas.scarpet.options.Encoding
class app::publish::Configuration : public app::Configuration {
  using ancestor = app::Configuration;
public:
  inline explicit Configuration(Program const &);
  //
  // Either one or the other, but not both, and not neither.
  //
  std::optional<std::filesystem::path> did_document_json;
  std::optional<std::filesystem::path> did_document_zone;
  //
  // the DC (DID Club),                       e.g. example.scarpet.tunitas.club.
  // the DDSS (DID Document Storage Service), e.g. storage.scarpet.tunitas.solutions.
  //                                    or example.storage.scarpet.tunitas.solutions.  (optionally with the method in a multi-tenant scheme)
  //
  std::optional<std::string> did_document_storage_service_domain;
  std::optional<std::string> name_server; // a master recepitive to updates from us
  //
  // Either one or the other, but not both, and not neither
  // There is no default value for either of these.
  //
  std::optional<std::string> update_tsig_key_value; // ............. the magic secret hash to allow the update to be accepted
  std::optional<std::filesystem::path> update_tsig_key_file; // .... when that secret is located in a file
  std::optional<std::string> update_tsig_key_name; // .............. the name of the secret, which comes either from a file or is given literally
};
#endiv
#divert <ipp>
namespace app::publish {
  Configuration::Configuration(Program const &program)
    : ancestor{program}
  { }
}
#endiv
