// This is -*- c++ -*- in the S.C.O.L.D. stylings that are so popular these days.
// Copyright 2019, Oath Inc.; Copyright 2020, Verizon Media
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-scarpet/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/services/scarpet/tree/LICENSE
#divert <fpp>
namespace app::genesis::exception {
  //
  // The genesis usage message, as an application exception
  //
  // Usage: (sic)
  //
  //   throw Usage{"program"};
  //
  // Usage: (sic)
  //
  //   try {
  //     ...
  //     throw Usage{"program"};
  //     ...
  //   } catch (exception::aspect::Quitting const &g) {
  //     g.stream() << g << '\n';
  //     return g.code();          ... equivalently ::exit(g.code());
  //   }
  //
  class [[nodiscard]] Usage;
}
#endiv
#divert <hpp>
#import app.exception.partial.Usage
class app::genesis::exception::Usage final : public app::exception::partial::Usage {
  using Ancestor = app::exception::partial::Usage;
public:
  inline explicit Usage(Arguments::Name);
  inline explicit Usage(Arguments::Name, exits::Code);
private:
  static auto format(Arguments::Name NAME) -> Arguments::Message;
};
#endiv
#divert <ipp>
#import app.exits.constants
namespace app::genesis::exception {
  Usage::Usage(Arguments::Name NAME) : Usage{NAME, exits::OK} { }
  Usage::Usage(Arguments::Name NAME, exits::Code code) : Ancestor{format(NAME), code} { }
}
#endiv
#divert <cpp>
#import std.ostringstream
namespace app::genesis::exception {
  auto Usage::format(Arguments::Name NAME) -> Arguments::Message {
    std::ostringstream buf;
    buf << "Generate a key pair"
        << '\n'
        << "\nusage: " << NAME << " [...options...]"
        << '\n'
        << "\nPresentation Options:"
        << '\n'
        << "\n--encoding=der+base64url           use DER (Distinguished Encoding Rules) with BASE64URL (urlsafe) encoding"
        << "\n                                   this is the default"
        << "\n--encoding=pem                     use PEM (Privacy-Enhanced Mail) Encoding"
        << "\n--strip-armor, -s                  removes the wrappers -----BEGIN ... KEY----- -----END ... KEY-----"
        << "\n                                   only applicable for --encoding=pem, this is the default"
        << "\n--keep-armor, -a                   keeps the wrappers -----BEGIN ... KEY----- -----END ... KEY-----"
        << "\n                                   only applicable for --encoding=pem"
        << '\n'
        << "\nGeneration Options:"
        << '\n'
        << "\n--private-side=FILEPATH            write the private key to the FILEPATH"
        << "\n --private-key=FILEPATH            simpler"
        << "\n     --private=FILEPATH            simplest"
        << '\n'
        << "\n--public-side=FILEPATH             write the public key (the DID) to the FILEPATH"
        << "\n --public-key=FILEPATH             simpler"
        << "\n    --public=FILEPATH              simplest"
        << '\n'
        << "\nGeneral Options:"
        << '\n'
        << "\n--usage, --help, -h                emit this message, and exit"
        << "\n--version, -V                      emit the package version, and exit"
        << "\n--dry-run, --dryrun, -y            dry run, do not start the server"
        << "\n--warnings, --warning, -w          emit warnings"
        << "\n--quiet, -q                        be quiet, emit no notices or warnings"
        << "\n--verbose, -v                      be verbose (independent of --quiet)"
        << "\n--debug, -d                        debug output (you should not need this)";
    return buf.str();
  }
}
#endiv
