// This is -*- c++ -*- nearly C++23 with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc. 2021.
// Licensed under the terms of the Apache-2.0 license.
// See the LICENSE file in https://github.com/yahoo/tunitas-scarpet/blob/master/LICENSE for terms.
#divert <fpp>
#forward tunitas.scarpet.pki.key.Activated
#forward tunitas.scarpet.pki.key.Privat
#forward tunitas.scarpet.pki.key.Publik
#forward tunitas.scarpet.pki.key.Pair
namespace tunitas::scarpet::pki::key {
  //
  // Access the public key
  // Of course this is misspelled; in C++, 'public' is a reserved word.  Get over yourself.
  //
  // Related: privat(Activated) -> Privat;
  //
  // You can get the public key out of the private key
  // But not vice versa (think about it).

  // Usage:
  //
  //   auto k = Activated{...somehow...};
  //   auto p = publik(k);
  //
  inline auto publik(Activated const &) -> Publik;
  inline auto publik(Privat const &) -> Publik;
  // These are accessors (casts)
  inline auto publik(Pair const &) -> Publik const &;
  inline auto publik(Pair &) -> Publik &;
  inline auto publik(Pair &&) -> Publik;
}
#endiv
#divert <ipp>
#import tunitas.scarpet.pki.key.Privat
#import tunitas.scarpet.pki.key.Pair
#import std.move
namespace tunitas::scarpet::pki {
  auto key::publik(Pair const &pair) -> Publik const & { return pair.publik(); }
  auto key::publik(Pair &pair) -> Publik & { return pair.publik(); }
  auto key::publik(Pair &&pair) -> Publik { return Publik{std::move(pair.publik())}; }
}
#import tunitas.scarpet.pki.key.Activated
#import openssl.functions
#import want.openssl.memory.Buffer
#import openssl.exception.System // [[FIXTHIS]] use openssl.exception.Library when it is available
namespace tunitas::scarpet::pki {
  auto key::publik(Activated const &k) -> Publik {
    using namespace openssl;
    using namespace want::openssl; // [[FIXTHIS]] because there is no namespace cascade in want.openssl
    unsigned char *public_buffer{nullptr};
    auto size = i2d_PublicKey(k.get(), &public_buffer);
    //auto size = pem_PublicKey(k.get(), &public_buffer);
    if (size < 0 || nullptr == public_buffer) {
      // [[FIXTHIS]] throw openssl::exception::Library{...} using ERROR_get_error() when that is available<
      throw openssl::exception::System{errno, std::system_category(), "i2d_PublicKey"};
    }
    // pesky...  See above
    return Publik{memory::Buffer{reinterpret_cast<std::byte *>(public_buffer), std::size_t(size)}};
  }
}
#import openssl.functions
#import openssl.exception.Alloc
#import openssl.exception.System
#import want.openssl.memory.Buffer
#import tunitas.scarpet.pki.key.detail.Pointer
namespace tunitas::scarpet::pki {
  auto key::publik(Privat const &privat) -> Publik {
    //
    // This is why generating the public and private keys at once in Pair is more efficient
    //
    using namespace openssl;
    using namespace want::openssl; // [[FIXTHIS]] because there is no namespace cascade in want.openssl
    unsigned char const *data = reinterpret_cast<unsigned char const *>(privat.data());
    long length = privat.size();
    detail::Pointer pointer{d2i_PrivateKey(EVP_PKEY_EC, nullptr, &data, length)};
    if (nullptr == pointer.get()) {
      throw openssl::exception::Alloc{};
    }
    unsigned char *public_buffer{nullptr};
    auto size = i2d_PublicKey(pointer.get(), &public_buffer);
    if (size < 0) {
      // [[FIXTHIS]] throw openssl::exception::Library{...} using ERROR_get_error() when that is available
      throw openssl::exception::System{errno, std::system_category(), "i2d_PublicKey"};
    }
    // pesky ... modern Buffer uses std::byte, older openssl uses unsigned char
    // pesky ... modern Buffer uses std::size_t, older openssl uses signed long
    return Publik{memory::Buffer{reinterpret_cast<std::byte *>(public_buffer), std::size_t(size)}};
  }
}
#endiv
