// This is -*- c++ -*- nearly C++23 with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc. 2021.
// Licensed under the terms of the Apache-2.0 license.
// See the LICENSE file at https://github.com/yahoo/tunitas-scarpet/blob/master/LICENSE for terms.
// See the LICENSE file at https://git.tunitas.technology/all/services/scarpet/tree/LICENSE
#divert <fpp>
namespace tunitas::scarpet::exception {
  //
  // The Scarpet-flavored coding encryption ("crypto") exception
  //
  // Encompases at least
  // - character set problems
  // - BASE64 encoding (base64url)
  // - BASE64 decoding (base64url)
  // 
  // Usage:
  //
  //   auto reason = std::string{...};        reason meaning "algo THIS" or "algo THAT"
  //   throw Crypto{reason}                   where reason is expected to be terse
  //
  class [[nodiscard]] Crypto;
}
#endiv
#divert <hpp>
#import nonstd.exception.Runtime
#import tunitas.exception.Aspect
#import tunitas.scarpet.exception.Aspect
#import tunitas.string.View
class tunitas::scarpet::exception::Crypto final : public tunitas::exception::Aspect,
                                                  public scarpet::exception::Aspect,
                                                  public nonstd::exception::Runtime<string::View> {
  struct Ancestors {
    struct Aspects { /*who cares*/ };
    using Exception = nonstd::exception::Runtime<string::View>;
  };
public:
  inline explicit Crypto(string::View reason);
  auto what() const noexcept -> char const * override final;
};
#endiv
#divert <ipp>
namespace tunitas::scarpet::exception {
  Crypto::Crypto(string::View reason)
    : Ancestors::Exception{reason}
  { }
}
#endiv
#divert <cpp>
namespace tunitas::scarpet::exception {
  auto Crypto::what() const noexcept -> char const * {
    return Ancestors::Exception::what();
  }
}
#endiv
