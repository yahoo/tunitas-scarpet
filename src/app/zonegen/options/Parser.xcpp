// This is -*- c++ -*- nearly C++2a with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc. 2021.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-scarpet/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/services/scarpet/tree/LICENSE
#divert <fpp>
namespace app::zonegen::options {
  //
  // The zonegen option parser
  //
  // Usage:
  //
  //   auto av = Args{...somehow...};
  //   auto cfg = Configuration{...somehow...};
  //   auto specification = Specification{...somehow...};
  //
  //   auto parser = Parser{specification, cfg};
  //   auto parsed = parse(av);
  //   if (ok(parsed)) {
  //      ...yay!...
  //   } else {
  //      ...sad...
  //   }
  //
  class Parser;
}
#endiv
#divert <hpp>
#import app.options.Parser
#import app.zonegen.Configuration
#import tunitas.Success
#import tunitas.application.options.c.Args
class app::zonegen::options::Parser : public app::options::Parser {
  using Ancestor = app::options::Parser;
public:
  inline explicit Parser(Specification const &, Configuration &);
  Parser(Specification &&) = delete;
  using Result = tunitas::Success; // not Ancestor::Result
  auto operator()(options::c::Args) -> Result;
protected:
  Configuration &cfg;
};
#endiv
#divert <ipp>
namespace app::zonegen::options {
  Parser::Parser(Specification const &spc, Configuration &cfg)
    : Ancestor{spc}
    , cfg{cfg}
  { }
}
#endiv
#divert <cpp>
#import app.zonegen.defaults
#import app.zonegen.exception.Usage
#import app.zonegen.options.indicator.constants
#import app.zonegen.options.Specification
#import app.exits.constants
#import app.exception.Version
#import app.options.exception.Bad_Filepath
#import options.longish.Getter
#import options.longish.Step
#import std.error_code
#import tunitas.application.options.exception.Unspecified
#import tunitas.application.options.get_filepath
#import tunitas.scarpet.error.Code
#import tunitas.scarpet.pki.cn.generate
namespace app::zonegen::options {
  auto Parser::operator()(options::c::Args av) -> Result {
    namespace error = tunitas::scarpet::error;
    using ::options::longish::Getter;
    using ::options::longish::Step;
    Getter get{spc.shortish(), spc.longish(), av};
    for (Step step=get(); more(step); step=get()) {
        switch (code(step)) {
        namespace oi = options::indicator;
      case oi::CHR_h:
      case oi::USAGE_SUBCOMMAND:
        throw exception::Usage{cfg.NAME, exits::OK};
      case oi::CHR_V:
      case oi::VERSION_SUBCOMMAND:
        throw exception::Version{cfg.NAME};
      case oi::CHR_w:
      case oi::WARNING_MODE:
        cfg.warning_mode = true;
        break;
      case oi::CHR_q:
      case oi::QUIET_MODE:
        cfg.quiet_mode = true;
        break;
      case oi::CHR_v:
      case oi::VERBOSE_MODE:
        cfg.verbose_mode = true;
        break;
      case oi::CHR_d:
      case oi::DEBUG_MODE:
        cfg.debug_mode = true;
        break;
      case oi::CHR_y:
      case oi::DRY_RUN_MODE:
        cfg.dry_run_mode = true;
        break;
      case oi::MISSING:
        ::options::error(cfg) << "missing value on " << word_in_error(step) << '\n';
        return Result{std::error_code{tunitas::scarpet::error::Code::OPTIONS}};
      case oi::UNKNOWN:
        ::options::error(cfg) << "invalid option " << word_in_error(step) << '\n';
        return Result{std::error_code{tunitas::scarpet::error::Code::OPTIONS}};
      default:
        // This is a programmer error.
        // It means that the specification of the option parser is wider than this switch statement.
        // Someone (you) forgot to take care of some eventuality.
        throw exception::Unspecified{cfg.NAME};
      }
    }
    auto const remaining = Arguments{get.begin(), get.end()};
    if (!remaining.empty()) {
      ::options::error(cfg) << "there MUST be no words after the options\n";
      return Result{std::error_code{error::Code::OPTIONS}};
    }
    return Result{tunitas::SUCCESS};
  }
}
#endiv
