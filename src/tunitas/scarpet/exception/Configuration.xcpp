// This is -*- c++ -*- nearly C++2a with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright 2019-2019, Oath Inc.
// Licensed under the terms of the Apache-2.0 license. See LICENSE file in https://github.com/yahoo/tunitas-scarpet/blob/master/LICENSE for terms.
#divert <fpp>
namespace tunitas::scarpet::exception {
  //
  // A problem with the (semi-static) configuration of the services.
  // While most problems of configuration can be detected early, some cannot be caught until late.
  //
  // Usage:
  //
  //   throw exception::Configuration{};
  //   throw exception::Configuration{"nonsensical configuration"};
  //
  class Configuration;
}
#endiv
#divert <hpp>
#import tunitas.scarpet.exception.Aspect
#import std.logic_error
#import std.string
class tunitas::scarpet::exception::Configuration : public Aspect, public std::logic_error {
  struct ancestors {
    using Aspect = scarpet::exception::Aspect;
    using Exception = std::logic_error;
  };
public:
  inline Configuration();
  inline explicit Configuration(std::string const &reason);
  auto what() const noexcept -> char const * override;
};
#endiv
#divert <ipp>
namespace tunitas::scarpet::exception {
  Configuration::Configuration()
    : Configuration{"configuration"}
  { }
  Configuration::Configuration(std::string const &reason)
    : ancestors::Exception{reason}
  { }
}
#endiv
#divert <cpp>
namespace tunitas::scarpet::exception {
  auto Configuration::what() const noexcept -> char const * {
    return ancestors::Exception::what();
  }
}
#endiv
