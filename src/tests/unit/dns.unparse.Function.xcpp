// This is -*- c++ -*- C++2a in the stylings of S.C.O.L.D. stylings that are so popular these days.
// Copyright 2019, Oath Inc.; Copyright 2020, Verizon Media
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-scarpet/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/services/scarpet/tree/LICENSE
#divert <fpp>
#import tunitas.scarpet.dns
namespace tests::unit::dns {
  using namespace ::tunitas::scarpet::dns;
  namespace uunpparrsee { // don't use 'unparse' because that will prevent ADL of unparse(...)
    class Function;
  }
}
#endiv
#divert <hpp>
#import cppunit.Test
#import cppunit.test.Fixture
class tests::unit::dns::uunpparrsee::Function : public cppunit::test::Fixture {
public:
  auto test_labels_copy() -> void;
  auto test_labels_forward() -> void;
  auto test_name_copy() -> void;
  auto test_name_forward() -> void;
  //
  auto test_label_one() -> void;
  auto test_label_two() -> void;
  auto test_label_three() -> void;
  auto test_label_four() -> void;
  //
  auto test_label_one_labels() -> void;
  auto test_label_two_labels() -> void;
  auto test_label_three_labels() -> void;
  auto test_label_four_labels() -> void;
  //
  auto test_label_one_name() -> void;
  auto test_label_two_name() -> void;
  auto test_label_three_name() -> void;
  auto test_label_four_name() -> void;
  //
  // ... and then redo for the fake partial function specializations
  //
  static auto suite() -> cppunit::Test *;
};
#endiv
#divert <cpp>
#import tunitas.scarpet.dns.unparse
auto tests::unit::dns::uunpparrsee::Function::test_labels_copy() -> void {
  auto const specimen = Labels{"", "solutions", "tunitas", "scarpet", "storage"};
  auto subject = unparse(specimen);
  auto const expected = "storage.scarpet.tunitas.solutions."s;
  auto actual = to_string(subject);
  CPPUNIT_ASSERT_EQUAL(expected, actual);
}
#import std.move
auto tests::unit::dns::uunpparrsee::Function::test_labels_forward() -> void {
  auto specimen = Labels{"", "solutions", "tunitas", "scarpet", "storage"};
  auto subject = unparse(std::move(specimen));
  auto const expected = "storage.scarpet.tunitas.solutions."s;
  auto actual = to_string(subject);
  CPPUNIT_ASSERT_EQUAL(expected, actual);
}
auto tests::unit::dns::uunpparrsee::Function::test_name_copy() -> void {
  auto const specimen = Name{"storage.scarpet.tunitas.solutions."};
  auto subject = unparse(specimen);
  auto const expected = "storage.scarpet.tunitas.solutions."s;
  auto actual = to_string(subject);
  CPPUNIT_ASSERT_EQUAL(expected, actual);
}
auto tests::unit::dns::uunpparrsee::Function::test_name_forward() -> void {
  auto specimen = Name{"storage.scarpet.tunitas.solutions."};
  auto subject = unparse(std::move(specimen));
  auto const expected = "storage.scarpet.tunitas.solutions."s;
  auto actual = to_string(subject);
  CPPUNIT_ASSERT_EQUAL(expected, actual);
}
auto tests::unit::dns::uunpparrsee::Function::test_label_one() -> void {
  auto const specimen1 = Label{"solutions"};
  auto subject = unparse(specimen1);
  auto const expected = "solutions"s;
  auto actual = to_string(subject);
  CPPUNIT_ASSERT_EQUAL(expected, actual);
}
auto tests::unit::dns::uunpparrsee::Function::test_label_two() -> void {
  auto const specimen1 = Label{"solutions"};
  auto const specimen2 = Label{"tunitas"};
  auto subject = unparse(specimen2, specimen1);
  auto const expected = "tunitas.solutions"s;
  auto actual = to_string(subject);
  CPPUNIT_ASSERT_EQUAL(expected, actual);
}
auto tests::unit::dns::uunpparrsee::Function::test_label_three() -> void {
  auto const specimen1 = Label{"solutions"};
  auto const specimen2 = Label{"tunitas"};
  auto const specimen3 = Label{"scarpet"};
  auto subject = unparse(specimen3, specimen2, specimen1);
  auto const expected = "scarpet.tunitas.solutions"s;
  auto actual = to_string(subject);
  CPPUNIT_ASSERT_EQUAL(expected, actual);
}
auto tests::unit::dns::uunpparrsee::Function::test_label_four() -> void {
  auto const specimen1 = Label{"solutions"};
  auto const specimen2 = Label{"tunitas"};
  auto const specimen3 = Label{"scarpet"};
  auto const specimen4 = Label{"storage"};
  auto subject = unparse(specimen4, specimen3, specimen2, specimen1);
  auto const expected = "storage.scarpet.tunitas.solutions"s;
  auto actual = to_string(subject);
  CPPUNIT_ASSERT_EQUAL(expected, actual);
}
auto tests::unit::dns::uunpparrsee::Function::test_label_one_labels() -> void {
  auto const specimen1 = Label{"devbox"};
  auto const ending = Labels{"", "solutions", "tunitas", "scarpet", "storage"};
  auto subject = unparse(specimen1, ending);
  auto const expected = "devbox.storage.scarpet.tunitas.solutions."s;
  auto actual = to_string(subject);
  CPPUNIT_ASSERT_EQUAL(expected, actual);
}
auto tests::unit::dns::uunpparrsee::Function::test_label_two_labels() -> void {
  auto const specimen2 = Label{"my"};
  auto const specimen1 = Label{"devbox"};
  auto const ending = Labels{"", "solutions", "tunitas", "scarpet", "storage"};
  auto subject = unparse(specimen2, specimen1, ending);
  auto const expected = "my.devbox.storage.scarpet.tunitas.solutions."s;
  auto actual = to_string(subject);
  CPPUNIT_ASSERT_EQUAL(expected, actual);
}
auto tests::unit::dns::uunpparrsee::Function::test_label_three_labels() -> void {
  auto const specimen3 = Label{"exp"};
  auto const specimen2 = Label{"my"};
  auto const specimen1 = Label{"devbox"};
  auto const ending = Labels{"", "solutions", "tunitas", "scarpet", "storage"};
  auto subject = unparse(specimen3, specimen2, specimen1, ending);
  auto const expected = "exp.my.devbox.storage.scarpet.tunitas.solutions."s;
  auto actual = to_string(subject);
  CPPUNIT_ASSERT_EQUAL(expected, actual);
}
auto tests::unit::dns::uunpparrsee::Function::test_label_four_labels() -> void {
  auto const specimen4 = Label{"oops"};
  auto const specimen3 = Label{"exp"};
  auto const specimen2 = Label{"my"};
  auto const specimen1 = Label{"devbox"};
  auto const ending = Labels{"", "solutions", "tunitas", "scarpet", "storage"};
  auto subject = unparse(specimen4, specimen3, specimen2, specimen1, ending);
  auto const expected = "oops.exp.my.devbox.storage.scarpet.tunitas.solutions."s;
  auto actual = to_string(subject);
  CPPUNIT_ASSERT_EQUAL(expected, actual);
}
auto tests::unit::dns::uunpparrsee::Function::test_label_one_name() -> void {
  auto const specimen1 = Label{"devbox"};
  auto const ending = Name{"storage.scarpet.tunitas.solutions."};
  auto subject = unparse(specimen1, ending);
  auto const expected = "devbox.storage.scarpet.tunitas.solutions."s;
  auto actual = to_string(subject);
  CPPUNIT_ASSERT_EQUAL(expected, actual);
}
auto tests::unit::dns::uunpparrsee::Function::test_label_two_name() -> void {
  auto const specimen2 = Label{"my"};
  auto const specimen1 = Label{"devbox"};
  auto const ending = Name{"storage.scarpet.tunitas.solutions."};
  auto subject = unparse(specimen2, specimen1, ending);
  auto const expected = "my.devbox.storage.scarpet.tunitas.solutions."s;
  auto actual = to_string(subject);
  CPPUNIT_ASSERT_EQUAL(expected, actual);
}
auto tests::unit::dns::uunpparrsee::Function::test_label_three_name() -> void {
  auto const specimen3 = Label{"exp"};
  auto const specimen2 = Label{"my"};
  auto const specimen1 = Label{"devbox"};
  auto const ending = Name{"storage.scarpet.tunitas.solutions."};
  auto subject = unparse(specimen3, specimen2, specimen1, ending);
  auto const expected = "exp.my.devbox.storage.scarpet.tunitas.solutions."s;
  auto actual = to_string(subject);
  CPPUNIT_ASSERT_EQUAL(expected, actual);
}
auto tests::unit::dns::uunpparrsee::Function::test_label_four_name() -> void {
  auto const specimen4 = Label{"oops"};
  auto const specimen3 = Label{"exp"};
  auto const specimen2 = Label{"my"};
  auto const specimen1 = Label{"devbox"};
  auto const ending = Name{"storage.scarpet.tunitas.solutions."};
  auto subject = unparse(specimen4, specimen3, specimen2, specimen1, ending);
  auto const expected = "oops.exp.my.devbox.storage.scarpet.tunitas.solutions."s;
  auto actual = to_string(subject);
  CPPUNIT_ASSERT_EQUAL(expected, actual);
}
#import rigging.suite.io
auto tests::unit::dns::uunpparrsee::Function::suite() -> cppunit::Test * {
  using namespace ::rigging::suite;
  Stream series{"unparse"};
  series << []() {
              Stream lab{"labels"};
              lab << call("copy", &Function::test_labels_copy)
                  << call("forward", &Function::test_labels_forward)
                ;
              return move(lab);
            }()
         << []() {
              Stream nam{"name"};
              nam << call("copy", &Function::test_name_copy)
                  << call("forward", &Function::test_name_forward)
                ;
              return move(nam);
            }()
         << []() {
              Stream lab{"label..."};
              lab << call("one", &Function::test_label_one)
                  << call("two", &Function::test_label_two)
                  << call("three", &Function::test_label_three)
                  << call("four", &Function::test_label_four)
                ;
              return move(lab);
            }()
         << []() {
              Stream lab{"label...labels"};
              lab << call("one", &Function::test_label_one_labels)
                  << call("two", &Function::test_label_two_labels)
                  << call("three", &Function::test_label_three_labels)
                  << call("four", &Function::test_label_four_labels)
                ;
              return move(lab);
            }()
         << []() {
              Stream lab{"label...name"};
              lab << call("one", &Function::test_label_one_name)
                  << call("two", &Function::test_label_two_name)
                  << call("three", &Function::test_label_three_name)
                  << call("four", &Function::test_label_four_name)
                ;
              return move(lab);
            }()
    ;
  return finalize(series);
}
#endiv
