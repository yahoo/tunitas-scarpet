// This is -*- c++ -*- C++2a in the stylings of S.C.O.L.D. stylings that are so popular these days.
// Copyright 2019-2019, Oath Inc.
// Licensed under the terms of the Apache-2.0 license. See the LICENSE file in https://github.com/yahoo/tunitas-scarpet/blob/master/LICENSE for terms.
#divert <fpp>
namespace tunitas::scarpet::url {
  //
  // The URI
  //
  //   /prefix/{ID}  ->  ( /prefix, ID )
  //
  // The URI (Indicator) is in the url (ell as in Llama)
  //
  // Usage:
  //
  //   Parser
  class URI;
}
#endiv
#divert <hpp>
#import std.string
namespace tunitas::scarpet::url {
  inline auto ok(URI const &) -> bool;
  //
  inline auto prefix(URI const &) -> std::string const &;
  inline auto prefix(URI &) -> std::string &;
  inline auto prefix(URI &&) -> std::string;
  //
  inline auto identifier(URI const &) -> std::string const &;
  inline auto identifier(URI &) -> std::string &;
  inline auto identifier(URI &&) -> std::string;
}
#import std.tuple
class tunitas::scarpet::url::URI : public std::tuple<bool, std::string, std::string> {
  using ancestor = std::tuple<bool, std::string, std::string>;
public:
  using Tuple = ancestor;
  URI() = default;
  using ancestor::tuple;
};
#endiv
#divert <ipp>
#import std.get
#import std.forward
namespace tunitas::scarpet {
  auto url::ok(URI const &u) -> bool { return std::get<0>(static_cast<URI::Tuple const &>(u)); }
  auto url::prefix(URI const &u) -> std::string const & { return std::get<1>(static_cast<URI::Tuple const &>(u)); }
  auto url::prefix(URI &u) -> std::string &             { return std::get<1>(static_cast<URI::Tuple &>(u)); }
  auto url::prefix(URI &&anon) -> std::string           { return std::get<1>(std::forward<URI::Tuple>(anon)); }
  auto url::identifier(URI const &u) -> std::string const & { return std::get<2>(static_cast<URI::Tuple const &>(u)); }
  auto url::identifier(URI &u) -> std::string &             { return std::get<2>(static_cast<URI::Tuple &>(u)); }
  auto url::identifier(URI &&u) -> std::string              { return std::get<2>(std::forward<URI::Tuple>(u)); }
}
#endiv
