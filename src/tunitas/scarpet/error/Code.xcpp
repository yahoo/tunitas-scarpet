// This is -*- c++ -*- nearly C++2a with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright 2019-2019, Oath Inc.
// Licensed under the terms of the Apache-2.0 license. See LICENSE file in https://github.com/yahoo/tunitas-scarpet/blob/master/LICENSE for terms.
#divert <fpp>
#import tunitas.scarpet.error.Condition
namespace tunitas::scarpet::error {
  //
  // The rich codes of failure.
  // There being many ways to fail but merely one way to succeed.
  //
  // Usage:
  //
  //   oh come on.  It's just an enum.
  //
  enum class Code {
    SUCCESS = (int) Condition::SUCCESS,
    FAILURE = (int) Condition::FAILURE,
    // ........................... there was a problem with ...
    OPTIONS, // ........................... the (command-line) options (parser)
    ROUTER, // ............................ the (url) path router (e.g. bad path)
    COMPILER, // .......................... the (did document) compiler, and the compiler output sink explains why
    NOT_IMPLEMENTED, // ................... as such.
    INVALID_URN, // ....................... invalid URN shape at all; not even close to did:<method>:<identifier>
    INVALID_METHOD, // .................... invalid method within a valid syntax of did:<method>:<identifier>
    INVALID_IDENTIFIER, // ................ invalid identifier within a valid syntax of did:<method>:<identifier>
    UNKNOWN_METHOD, // .................... unknown DID method, though valid syntactically
    NOT_FOUND, // ......................... lookup of the DID or something else was "not found"
    UNKNOWN_IDENTIFIER = NOT_FOUND, // .... same thing
    FOUND_MULTIPLE_RECORDS, // ............ found multiple records but only one is allowed
    FOUND_ZERO_RECORDS, // ................ found zero records where at least one was expected (otherwise "found" and "successful" though)
    BAD_UPDATE_TSIG_PRIVATE, //............ the name server update tsig secret was bad
    BAD_JSON, // .......................... some JSON (from a file or over the wire)
    BAD_ZONE, // .......................... a DNS ZONE (from a file or over the wire)
  };
}
#import std.is_error_code_enum
namespace std {
  template<> struct is_error_code_enum<tunitas::scarpet::error::Code>;
}
#endiv
#divert <hpp>
#import std.true_type
template<> struct std::is_error_code_enum<tunitas::scarpet::error::Code> : public std::true_type { };
#import std.error_code
namespace tunitas::scarpet::error {
  inline auto make_error_code(Code) -> std::error_code;
}
#endiv
#divert <ipp>
#import tunitas.scarpet.error.category
namespace tunitas::scarpet {
  auto error::make_error_code(Code code) -> std::error_code {
    return std::error_code{(int) code, category()};
  }
}
#endiv
