// This is -*- c++ -*- nearly C++23 with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc. 2021.
// Licensed under the terms of the Apache-2.0 license.
// See the LICENSE file in https://github.com/yahoo/tunitas-scarpet/blob/master/LICENSE for terms.
#divert <fpp>
namespace tunitas::scarpet::exception {
  //
  // The package version, as an application exception.
  //
  // Usage:
  //
  //   throw Version{"program"};
  //
  // Usage:
  //
  //   try {
  //     ...
  //     throw Version{"program"};
  //     ...
  //   } catch (tunitas::app::exception::Generic const &g) {
  //     g.stream() << g << '\n';
  //     return g.code();          ... equivalently ::exit(g.code());
  //   }
  //
  class [[nodiscard]] Version;
}
#endiv
#divert <hpp>
#import tunitas.app.exception.aspect.Version
#import tunitas.app.exception.aspect.Messaging
#import tunitas.scarpet.exception.aspect.Exiting
#import std.string
#import std.exception
class tunitas::scarpet::exception::Version
  : public aspect::Exiting,
    public tunitas::app::exception::aspect::Version,
    public tunitas::app::exception::aspect::Messaging,
    public std::exception {
  struct ancestors {
    struct aspects {
      using Exiting = scarpet::exception::aspect::Exiting;
      using Version = tunitas::app::exception::aspect::Version;
      using Messaging = tunitas::app::exception::aspect::Messaging;
    };
    using Exception = std::exception;
  };
public:
  inline explicit Version(std::string const &NAME);
  auto what() const noexcept -> char const * final;
  auto stream() const noexcept -> std::ostream & final;
  auto code() const noexcept -> sys::exits::Code final;
private:
  static auto format(std::string const &NAME) -> std::string;
};
#endiv
#divert <ipp>
#import sys.exits.constants
tunitas::scarpet::exception::Version::Version(std::string const &NAME)
  : ancestors::aspects::Messaging{format(NAME)}
{ }
#endiv
#divert <cpp>
#import std.ostringstream
#import autotools.autoconf.Config.tunitas.scarpet.CONFIG
namespace tunitas::scarpet::exception {
  auto Version::format(std::string const &NAME) -> std::string {
    std::ostringstream buf;
    buf << "version: " << NAME << " " << autotools::autoconf::Config<CONFIG>::version();
    return buf.str();
  }
  auto Version::what() const noexcept -> char const * {
    return ancestors::aspects::Messaging::what();
  }
  auto Version::stream() const noexcept -> std::ostream & {
    return ancestors::aspects::Version::stream();                                                         
  }
  auto Version::code() const noexcept -> sys::exits::Code {
    return ancestors::aspects::Version::code();
  }
}
#endiv
