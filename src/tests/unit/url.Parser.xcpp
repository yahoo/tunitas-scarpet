// This is -*- c++ -*- C++2a in the stylings of S.C.O.L.D. stylings that are so popular these days.
// Copyright 2019-2019, Oath Inc.
// Licensed under the terms of the Apache-2.0 license. See the LICENSE file in https://github.com/yahoo/tunitas-scarpet/blob/master/LICENSE for terms.
#divert <fpp>
namespace tests::unit::url { class Parser; }
#endiv
#divert <hpp>
#import cppunit.Test
#import cppunit.test.Fixture
#import tunitas.scarpet.url.Parser
class tests::unit::url::Parser : public cppunit::test::Fixture {
public:
  using Subject = ::tunitas::scarpet::url::Parser;
  auto test_empty() -> void;
  auto test_slash() -> void;
  auto test_more() -> void;
  auto test_slash2() -> void;
  auto test_slash2_prefix() -> void;
  auto test_slash2_identifier() -> void;
  auto test_slashprefix_empty() -> void;
  auto test_slashprefix_slash() -> void;
  auto test_slashprefix_perfidy() -> void;
  auto test_slashprefix_same() -> void;
  auto test_slashprefix_trailing_slash() -> void;
  auto test_slashprefix_two_ok() -> void;
  auto test_slashprefix_two_prefix() -> void;
  auto test_slashprefix_two_identifier() -> void;
  auto test_bad_identifier_1_with_slash() -> void;
  auto test_bad_identifier_2_with_slash() -> void;
  auto test_bad_identifier_3_not_isidentifier() -> void;
  auto test_case_01() -> void;
  auto test_case_02() -> void;
  auto test_case_03() -> void;
  auto test_case_04() -> void;
  auto test_case_05() -> void;
  auto test_case_06() -> void;
  static auto suite() -> cppunit::Test *;
};
#endiv
#divert <cpp>
auto tests::unit::url::Parser::test_empty() -> void {
  Subject parser("/");
  auto u = parser("");
  CPPUNIT_ASSERT(!ok(u));
}
auto tests::unit::url::Parser::test_slash() -> void {
  Subject parser("/");
  auto u = parser("/");
  CPPUNIT_ASSERT(!ok(u));
}
auto tests::unit::url::Parser::test_more() -> void {
  Subject parser("/");
  auto u = parser("/prefix");
  CPPUNIT_ASSERT(ok(u));
}
auto tests::unit::url::Parser::test_slash2() -> void {
  Subject parser("/");
  auto u = parser("/2");
  CPPUNIT_ASSERT(ok(u));
}
auto tests::unit::url::Parser::test_slash2_prefix() -> void {
  Subject parser("/");
  auto u = parser("/2");
  std::string expected = "/";
  std::string actual = prefix(u);
  CPPUNIT_ASSERT_EQUAL(expected, actual);
}
auto tests::unit::url::Parser::test_slash2_identifier() -> void {
  Subject parser("/");
  auto u = parser("/2");
  std::string expected = "2";
  std::string actual = identifier(u);
  CPPUNIT_ASSERT_EQUAL(expected, actual);
 }
auto tests::unit::url::Parser::test_slashprefix_empty() -> void {
  Subject parser("/prefix");
  auto u = parser("");
  CPPUNIT_ASSERT(!ok(u));
}
auto tests::unit::url::Parser::test_slashprefix_slash() -> void {
  Subject parser("/prefix");
  auto u = parser("/");
  CPPUNIT_ASSERT(!ok(u));
}
auto tests::unit::url::Parser::test_slashprefix_perfidy() -> void {
  Subject parser("/prefix");
  auto u = parser("/perfidy");
  CPPUNIT_ASSERT(!ok(u));
}
auto tests::unit::url::Parser::test_slashprefix_same() -> void {
  Subject parser("/prefix");
  auto u = parser("/prefix");
  CPPUNIT_ASSERT(!ok(u));
}
auto tests::unit::url::Parser::test_slashprefix_trailing_slash() -> void {
  Subject parser("/prefix");
  auto u = parser("/prefix/");
  CPPUNIT_ASSERT(!ok(u));
}
auto tests::unit::url::Parser::test_slashprefix_two_ok() -> void {
  Subject parser("/prefix");
  auto u = parser("/prefix/2");
  CPPUNIT_ASSERT(ok(u));
}
auto tests::unit::url::Parser::test_slashprefix_two_prefix() -> void {
  Subject parser("/prefix");
  auto u = parser("/prefix/2");
  std::string expected = "/prefix";
  std::string actual = prefix(u);
  CPPUNIT_ASSERT_EQUAL(expected, actual);
}
auto tests::unit::url::Parser::test_slashprefix_two_identifier() -> void {
  Subject parser("/prefix");
  auto u = parser("/prefix/2");
  std::string expected = "2";
  std::string actual = identifier(u);
  CPPUNIT_ASSERT_EQUAL(expected, actual);
}
auto tests::unit::url::Parser::test_bad_identifier_1_with_slash() -> void {
  Subject parser("/prefix");
  auto u = parser("/prefix/2/"); // <--- malformed identifier (contains a slash)
  CPPUNIT_ASSERT(!ok(u));
}
auto tests::unit::url::Parser::test_bad_identifier_2_with_slash() -> void {
  Subject parser("/prefix");
  auto u = parser("/prefix/apple/banana"); // <--- malformed identifier (contains a slash)
  CPPUNIT_ASSERT(!ok(u));
}
auto tests::unit::url::Parser::test_bad_identifier_3_not_isidentifier() -> void {
  Subject parser("/prefix");
  { auto u = parser("/prefix/!@#$%^^&*&"); // <----- WELL FORMED identifier (merely:does not contain '/')
    CPPUNIT_ASSERT(ok(u)); }
  { auto u = parser("/prefix/%20"); // <------------ WELL FORMED identifier
    CPPUNIT_ASSERT(ok(u)); }
  { auto u = parser("/prefix/$(date)"); // <-------- WELL FORMED identifier
    CPPUNIT_ASSERT(ok(u)); }
  { auto u = parser("/prefix/|date"); // <---------- WELL FORMED identifier
    CPPUNIT_ASSERT(ok(u)); }
  { auto u = parser("/prefix/|/home/you"); // <--- malformed identifier (with slashe)
    CPPUNIT_ASSERT(!ok(u)); }
}
auto tests::unit::url::Parser::test_case_01() -> void {
  Subject parser("/");
  auto parsed = parser("/did:example:123456789abcdefghi");
  CPPUNIT_ASSERT(ok(parsed));
  CPPUNIT_ASSERT_EQUAL("did:example:123456789abcdefghi"s, identifier(parsed));
}
auto tests::unit::url::Parser::test_case_02() -> void {
  Subject parser("/scarpet");
  auto parsed = parser("/scarpet/did:example:123456789abcdefghi");
  CPPUNIT_ASSERT(ok(parsed));
  CPPUNIT_ASSERT_EQUAL("did:example:123456789abcdefghi"s, identifier(parsed));
}
auto tests::unit::url::Parser::test_case_03() -> void {
  Subject parser("/scarpet");
  auto parsed = parser("/scarpet/did:example:a0096d98-2919-4a48-9b69-b8e7a8891d40");
  CPPUNIT_ASSERT(ok(parsed));
  CPPUNIT_ASSERT_EQUAL("did:example:a0096d98-2919-4a48-9b69-b8e7a8891d40"s, identifier(parsed));
}
auto tests::unit::url::Parser::test_case_04() -> void {
  Subject parser("/scarpet");
  auto parsed = parser("/scarpet/did:artisanal:d41d8cd98f00b204e9800998ecf8427e");
  CPPUNIT_ASSERT(ok(parsed));
  CPPUNIT_ASSERT_EQUAL("did:artisanal:d41d8cd98f00b204e9800998ecf8427e"s, identifier(parsed));
}
auto tests::unit::url::Parser::test_case_05() -> void {
  Subject parser("/scarpet");
  auto parsed = parser("/scarpet/did:listicle:e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855");
  CPPUNIT_ASSERT(ok(parsed));
  CPPUNIT_ASSERT_EQUAL("did:listicle:e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855"s, identifier(parsed));
}
auto tests::unit::url::Parser::test_case_06() -> void {
  Subject parser("/scarpet");
  auto parsed = parser("/scarpet/did:flannel:cf83e1357eefb8bdf1542850d66d8007d620e4050b5715dc83f4a921d36ce9ce47d0d13c5d85f2b0ff8318d2877eec2f63b931bd47417a81a538327af927da3e");
  CPPUNIT_ASSERT(ok(parsed));
  CPPUNIT_ASSERT_EQUAL("did:flannel:cf83e1357eefb8bdf1542850d66d8007d620e4050b5715dc83f4a921d36ce9ce47d0d13c5d85f2b0ff8318d2877eec2f63b931bd47417a81a538327af927da3e"s, identifier(parsed));
}
#import unit.rigging.suite.Stream
#import unit.rigging.suite.add
#import unit.rigging.suite.call
auto tests::unit::url::Parser::suite() -> cppunit::Test * {
  using namespace ::unit::rigging::suite;
  Stream series{"Parser"};
  series << call("empty", &Parser::test_empty)
         << call("slash", &Parser::test_slash)
         << call("more", &Parser::test_more)
         << call("slash2", &Parser::test_slash2)
         << call("slash2_prefix", &Parser::test_slash2_prefix)
         << call("slash2_identifier", &Parser::test_slash2_identifier)
         << call("slashprefix_empty", &Parser::test_slashprefix_empty)
         << call("slashprefix_slash", &Parser::test_slashprefix_slash)
         << call("slashprefix_perfidy", &Parser::test_slashprefix_perfidy)
         << call("slashprefix_same", &Parser::test_slashprefix_same)
         << call("slashprefix_trailing_slash", &Parser::test_slashprefix_trailing_slash)
         << call("slashprefix_two_ok", &Parser::test_slashprefix_two_ok)
         << call("slashprefix_two_prefix", &Parser::test_slashprefix_two_prefix)
         << call("slashprefix_two_identifier", &Parser::test_slashprefix_two_identifier)
         << call("bad_identifier_1_with_slash", &Parser::test_bad_identifier_1_with_slash)
         << call("bad_identifier_2_with_slash", &Parser::test_bad_identifier_2_with_slash)
         << call("bad_identifier_3_not_identifier", &Parser::test_bad_identifier_3_not_isidentifier)
    ;
  {
    Stream cas{"case"};
    cas << call("01", &Parser::test_case_01)
        << call("02", &Parser::test_case_02)
        << call("03", &Parser::test_case_03)
        << call("04", &Parser::test_case_04)
        << call("05", &Parser::test_case_05)
        << call("06", &Parser::test_case_06)
      ;
    series << move(cas);
  }
  return series.release();
}
#endiv
