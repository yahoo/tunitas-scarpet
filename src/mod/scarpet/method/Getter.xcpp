// This is -*- c++ -*- C++2a in the stylings of S.C.O.L.D. stylings that are so popular these days.
// Copyright 2019-2019, Oath Inc.
// Licensed under the terms of the Apache-2.0 license. See the LICENSE file in https://github.com/yahoo/tunitas-scarpet/blob/master/LICENSE for terms.
#divert <fpp>
namespace mod::scarpet::method {
  //
  // GET / HTTP/X.Y
  // <body is ignored>
  //
  // GET /{DID} HTTP/X.Y
  // <body is ignored>
  //
  // Expectations of URL routing consistency are enforced
  //
  // Usage:
  //   Getter getter{r, spec};
  //   return getter();
  //
  class Getter;
}
#endiv
#divert <hpp>
#import apache.httpd.status.Code
#import mod.scarpet.method.Prototype
#import std.string
#import std.tuple
#import tunitas.scarpet.did.Method
#import tunitas.scarpet.did.Identifier
#import tunitas.scarpet.dns.Name
class mod::scarpet::method::Getter : public method::Prototype {
  using ancestor = Prototype;
  using Code = apache::httpd::status::Code;
public:
  using ancestor::Prototype;
  auto operator()() -> Code;
protected:
  using Qualified_Name = tunitas::scarpet::dns::Name;
  auto banner_success(Qualified_Name const &) -> void;
  auto banner_failure(std::string const &) -> void;
  auto get_did(std::string const &uri) -> std::tuple<Code, std::string>;
  using Method = tunitas::scarpet::did::Method;
  using Identifier = tunitas::scarpet::did::Identifier;
  auto get_dns(std::string const &did) -> std::tuple<Code, Method, Identifier>;
};
#endiv
#divert <cpp>
#import autotools.autoconf.Config.mod.scarpet.CONFIG
#import c.str
#import mod.scarpet.httpd.module
#import tunitas.scarpet.resolve.lookup
auto mod::scarpet::method::Getter::operator()() -> Code {
  auto [url_status, url_identifier] = get_did(req->uri);
  if (HANDLER::OK != url_status) {
    ap_log_rerror(APLOG_MARK, APLOG_TRACE4, /*status*/0, req, "returning url_status=%d", (int) url_status);
    return url_status;
  }
  auto [did_status, did_method, did_identifier] = get_dns(url_identifier);
  if (HANDLER::OK != did_status) {
    ap_log_rerror(APLOG_MARK, APLOG_TRACE4, /*status*/0, req, "returning did_status=%d", (int) did_status);
    return did_status;
  }
  ap_log_rerror(APLOG_MARK, APLOG_TRACE4, /*status*/0, req, "use this method=%s, did=%s", c::str(did_method), c::str(did_identifier));
  using namespace tunitas::scarpet::resolve;
  auto resolved = lookup<NA>(state->channel, did_method, did_identifier, state->specification.resolver_service_name.value, state->specification.did_club_name.value);
  if (ok(resolved)) {
    banner_success(value(resolved));
    return HANDLER::OK; // not HTTP::OK
  } else {
    banner_failure(url_identifier);
    return HTTP::NOT_FOUND;
  }
}
#import apache.httpd.io.keywords
#import autotools.autoconf.Config.mod.scarpet.CONFIG
auto mod::scarpet::method::Getter::banner_failure(std::string const &identifier) -> void {
  using namespace io::keywords;
  ap_set_content_type(this->req, "text/html"); // [[FIXTHIS]] as ap::set_content_type(...)
  rs << html << br
     << head << autotools::autoconf::Config<CONFIG>::package_name() << _head << br
     << body << p << "unable to recover the identifier "
     << identifier
     << " because "
     << "of some really good reasons"
     << _p << _body
     << _html;
}
auto mod::scarpet::method::Getter::banner_success(Qualified_Name const &qdn) -> void {
  ap_set_content_type(this->req, "text/text"); // [[FIXTHIS]] as ap::set_content_type(...)
  rs << view(qdn);
}
#import c.str
#import std.string
auto mod::scarpet::method::Getter::get_did(std::string const &uri) -> std::tuple<Code, std::string> {
  ap_log_rerror(APLOG_MARK, APLOG_TRACE4, /*status*/0, req, "uri %s", c::str(uri));
  auto parsed = uri_parser(uri);
  if (!ok(parsed)) {
    ap_log_rerror(APLOG_MARK, APLOG_TRACE4, /*status*/0, req, "unparsable uri %s", c::str(uri));
    return {HTTP::BAD_REQUEST, {}};
  }
  ap_log_rerror(APLOG_MARK, APLOG_TRACE4, /*status*/0, req, "prefix: found=%s, configured=%s", c::str(prefix(parsed)), c::str(state->specification.location_prefix.value));
  if (prefix(parsed) != state->specification.location_prefix.value) {
    ap_log_rerror(APLOG_MARK, APLOG_TRACE4, /*status*/0, req, "inappropriate routing prefix: found=%s, configured=%s", c::str(prefix(parsed)), c::str(state->specification.location_prefix.value));
    // How then, did this get routed here?
    return {HTTP::NOT_FOUND, {}};
  }
  ap_log_rerror(APLOG_MARK, APLOG_TRACE4, /*status*/0, req, "good identifier %s", c::str(identifier(parsed)));
  return {HANDLER::OK, identifier(move(parsed))};
}
auto mod::scarpet::method::Getter::get_dns(std::string const &did) -> std::tuple<Code, Method, Identifier> {
  ap_log_rerror(APLOG_MARK, APLOG_TRACE4, /*status*/0, req, "did %s", c::str(did));
  auto parsed = did_parser(did);
  if (!ok(parsed)) {
    ap_log_rerror(APLOG_MARK, APLOG_TRACE4, /*status*/0, req, "unparsable did %s", c::str(did));
    return {HTTP::BAD_REQUEST, {}, {}};
  }
  using tunitas::scarpet::did::parser::method;
  ap_log_rerror(APLOG_MARK, APLOG_TRACE4, /*status*/0, req, "did: found=%s, configured=%s", c::str(method(parsed)), c::str(state->specification.did_method_name.value));
  if (method(parsed) != state->specification.did_method_name.value) {
    ap_log_rerror(APLOG_MARK, APLOG_TRACE4, /*status*/0, req, "inappropriate did_method: found=%s, configured=%s", c::str(method(parsed)), c::str(state->specification.did_method_name.value));
    // How then, did this get routed here?
    return {HTTP::NOT_FOUND, {}, {}};
  }
  ap_log_rerror(APLOG_MARK, APLOG_TRACE4, /*status*/0, req, "good did %s identifier %s", c::str(method(parsed)), c::str(identifier(parsed)));
  return {HANDLER::OK, method(move(parsed)), identifier(move(parsed))};
}
#endiv
