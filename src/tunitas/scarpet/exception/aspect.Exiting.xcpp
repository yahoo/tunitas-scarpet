// This is -*- c++ -*- nearly C++23 with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc. 2021.
// Licensed under the terms of the Apache-2.0 license.
// See the LICENSE file in https://github.com/yahoo/tunitas-scarpet/blob/master/LICENSE for terms.
#divert <fpp>
namespace tunitas::scarpet::exception::aspect {
  //
  // The aspect of an exiting exception
  // Descendants only.
  // This is a mixin; it is not a complete class.
  //
  // This mixin adds in stream() and code()
  //
  // Usage:
  //
  //   class my::Problem : public Exiting, public std::runtime_error {
  //   public:
  //      Problem(std::string const &reason);
  //      auto what() const noexcept -> char const * override;
  //      auto stream() const noexcept -> std::ostream & override;
  //      auto code() const noexcept -> sys::exits::Code override;
  //   };
  //
  //   try {
  //     ...
  //     throw Problem{...somehow...};
  //     ...
  //   } catch (Exiting const &e) {
  //     ...complain...
  //   } catch (tunitas::scarpet::exception::aspect::Exiting const &e) {
  //     e.stream() << e.what() << '\n';
  //     return e.code();
  //   }
  //
  class Exiting;
}
#endiv
#divert <hpp>
#import tunitas.scarpet.exception.Aspect
#import std.ostream
#import sys.exits.Code
class tunitas::scarpet::exception::aspect::Exiting : public Aspect {
  using ancestor = Aspect;
protected:
  virtual ~Exiting() = default;
public:
  Exiting() = default;
  virtual auto stream() const noexcept -> std::ostream & = 0;
  virtual auto code() const noexcept -> sys::exits::Code = 0;
};
#endiv

