// This is -*- c++ -*- C++2a in the stylings of S.C.O.L.D. stylings that are so popular these days.
// Copyright 2019, Oath Inc.; Copyright 2020, Verizon Media
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-scarpet/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/services/scarpet/tree/LICENSE
#divert <fpp>
namespace tests::unit::url { class Fixture; }
#endiv
#divert <hpp>
#import cppunit.Test
#import cppunit.test.Fixture
class tests::unit::url::Fixture : public cppunit::test::Fixture {
public:
  auto test_case_parser_01() -> void;
  auto test_usage_Parser_slash() -> void;
  auto test_usage_Parser_slashprefix() -> void;
  static auto suite() -> cppunit::Test *;
};
#endiv
#divert <cpp>
#import tunitas.scarpet.url.Parser
#import format.q
#import std.clog
auto tests::unit::url::Fixture::test_case_parser_01() -> void {
  using ::tunitas::scarpet::url::Parser;
  auto const specimen = "/scarpet/daptr/did:example:123456789abcdefghi"s;
  { auto parser = Parser{"/scarpet"};
    auto fails = parser(specimen); // because the prefix is not sufficient
    CPPUNIT_ASSERT(!ok(fails)); }
  { auto parser = Parser{"/scarpet/daptr"};
    auto good = parser(specimen); // because the prefix is now is sufficient
    CPPUNIT_ASSERT(ok(good)); }
}
auto tests::unit::url::Fixture::test_usage_Parser_slash() -> void {
  ::tunitas::scarpet::url::Parser parser{"/"};
  { auto u = parser("");
    CPPUNIT_ASSERT(!ok(u)); }
  { auto u = parser("/");
    CPPUNIT_ASSERT(!ok(u)); }
  { auto u = parser("/prefix");
    CPPUNIT_ASSERT(ok(u));
    if (ok(u)) {
      using format::q;
      std::clog << "prefix=" << q(prefix(u)) << '\n';
      std::clog << "urn=" << q(urn(u)) << '\n';
    }
    CPPUNIT_ASSERT("/" == prefix(u));
    CPPUNIT_ASSERT("prefix" == urn(u)); }
  { auto u = parser("/2");
    CPPUNIT_ASSERT(ok(u));
    { std::string expected = "/";
      std::string actual = prefix(u);
      CPPUNIT_ASSERT_EQUAL(expected, actual); }
    { std::string expected = "2";
      std::string actual = urn(u);
      CPPUNIT_ASSERT_EQUAL(expected, actual); } }
}
auto tests::unit::url::Fixture::test_usage_Parser_slashprefix() -> void {
  ::tunitas::scarpet::url::Parser parser{"/prefix"};
  { auto u = parser("");
    CPPUNIT_ASSERT(!ok(u)); }
  { auto u = parser("/");
    CPPUNIT_ASSERT(!ok(u)); }
  { auto u = parser("/perfidy");
    CPPUNIT_ASSERT(!ok(u)); }
  { auto u = parser("/prefix");
    CPPUNIT_ASSERT(!ok(u)); }
  { auto u = parser("/prefix/");
    if (ok(u)) {
      using format::q;
      std::clog << "prefix=" << q(prefix(u)) << '\n';
      std::clog << "urn=" << q(urn(u)) << '\n';
    }
    CPPUNIT_ASSERT(!ok(u)); }
  { auto u = parser("/prefix/2");
    CPPUNIT_ASSERT(ok(u));
    { std::string expected = "/prefix";
      std::string actual = prefix(u);
      CPPUNIT_ASSERT_EQUAL(expected, actual); }
    { std::string expected = "2";
      std::string actual = urn(u);
      CPPUNIT_ASSERT_EQUAL(expected, actual); } }
}
#import tests.unit.url.Parser
#import rigging.suite.io
auto tests::unit::url::Fixture::suite() -> cppunit::Test * {
  using namespace ::rigging::suite;
  Stream series{"url"};
  series << []() {
              Stream cas{"case"};
              cas << [] {
                       Stream par{"parser"};
                       par << call("01", &Fixture::test_case_parser_01)
                         ;
                       return move(par);
                     }()
                ;
              return move(cas);
            }()
         << []() {
              Stream use{"usage"};
              use << []() {
                       Stream par{"Parser"};
                       par << call("slash", &Fixture::test_usage_Parser_slash)
                           << call("slashprefix", &Fixture::test_usage_Parser_slashprefix)
                         ;
                       return move(par);
                     }()
                ;
              return move(use);
            }()
         << add<Parser>()
    ;
  return finalize(series);
}
#endiv
