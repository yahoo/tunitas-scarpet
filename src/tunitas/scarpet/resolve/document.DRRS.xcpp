// This is -*- c++ -*- nearly C++2a with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright 2019-2019, Oath Inc.
// Licensed under the terms of the Apache-2.0 license. See LICENSE file in https://github.com/yahoo/tunitas-scarpet/blob/master/LICENSE for terms.
#divert <fpp>
#import tunitas.scarpet.resolve.document.declaration
#endiv
#divert <hpp>
namespace tunitas::scarpet::resolve {
  //
  // Fish around the DSSZ and get the RR interest.
  //
  // DRRS - Disaggregated Resource Records, Splattered
  // DSSZ - Document Storage Service Zone
  //  SSZ - Storage Service Zone
  //  DSS - Document Storage Service (a company, one that is publishing and maintaining a SSZ)
  //
  // These use a "R" flag to indicate the use of a collection of resource records.
  // (elsewhere) "Z" to indicate the use of a whole zone in toto; which is not DRRS, but ZONE.
  //
  // (Tunitas) Scarpet (Storage Service) Lexicon 
  // DID Document Storage Service Zone (DSSZ), a (F)QDN -------------------------\ (here)
  //                                                                             |      
  // Mumblecore (DID Method) Lexicon                                             |
  // DID Method ----------------------------\-------------------\---\            |
  //                                        |                   |   |            |
  // (Tunitas) Scarpet Service Flags        |                   |   |            |
  //      ... Service-Protocol Flags        |                   |   |            |
  // DID Document Storage Flags ------------|---------------\   |   |            |
  //                                        |               |   |   |            |
  // DID Identifier-------\                 |               |   |   |            |
  //                      |                 |               |   |   |            |
  //                      |                 |               |   |   |            |
  // <-----+----+----+----+-----------> <---+-->            v   v   v            v
  // ... 9b-7d80-46c0-bc2a-76a84bf848ef.lo-fi    NAPTR 1 1 "R" "did+lo-fi"    "" gurdon.fd20-1e92-49c7.net.
  // ... 0e-233a-496c-aebd-79ca7c6efe9a.affogato NAPTR 1 1 "R" "did+affogato" "" will-o-the-wisp.fd20-1e92-49c7.net.
  //
  //
  //  qdn = 4c76ad9b-7d80-46c0-bc2a-76a84bf848ef.gurdon.fd20-1e92-49c7.net.
  //  qdn = 635b700e-233a-496c-aebd-79ca7c6efe9a.will-o-the-wisp.fd20-1e92-49c7.net.
  //
  template<> auto document<DRRS>(Service &, Method const &unused, Identifier const &, dns::Name const &) -> Outcome<did::Document<did::DOME>>;
}
#endiv
#divert <cpp>
#import ares.dns.class.constants
#import ares.run
#import nonstd.exception.Unimplemented
#import tunitas.scarpet.answer.Document
#import tunitas.scarpet.answer.launch
#import tunitas.scarpet.did.isa
#import tunitas.scarpet.exception.Configuration
#import tunitas.scarpet.exception.System
#import tunitas.scarpet.error.Code
#import std.error_code
#import std.move
#import std.string
#import std.system_error
#import sys.error.E
#import std.cerr
namespace tunitas::scarpet::resolve {
  template<> auto document<DRRS>(Service &service, Method const &unused_method, Identifier const &identifier, dns::Name const &ddss) -> Outcome<did::Document<did::DOME>> try {
    using Result = Outcome<did::Document<did::DOME>>;
    if (!service.channel) {
      // This function can't do its job.
      throw exception::Configuration{"no resolver channel"};
    }
    // If the luser gave us bad did componentry then there is no point in proceeding (it is normal, so return a failure, not an exception)
    if (!did::is_a_simple_word(unused_method)) {
      return Result{std::error_code{error::Code::INVALID_METHOD}};
    }
    if (!did::is_a_simple_word(identifier)) {
      return Result{std::error_code{error::Code::INVALID_IDENTIFIER}};
    }
    answer::Document document;
    launch(service, document.stanzas, identifier, ddss);
    run(*service.channel, 5_count, 300ms);
    constexpr auto DEVELOPMENTAL_DEBUGGING_MODE = true;
    if constexpr (DEVELOPMENTAL_DEBUGGING_MODE) {
      std::cerr << "DEBUG response ID ok " << ok(document.stanzas.id.response) << '\n';
      std::cerr << "DEBUG response ID value " << value(document.stanzas.id.response).endpoint << '\n';
      std::cerr << "DEBUG response CONTEXTS ok " << ok(document.stanzas.contexts.response) << '\n';
      std::cerr << "DEBUG response CONTEXTS value size " << size(value(document.stanzas.contexts.response)) << '\n';
      std::cerr << "DEBUG response KEYS ok " << ok(document.stanzas.keys.response) << '\n';
      std::cerr << "DEBUG response KEYS value size " << size(value(document.stanzas.keys.response)) << '\n';
      std::cerr << "DEBUG response AUTHENTICATIONS ok " << ok(document.stanzas.authentications.response) << '\n';
      std::cerr << "DEBUG response AUTHENTICATIONS value size " << size(value(document.stanzas.authentications.response)) << '\n';
      std::cerr << "DEBUG response SERVICES ok " << ok(document.stanzas.services.response) << '\n';
      std::cerr << "DEBUG response SERVICES value size " << size(value(document.stanzas.services.response)) << '\n';
      std::cerr << "DEBUG response PROOFS ok " << ok(document.stanzas.proofs.response) << '\n';
      std::cerr << "DEBUG response PROOFS value size " << size(value(document.stanzas.proofs.response)) << '\n';
    }
    auto estimated_count_of_records_inbound_back_to_us = 0;
    if (ok(document.stanzas.keys.response)) {
      for (auto const &ptr : value(document.stanzas.keys.response)) {
        document.keys.emplace_back();
        launch(service, document.keys.back(), ptr.target);
        ++estimated_count_of_records_inbound_back_to_us;
      }
    }
    if (ok(document.stanzas.authentications.response)) {
      for (auto const &ptr : value(document.stanzas.authentications.response)) {
        document.authentications.emplace_back();
        launch(service, document.authentications.back(), ptr.target);
        ++estimated_count_of_records_inbound_back_to_us;
      }
    }
    if (ok(document.stanzas.services.response)) {
      for (auto const &ptr : value(document.stanzas.services.response)) {
        document.services.emplace_back();
        launch(service, document.services.back(), ptr.target);
        ++estimated_count_of_records_inbound_back_to_us;
      }
    }
    if (ok(document.stanzas.proofs.response)) {
      for (auto const &ptr : value(document.stanzas.proofs.response)) {
        document.proofs.emplace_back();
        launch(service, document.proofs.back(), ptr.target);
        ++estimated_count_of_records_inbound_back_to_us;
      }
    }
    // At least one count [[FIXTHIS]] ares should support scalar multiplication of ares::Count
    auto const iteration_count = ares::Count{ares::count::Underlying(5_count) * ++estimated_count_of_records_inbound_back_to_us};
    run(*service.channel, iteration_count, 300ms);
    if constexpr (DEVELOPMENTAL_DEBUGGING_MODE) {
        std::ostream &outbound{std::cerr};
        {
          auto ith = 0u;
          for (auto const &record : document.keys) {
            outbound << "DEBUG key " << ith << " ID ";
            if (ok(record.id.response)) {
              outbound << " found " << value(record.id.response).endpoint << '\n';
            } else { outbound << " FAIL " << error_code(record.id.response).message() << '\n'; }
            outbound << "DEBUG key " << ith << " TYPE ";
            if (ok(record.type.response)) {
              outbound << " found " << value(record.type.response).text << '\n';
            } else { outbound << " FAIL " << error_code(record.type.response).message() << '\n'; }
            outbound << "DEBUG key " << ith << " CONTROLLER ";
            if (ok(record.controller.response)) {
              outbound << " found " << value(record.controller.response).endpoint << '\n';
            } else { outbound << " FAIL " << error_code(record.controller.response).message() << '\n'; }
            outbound << "DEBUG key " << ith << " KEY ";
            if (ok(record.key.response)) {
              outbound << " found " << value(record.key.response).text << '\n';
            } else { outbound << " FAIL " << error_code(record.key.response).message() << '\n'; }
            ++ith;
          }
        } {
          auto ith = 0u;
          for (auto const &record : document.authentications) {
            outbound << "DEBUG authentication " << ith << " ID ";
            if (ok(record.id.response)) {
              outbound << " found " << value(record.id.response).endpoint << '\n';
            } else { outbound << " FAIL " << error_code(record.id.response).message() << '\n'; }
            outbound << "DEBUG authentication " << ith << " TYPE ";
            if (ok(record.type.response)) {
              outbound << " found " << value(record.type.response).text << '\n';
            } else { outbound << " FAIL " << error_code(record.type.response).message() << '\n'; }
            outbound << "DEBUG authentication " << ith << " CONTROLLER ";
            if (ok(record.controller.response)) {
              outbound << " found " << value(record.controller.response).endpoint << '\n';
            } else { outbound << " FAIL " << error_code(record.controller.response).message() << '\n'; }
            outbound << "DEBUG authentication " << ith << " KEY ";
            if (ok(record.key.response)) {
              outbound << " found " << value(record.key.response).text << '\n';
            } else { outbound << " FAIL " << error_code(record.key.response).message() << '\n'; }
            ++ith;
          }
        }
      }
    auto dome = did::Document<did::DOME>{};
    return Result{std::move(dome)};
  } catch (std::system_error const &e) {
    // This is a surprise and not a normal event.  This is exceptional.
    throw exception::System{e.code(), "document"};
  }
}
#endiv
