// This is -*- c++ -*- C++23 in the stylings of S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc. 2021.
// Licensed under the terms of the Apache-2.0 license.
// See the LICENSE file at https://github.com/yahoo/tunitas-scarpet/blob/master/LICENSE for terms.
// See the LICENSE file at https://git.tunitas.technology/all/services/scarpet/tree/LICENSE
#divert <fpp>
#import tunitas.scarpet.application.options
namespace tests::unit::options {
  namespace [[eponymous]] fixture {
    class Fixture;
    namespace library = ::tunitas::scarpet::application::options;
  }
  using fixture::Fixture;
}
#endiv
#divert <hpp>
struct tests::unit::options::Fixture : public cppunit::test::Fixture {
  auto test_Arguments() -> void;
  auto test_Parser() -> void;
  auto test_parser_Result() -> void;
  auto test_Specification() -> void;
  static auto suite() -> cppunit::Test *;
protected:
  struct Parser;
  struct Specification;
};
#endiv
#divert <cpp>
#import std.empty
#import tunitas.scarpet.application.options.Arguments
auto tests::unit::options::Fixture::test_Arguments() -> void {
  auto subject = library::Arguments{};
  CPPUNIT_ASSERT(std::empty(subject));
}
#import tests.unit.options.Fixture.Parser
auto tests::unit::options::Fixture::test_Parser() -> void {
  auto spc = Parser::Specification{};
  auto cfg = Parser::Configuration{Parser::Configuration::Program{"a.out"}};
  auto subject = Fixture::Parser{spc, cfg};
  CPPUNIT_ASSERT(sizeof (subject));
}
#forward tunitas.scarpet.application.options.parser.Result
auto tests::unit::options::Fixture::test_parser_Result() -> void {
  auto subject = library::parser::Result{library::Arguments{"apple", "banana", "cherry"}};
  CPPUNIT_ASSERT(!std::empty(value(subject)));
}
#import tests.unit.options.Fixture.Specification
auto tests::unit::options::Fixture::test_Specification() -> void {
  auto spc = Specification{};
  CPPUNIT_ASSERT(0 != spc.shortish().size());
  CPPUNIT_ASSERT(0 != spc.longish().size());
}
auto tests::unit::options::Fixture::suite() -> cppunit::Test * {
  using namespace ::rigging::suite;
  Stream series{"options"};
  series << call("Arguments", &Fixture::test_Arguments)
         << call("Parser", &Fixture::test_Parser)
         << call("parser::Result", &Fixture::test_parser_Result)
         << call("Specification", &Fixture::test_Specification)
    ;
  return finalize(series);
}
#endiv
