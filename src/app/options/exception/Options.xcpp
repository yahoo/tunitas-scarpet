// This is -*- c++ -*- nearly C++2a with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc. 2021.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/app-options/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.app.technology/all/services/options/tree/LICENSE
#divert <fpp>
namespace app::options::exception {
  //
  // Generically, something is wrong in options parsing and we have to leave.
  // See also error::Code::OPTIONS
  //
  // Specificatoin:
  //
  //   [[FIXTHIS]] this one is ill-posed.  Is it not a Quitting? Then inherit from partial::Quitting
  //
  // Usage:
  //
  //   auto terse = std::string{...};        the terse area where this happened, something simpler __FUNCTION__
  //   throw Options{terse};                 where reason is expected to be terse
  //
  class [[nodiscard, deprecated("AVOID, the interface is incomplete")]] Options;
}
#endiv
#divert <hpp>
#import app.exception.Aspect
#import app.options.exception.Aspect
#import tunitas.scarpet.application.exception.Aspect
#import tunitas.application.options.exception.Aspect
#import tunitas.application.exception.Aspect
#import nonstd.exception.Invalid
#import tunitas.string.View
#import std.ostream
class app::options::exception::Options final : public Aspect,
                                               public app::exception::Aspect,
                                               public tunitas::scarpet::application::exception::Aspect,
                                               public tunitas::application::options::exception::Aspect,
                                               public tunitas::application::exception::Aspect,
                                               public nonstd::exception::Invalid<tunitas::string::View> {
  struct Ancestors {
    struct Aspects { /*who cares*/ };
    using Exception = nonstd::exception::Invalid<tunitas::string::View>;
  };
public:
  using Results = app::exception::Aspect::Results;
  inline explicit Options(tunitas::string::View reason);
  auto what() const noexcept -> Results::What override final;
  auto stream() const noexcept -> Results::Stream override final;
  auto exit() const noexcept -> Results::Exit override final;
  auto code() const noexcept -> Results::Exit override final;
};
#endiv
#divert <ipp>
namespace app::options::exception {
  Options::Options(tunitas::string::View reason)
    : Ancestors::Exception{reason}
  { }
}
#endiv
#divert <cpp>
#import sys.exits.constants // [[FIXTHIS]] cli::exits::constants when module-options >= 2.0 is ready
#import std.cerr
namespace app::options::exception {
  auto Options::what() const noexcept -> Results::What     { return Ancestors::Exception::what(); }
#warning FIXTHIS convert app::options::exception::Options to inherit from partial::Quitting and Do It Right.
  auto Options::stream() const noexcept -> Results::Stream { return std::cerr; }
  auto Options::exit() const noexcept -> Results::Exit     { return sys::exits::FAIL; }
  auto Options::code() const noexcept -> Results::Exit     { return sys::exits::FAIL; }
}
#endiv
