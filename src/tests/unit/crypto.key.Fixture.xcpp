// This is -*- c++ -*- C++2a in the stylings of S.C.O.L.D. stylings that are so popular these days.
// Copyright 2019-2019, Oath Inc.
// Licensed under the terms of the Apache-2.0 license. See the LICENSE file in https://github.com/yahoo/tunitas-scarpet/blob/master/LICENSE for terms.
#divert <fpp>
namespace tests::unit::crypto::key { class Fixture; }
#endiv
#divert <hpp>
#import cppunit.Test
#import cppunit.test.Fixture
class tests::unit::crypto::key::Fixture : public cppunit::test::Fixture {
public:
  auto test_generate() -> void;
  auto test_privat() -> void;
  auto test_publik() -> void;
  auto test_pair() -> void;
  static auto suite() -> cppunit::Test *;
};
#endiv
#divert <cpp>
#import tunitas.scarpet.crypto.key.generate
auto tests::unit::crypto::key::Fixture::test_generate() -> void {
  using namespace ::tunitas::scarpet::crypto::key;
  auto a = generate<Activated>();
  auto r = generate<Pair>();
  auto t = generate<Privat>();
  // generate<Publik>(); ... NO SUCH ... obviously
  // to_string(a); ......... NO SUCH ... not so obviously
  auto sat = to_string(privat(a));
  auto sak = to_string(privat(a));
  auto sr = to_string(r);
  auto st = to_string(t);
  CPPUNIT_ASSERT(!std::empty(sat));
  CPPUNIT_ASSERT(!std::empty(sak));
  CPPUNIT_ASSERT(!std::empty(sr));
  CPPUNIT_ASSERT(!std::empty(st));
  std::cerr << __FUNCTION__
            << "\nsat=" << sat
            << "\nsak=" << sak
            << "\nsr=" << sr
            << "\nst=" << st
    ;
}
#import tunitas.scarpet.crypto.key.privat
auto tests::unit::crypto::key::Fixture::test_privat() -> void {
  using namespace ::tunitas::scarpet::crypto::key;
  auto a = generate<Activated>();
  auto r = generate<Pair>();
  auto const c = generate<Pair>();
  auto pa = privat(a);
  auto &pr = privat(r);
  auto &pc = privat(c);
  auto sa = to_string(pa);
  auto sr = to_string(pr);
  auto sc = to_string(pc);
  CPPUNIT_ASSERT(!std::empty(sa));
  CPPUNIT_ASSERT(!std::empty(sr));
  CPPUNIT_ASSERT(!std::empty(sc));
  std::cerr << __FUNCTION__
            << "\nsa=" << sa
            << "\nsr=" << sr
            << "\nsc=" << sc
    ;
}
#import tunitas.scarpet.crypto.key.publik
auto tests::unit::crypto::key::Fixture::test_publik() -> void {
  using namespace ::tunitas::scarpet::crypto::key;
  auto a = generate<Activated>();
  auto t = generate<Privat>();
  auto r = generate<Pair>();
  auto const c = generate<Pair>();
  auto pa = publik(a);
  auto pt = publik(t);
  auto &pr = publik(r);
  auto &pc = publik(c);
  auto sa = to_string(pa);
  auto st = to_string(pt);
  auto sr = to_string(pr);
  auto sc = to_string(pc);
  CPPUNIT_ASSERT(!std::empty(sa));
  CPPUNIT_ASSERT(!std::empty(st));
  CPPUNIT_ASSERT(!std::empty(sr));
  CPPUNIT_ASSERT(!std::empty(sc));
  std::cerr << __FUNCTION__
            << "\nsa=" << sa
            << "\nst=" << st
            << "\nsr=" << sr
            << "\nsc=" << sc
    ;
}
#import tunitas.scarpet.crypto.key.pair
auto tests::unit::crypto::key::Fixture::test_pair() -> void {
  using namespace ::tunitas::scarpet::crypto::key;
  auto a = generate<Activated>();
  auto p = pair(a);
  auto s = to_string(p);
  CPPUNIT_ASSERT(!std::empty(s));
  std::cerr << __FUNCTION__
            << "\ns=" << s
    ;
}
#import tests.unit.crypto.key.Activated
#import tests.unit.crypto.key.Pair
#import tests.unit.crypto.key.Privat
#import tests.unit.crypto.key.Publik
#import rigging.suite.io
auto tests::unit::crypto::key::Fixture::suite() -> cppunit::Test * {
  using namespace ::rigging::suite;
  Stream series("key");
  series << call("generate", &Fixture::test_generate)
         << call("privat", &Fixture::test_privat)
         << call("publik", &Fixture::test_publik)
         << call("pair", &Fixture::test_pair)
         << add<key::Activated>()
         << add<key::Pair>()
         << add<key::Privat>()
         << add<key::Publik>()
    ;
  return finalize(series);
}
#endiv
