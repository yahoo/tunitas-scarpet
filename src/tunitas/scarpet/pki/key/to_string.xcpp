// This is -*- c++ -*- nearly C++23 with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc. 2021.
// Licensed under the terms of the Apache-2.0 license.
// See the LICENSE file in https://github.com/yahoo/tunitas-scarpet/blob/master/LICENSE for terms.
#divert <hpp>
#forward tunitas.scarpet.pki.key.Pair
#forward tunitas.scarpet.pki.key.Privat
#forward tunitas.scarpet.pki.key.Publik
#import nonstd.span
#import std.byte
#import std.string
namespace tunitas::scarpet::pki::key {
  //
  // Convert to a string in "base64"
  // ... where "base64" is interpreted as "base64url" or "url-safe" or "filename-safe" 
  // ... RFC 4648 Section 5
  //
  // There is a table in https://en.wikipedia.org/wiki/Base64 that describes the mapping between
  // PEM (Privacy-Enhanced Mail_; RFC 1421, deprecated
  // BASE64 Transfer Encoding for MIME; RFC 2045
  //
  // Usage:
  //
  //   oh come on!
  //
  inline auto to_string(Pair const &) -> std::string;
  inline auto to_string(Privat const &) -> std::string;
  inline auto to_string(Publik const &) -> std::string;
  namespace detail {
    using Span = nonstd::span<std::byte const>;
    using Respan = nonstd::span<unsigned char const>;
    auto encode(Span) -> std::string;
    inline auto respan(Span) -> Respan;
  }
}
#endiv
#divert <ipp>
#import tunitas.scarpet.pki.key.Pair
#import tunitas.scarpet.pki.key.Privat
#import tunitas.scarpet.pki.key.Publik
namespace tunitas::scarpet::pki {
  auto key::to_string(Pair const &pair) -> std::string {
    return to_string(pair.publik()) + '\n' + to_string(pair.privat());
  }
  auto key::to_string(Privat const &privat) -> std::string {
    return detail::encode(detail::Span{privat.data(), privat.size()});
  }
  auto key::to_string(Publik const &publik) -> std::string {
    return detail::encode(detail::Span{publik.data(), publik.size()});
  }
}
#endiv
#divert <cpp>
#import openssl.functions
#import tunitas.scarpet.exception.Crypto
#import std.move
#import std.prev
#import std.vector
namespace tunitas::scarpet::pki {
  auto key::detail::respan(Span source) -> Respan { return Respan{reinterpret_cast<unsigned char const *>(source.data()), source.size()}; }
  auto key::detail::encode(detail::Span source) -> std::string {
    auto resource = respan(source);
    auto size_estimate = [source]() {
                           auto size = source.size();
                           // The documentation is vague here about the padding and internal whitespace
                           auto basic_estimate = 8 * size / 6 + 3;
                           auto trim_estimate = 3 - (size % 3);
                           auto final_newlines = 1;
                           auto occasional_newlines = 1 + size/64; // following RFC 1421 because it is lower
                           auto nul_character = 1;
                           return (basic_estimate +
                                   trim_estimate +
                                   final_newlines +
                                   occasional_newlines +
                                   nul_character);
                         }();
    std::vector<unsigned char> buffer;
    buffer.resize(size_estimate);
    // https://wiki.openssl.org/index.php/Base64
    // WATCHOUT - "plus occasional newlines"
    // the actual_size returned (if non-negative) is the size before the '\0'
    auto actual_size = EVP_EncodeBlock(buffer.data(), resource.data(), resource.size());
    if (actual_size < 0) {
      // [[FIXTHIS]] throw the openssl::exception::Library when that exists; recover the openssl code that was the proximal cause
      throw exception::Crypto{"EVP_EncodeBlock(buffer"};
    }
    buffer.resize(actual_size);
    // pesky ... get rid of the newlines
    // [[FIXTHIS]] make it so that EncodeBlock never generates the '\n' in the first place
    // [[FIXTHIS]] get an encoding interface that generates base64url, a la RFC 4648.
    for (auto i{buffer.begin()}; buffer.end() != i; ++i) {
      auto &c = *i;
      if (std::isspace(c)) {
        auto ii = std::prev(i); // not expecting to erase the 0th character
        buffer.erase(i);
        ii = i;
      } else if ('+' == c) {
        c = '-';
      } else if ('/' == c) {
        c = '_';
      }
    }
    return std::string{buffer.begin(), buffer.end()}; // [[FIXTHIS]] yet another copy 
  }
}
#endiv
