// This is -*- c++ -*- C++2a in the stylings of S.C.O.L.D. stylings that are so popular these days.
// Copyright 2019, Oath Inc.; Copyright 2020, Verizon Media
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-scarpet/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/services/scarpet/tree/LICENSE
#divert <fpp>
#import mod.scarpet.method.Getter.declaration
namespace mod::scarpet::method {
  //
  // The DOCUMENT servlet server service serving
  //
  //   GET /document HTTP/X.Y      "/document" or some other path TBD
  //   <body is ignored>
  //
  // Expectations of URL routing consistency SHOULD be enforced (when implemented)
  //
  // Usage:
  //
  //   Getter<DOCUMENT> getter{req, spec};
  //   return getter();
  //
  template<> class Getter<getter::DOCUMENT>;
}
#endiv
#divert <hpp>
#import apache.httpd.status.Code
#import mod.scarpet.method.Prototype
namespace mod::scarpet::method {
  template<> class Getter<getter::DOCUMENT> : public Prototype {
    using Ancestor = Prototype;
  public:
    using Ancestor::Prototype;
    auto operator()() -> status::Code;
  };
}
#endiv
#divert <cpp>
#import tunitas.scarpet.resolve.document
#import tunitas.scarpet.resolve.lookup
namespace mod::scarpet::method {
  auto Getter<getter::DOCUMENT>::operator()() -> status::Code {
    auto [url_status, url_did_urn] = get_did_urn(req->uri);
    if (HANDLER::OK != url_status) {
      ap_log_rerror(APLOG_MARK, APLOG_TRACE4, /*status*/0, req, "returning url_status=%d", (int) url_status);
      return url_status;
    }
    auto parsed = did_parser(url_did_urn);
    if (!ok(parsed)) {
      ap_log_rerror(APLOG_MARK, APLOG_TRACE4, /*status*/0, req, "unparsable did %s", c::str(url_did_urn));
      return HTTP::BAD_REQUEST;
    }
    auto [did_status, did_method, did_identifier] = get_did_method_identifier(url_did_urn);
    if (HANDLER::OK != did_status) {
      ap_log_rerror(APLOG_MARK, APLOG_TRACE4, /*status*/0, req, "returning did_status=%d", (int) did_status);
      return did_status;
    }
    ap_log_rerror(APLOG_MARK, APLOG_TRACE4, /*status*/0, req, "use this method=%s, did=%s", c::str(did_method), c::str(did_identifier));
    using namespace tunitas::scarpet::resolve;
    auto const &protocol = state->specification.resolver_protocol_name.value;
    auto const &club = state->specification.did_club_name.value;
    auto looked = lookup<NA>(*state, did_method, did_identifier, protocol, club);
    if (ok(looked)) {
      // DDSS = Did Document Storage Service
      auto const &ddss = value(looked);
      auto resolved = document<DRRS>(*state, did_method, did_identifier, ddss);
      if (ok(resolved)) {
        auto dome = value(std::move(resolved));
        return HANDLER::OK; // not HTTP::OK
      }
    }
    banner_failure(url_did_urn);
    return HTTP::NOT_FOUND;
  }
}
#endiv
