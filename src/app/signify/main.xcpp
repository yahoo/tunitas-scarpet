// This is -*- c++ -*- nearly C++23 with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc. 2021.
// Licensed under the terms of the Apache-2.0 license.
// See the LICENSE file at https://github.com/yahoo/tunitas-scarpet/blob/master/LICENSE for terms.
// See the LICENSE file at https://git.tunitas.technology/all/services/scarpet/tree/LICENSE
#divert <hpp>
#import app.signify.Configuration
#import tunitas.application.options.c.Args
#import app.exits.Code
namespace app::signify {
  using Args = tunitas::application::options::c::Args;
  inline auto main(int, char *[]) -> exits::Code;
  inline auto main([[inout]] Args) -> exits::Code;
  auto main([[inout]] Configuration &, [[inout]] Args) -> exits::Code;
}
#endiv
#divert <ipp>
#import app.exits.constants
#import std.exception
#import std.cerr
namespace app {
  auto signify::main(int cc, char *vv[]) -> exits::Code { return main(Args(cc, vv)); }
  auto signify::main(Args args) -> exits::Code try {
    auto program = Configuration::Program{args.front()};
    auto cfg = Configuration{program};
    return main(cfg, std::move(args));
  } catch (std::exception const &e) {
    std::cerr << args.front() << ": error, unexpected " << e.what() << '\n';
    return exits::SOFTWARE;
  }
}
#endiv
#divert <cpp>
#import app.signify.options.Parser
#import app.signify.options.Specification
#import app.signify.process
#import tunitas.application.exception.aspect.Quitting
auto app::signify::main(Configuration &cfg, Args av) -> exits::Code try {
  auto spc = options::Specification{};
  auto parser = options::Parser{spc, cfg};
  auto parsed = parser(av);
  if (!ok(parsed)) {
    // [[FIXTHIS]] the error_code does not provide much fidelity on the problem ... "there was some problem"
    error(cfg) << "could not grok the options\n";
    return exits::FAIL;
  }
  if (cfg.dry_run_mode) {
    notice(cfg) << "not doing anything in dry-run mode\n";
  } else {
    return process(cfg);
  }
  return exits::OK;
} catch (exception::aspect::Quitting const &e) {
  e.stream() << e.what() << '\n';
  return e.code();
}
#endiv
