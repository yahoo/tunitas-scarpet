// This is -*- c++ -*- nearly C++2a with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright 2019, Oath Inc.; Copyright 2020, Verizon Media
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-scarpet/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/services/scarpet/tree/LICENSE
#divert <fpp>
namespace tunitas::scarpet::drrs::record {
  //
  // The prototype of a Disaggregated Resource Record, Splatttered (DRRS)
  // Descendants only.
  //
  // Every resource record "is a tuple" which has
  //
  //   a name, a label series ................ handled in drrs::Tree (not in record::Prototype)
  //   a class (IN) .......................... for now we are using IN-class records.  Someday
  //   a type, among the RR that we admit for Tunitas' Scarpet
  //   ...RR-specifiec fields...
  //
  // Usage:
  //
  //   as an Ancestor
  //
  class Prototype;
}
#endiv
#divert <hpp>
#import std.string
#import std.uint8_t
#import std.uint16_t
#import std.uint32_t
#import std.uint64_t
#import nonstd.uint128_t
// [[FIXTHIS]] nonstd::uint256_t
// [[FIXTHIS]] nonstd::uint512_t
#import tunitas.scarpet.dns.Labels
#import ares.dns.Class
class tunitas::scarpet::drrs::record::Prototype {
protected:
  virtual ~Prototype() = default;
  Prototype() = default;
public:
  inline auto classs() const -> dns::Class;
  // NOT ----> dns::Labels name; <---- but see drrs::Tree for a hierarchy, drrs::Zone for an linear (array) representation
};
#endiv
#divert <ipp>
#import ares.dns.class.constants // [[CHANGETHIS]] when Tunitas Scarpet moves on from IN-class records to specialized records
namespace tunitas::scarpet::drrs::record {
  auto Prototype::classs() const -> dns::Class { return dns::IN; }
}
#endiv
