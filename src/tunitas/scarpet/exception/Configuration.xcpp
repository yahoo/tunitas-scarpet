// This is -*- c++ -*- nearly C++23 with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc. 2021.
// Licensed under the terms of the Apache-2.0 license.
// See the LICENSE file at https://github.com/yahoo/tunitas-scarpet/blob/master/LICENSE for terms.
// See the LICENSE file at https://git.tunitas.technology/all/services/scarpet/tree/LICENSE
#divert <fpp>
namespace tunitas::scarpet::exception {
  //
  // A problem with the (semi-static) configuration of the services.
  // While most problems of configuration can be detected early, some cannot be caught until late.
  //
  // Usage:
  //
  //   throw exception::Configuration{};
  //   throw exception::Configuration{"nonsensical configuration"};
  //
  class [[nodiscard]] Configuration;
}
#endiv
#divert <hpp>
#import nonstd.exception.Logic
#import tunitas.exception.Aspect
#import tunitas.scarpet.exception.Aspect
#import tunitas.string.View
class tunitas::scarpet::exception::Configuration final : public tunitas::exception::Aspect,
                                                         public scarpet::exception::Aspect,
                                                         public nonstd::exception::Logic<string::View> {
  struct Ancestors {
    struct Aspects { /* who cares*/ };
    using Exception = nonstd::exception::Logic<string::View>;
  };
public:
  inline explicit Configuration();
  inline explicit Configuration(string::View reason);
  auto what() const noexcept -> char const * override;
};
#endiv
#divert <ipp>
namespace tunitas::scarpet::exception {
  Configuration::Configuration()
    : Configuration{"configuration"}
  { }
  Configuration::Configuration(string::View reason)
    : Ancestors::Exception{reason}
  { }
}
#endiv
#divert <cpp>
namespace tunitas::scarpet::exception {
  auto Configuration::what() const noexcept -> char const * { return Ancestors::Exception::what(); }
}
#endiv
