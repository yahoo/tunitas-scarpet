// This is -*- c++ -*- C++2a in the stylings of S.C.O.L.D. stylings that are so popular these days.
// Copyright 2019-2019, Oath Inc.
// Licensed under the terms of the Apache-2.0 license. See the LICENSE file in https://github.com/yahoo/tunitas-scarpet/blob/master/LICENSE for terms.
#divert <fpp>
#import std.is_same
namespace tunitas::scarpet::pki {
  //
  // The Crypto Algorithm
  // see https://w3c-ccg.github.io/ld-cryptosuite-registry/
  //
  // This is just a very very fancy way of declaring an enum, twice.
  //
  // Usage:
  //
  //    oh come on, it's still an enum!
  //    Purpose<SIGNATURE>::Algorithm signature
  //    Purpose<VERIFICATION>::Algorithm verification
  // 
  enum class SIGNATURE { };
  enum class VERIFICATION { };
  namespace required { template<typename PURPOSE> concept bool Purpose = std::is_same_v<PURPOSE, SIGNATURE> || std::is_same_v<PURPOSE, VERIFICATION>; }
  template<required::Purpose> struct Purpose {
    enum class Algorithm {
        Ed25519_2018,
        RSA_2018,
        ECDSA_Koblitz_2016,
        ECDSA_SECP256k1_2019,
      };
  };
}
#endiv
#divert <hpp>
#import std.string
#import tunitas.scarpet.pki.Algorithm
namespace tunitas::scarpet::pki {
  inline auto to_string(Purpose<SIGNATURE>::Algorithm) -> std::string;
  inline auto to_string(Purpose<VERIFICATION>::Algorithm) -> std::string;
}
#endiv
#divert <ipp>
#import std.to_string
namespace tunitas::scarpet {
  // [[FIXTHIS]] there is (has to be) a slicker way to do this in the type system but ... laziness and dinner is coming soon
  //
  // See https://w3c-ccg.github.io/ld-cryptosuite-registry/
  //
  // The string values are subsantially arbitrary, following some sort of CamelCase agglomeration protocol.
  //
  auto pki::to_string(Purpose<SIGNATURE>::Algorithm a) -> std::string {
    using Algorithm = Purpose<SIGNATURE>::Algorithm;
    switch (a) {
    case Algorithm::Ed25519_2018:
      return "Ed25519Signature2018";
    case Algorithm::RSA_2018:
      return "RsaSignature2018";
    case Algorithm::ECDSA_Koblitz_2016:
      return "EcdsaKoblitzSignature2016";
    case Algorithm::ECDSA_SECP256k1_2019:
      return "EcdsaSecp256k1VerificationKey2019";
    default:
      return "AlgorithmSignature" + std::to_string((unsigned)a);
    }
  }
  auto pki::to_string(Purpose<VERIFICATION>::Algorithm a) -> std::string {
    using Algorithm = Purpose<VERIFICATION>::Algorithm;
    switch (a) {
    case Algorithm::Ed25519_2018:
      return "Ed25519VerificationKey2018";
    case Algorithm::RSA_2018:
      return "RsaVerificationKey2018";
    case Algorithm::ECDSA_Koblitz_2016:
      return "NULL"; // You can't verify with this one, you can only sign with it.
    case Algorithm::ECDSA_SECP256k1_2019:
      return "EcdsaSecp256k1Signature2019";
    default:
      return "AlgorithmVerificationKey" + std::to_string((unsigned)a);
    }
  }
}
#endiv
