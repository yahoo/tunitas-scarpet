// This is -*- c++ -*- nearly C++2a with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright 2019-2019, Oath Inc.
// Licensed under the terms of the Apache-2.0 license. See the LICENSE file in https://github.com/yahoo/tunitas-scarpet/blob/master/LICENSE for terms.
#divert <hpp>
#forward app.Configuration
#import options.longish.Step
#import tunitas.scarpet.exception
#import tunitas.required.exception.app.Quitting
#import std.filesystem.path
namespace app::options {
  //
  // Get a word that is shaped like a DNS update secret (RFC 2845)
  // Don't do too much validation on it; just enough to identify wholly inapproprite candidates.
  //
  // The interface follows the style (rhymes with)
  // the "get_<thing>"(Configuration const &, Step) functions from tunitas::app::options
  //
  // The Configuration is supplied to give ADL context towards the error reporting.
  // The recovered value is returned.
  //
  // Syntax:
  //
  //   -X SECRET
  //   --xxxxxxx=SECRET
  //
  // Example:
  //
  //   --update-secret=de7c9b85b8b78aa6bc8a7a36f70a90701c9db4d9      from HMAC_SHA1("key", "The quick brown fox jumps over the lazy dog")
  //
  // Exceptions: (descendants of...)
  //
  //    tunitas::scarpet::exception::Quitting is thrown on failure to recover an Encoding
  //
  // Usage:
  //
  //    case oi::CHR_X:
  //    case oi::XXXXXXXX:
  //      cfg.update_secret_value = get_secret_literal(cfg, step);
  //      break;
  //
  namespace packaging::get_secret_literal::function {
    namespace exception = tunitas::scarpet::exception;
    using Step = ::options::longish::Step;
    template<tunitas::required::exception::app::Quitting QUITTING> inline auto get_secret_literal(Configuration const &, Step const &) -> std::filesystem::path;
  }
  using packaging::get_secret_literal::function::get_secret_literal;
}
#endiv
#divert <ipp>
#import app.Configuration
#import options.longish.Step
#import tunitas.scarpet.exception.aspect.Exiting
#import tunitas.app.options.get_word
#import std.all_of
#import std.isalnum
#import std.filesystem.path
#import std.move
#import sys.exits.constants
namespace app::options::packaging::get_secret_literal {
  template<tunitas::required::exception::app::Quitting QUITTING> auto function::get_secret_literal(Configuration const &cfg, Step const &step) -> std::filesystem::path try {
    //
    // Get the word.  See if it is appropriately (enough) shaped.  (non-empty is already checked below)
    //
    auto word = get_word<QUITTING>(cfg, step, "secret_literal");
    auto const good_enough_for_a_secret_literal = [](char c) { return '.' == c || '_' == c || '-' == c || '=' == c || '/' == c || isalnum(c); };
    // Prove that all the characters are good; but allow for syntax problems (e.g. duplicated dots).  We let the library discover those
    if (!std::all_of(word.begin(), word.end(), good_enough_for_a_secret_literal)) {
      warning(cfg) << "in inappropriate characters in the secret literal\n";
      throw QUITTING{cfg.NAME, sys::exits::CONFIG};
    }
    auto filepath = std::filesystem::path{word};
    if (std::filesystem::exists(filepath)) {
      notice(cfg) << "the secret value appears to be the name of a nearby file\n";
      notice(cfg) << "to supply a secret literally on the command line, use --name-server-update-secret-value=SECRET\n";
      notice(cfg) << "to point at a secret stored in a file, use --name-server-update-secret-file=FILEPATH\n";
      warning(cfg) << "the secret value appears to name the file, " << filepath << '\n';
      throw QUITTING{cfg.NAME, sys::exits::CONFIG};
    }
    return std::move(filepath);
  } catch (...) {
    error(cfg) << "cannot recover a secret_literal out of " << /*FIXTHIS format::q*/ required(step) << '\n';
    try {
      throw;
    } catch (exception::aspect::Exiting const &) {
      throw;
    } catch (...) {
      // throw exception::Quitting(cfg.NAME, sys::exits::CONFIG);
      throw QUITTING(cfg.NAME, sys::exits::CONFIG);
    }
  }
}
#endiv
