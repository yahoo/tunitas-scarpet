// This is -*- c++ -*- nearly C++2a with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright 2019, Oath Inc.; Copyright 2020, Verizon Media
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-scarpet/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/services/scarpet/tree/LICENSE
#divert <fpp>
#import tunitas.scarpet.drrs.Record.declaration
namespace tunitas::scarpet::drrs {
  //
  // A SRV record ... as per the standard.
  //
  template<> struct Record<dns::SRV>;
}
#endiv
#divert <hpp>
#import tunitas.scarpet.drrs.aspect.Endpoint
#import tunitas.scarpet.dns.Name
namespace tunitas::scarpet::drrs {
  template<> struct Record<dns::SRV>  : public record::Prototype, public aspect::Endpoint<dns::Name> {
    struct ancestors {
      using Prototype = record::Prototype;
      using Endpoint = aspect::Endpoint<dns::Name>;
    };
  public:
    Record() = default;
    // Though pass by reference here, but the endpoint will be copied in the ancestor's constructor
    inline Record(Priority, Weight, dns::Name const &endpoint);
  };
}
#endiv
#divert <ipp>
namespace tunitas::scarpet::drrs {
  Record<dns::SRV>::Record(Priority priority, Weight weight, dns::Name const &endpoint)
    : ancestors::Endpoint{priority, weight, endpoint}
  { }
}
#endiv
