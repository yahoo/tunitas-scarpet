// This is -*- c++ -*- nearly C++2a with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright 2019, Oath Inc.; Copyright 2020, Verizon Media
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-scarpet/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/services/scarpet/tree/LICENSE
#divert <fpp>
namespace tunitas::scarpet::compiler::detail::dome_zone {
  //
  // The Accreter (pronounced "A Cretin" or "A Creature")
  // - behaves like an i/o stream, rhymes with the usage pattern
  // - accepts "rows" as constructed, via operator<<
  // - pushes them back onto the Document<ZONE>
  //
  // The examples, as always, are from The Specification (https://w3c-ccg.github.io/did-spec/)
  //
  // Usage:
  //
  //   auto zone = did::Document<ZONE>{};
  //   auto accreter = Accreter{zone};
  //   accreter << row(...labels...,   ...payload...)
  //            << row(...name...,     ...payload...)
  //            << row(...labels...,   ...payload...)
  //            << row(...name...,     ...payload...);
  //
  class Accreter;
}
#endiv
#divert <hpp>
#forward tunitas.scarpet.did.Document.ZONE
#forward tunitas.scarpet.compiler.detail.dome_zone.Row
class tunitas::scarpet::compiler::detail::dome_zone::Accreter {
  using Target = did::Document<did::ZONE>;
public:
  inline explicit Accreter(Target &);
  template<dns::Type TYPE> inline auto operator<<(Row<TYPE> &&) -> Accreter &;
protected:
  Target &target;
};
#endiv
#divert <ipp>
#import tunitas.scarpet.did.Document.ZONE
#import tunitas.scarpet.drrs.Flat
#import tunitas.scarpet.compiler.detail.dome_zone.Row
#import std.move
namespace tunitas::scarpet::compiler::detail::dome_zone {
  Accreter::Accreter(Target &target) : target{target} { }
  template<dns::Type TYPE> auto Accreter::operator<<(Row<TYPE> &&row) -> Accreter & {
    target.flat.emplace_back(drrs::flat::Record<TYPE>{std::move(row.leftside), std::move(row.rightside)});
    return *this;
  }
}
#endiv
