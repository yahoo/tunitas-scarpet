// This is -*- c++ -*- C++23 in the stylings of S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc. 2021.
// Licensed under the terms of the Apache-2.0 license.
// See the LICENSE file in https://github.com/yahoo/tunitas-scarpet/blob/master/LICENSE for terms.
#divert <fpp>
namespace tests::unit::did { class Fixture; }
#endiv
#divert <hpp>
#import cppunit.Test
#import cppunit.test.Fixture
class tests::unit::did::Fixture : public cppunit::test::Fixture {
public:
  auto test_identifier_Name() -> void;
  auto test_identifier_Identifier() -> void;
  auto test_identifier_Method() -> void;
  auto test_Parser_bad() -> void;
  auto test_Parser_good() -> void;
  auto test_is_a_simple_word_Identifier() -> void;
  auto test_is_a_simple_word_Method() -> void;
  auto test_is_a_simple_word_string_view() -> void;
  auto test_unparse() -> void;
  static auto suite() -> cppunit::Test *;
};
#endiv
#divert <cpp>
#import std.empty
#import tunitas.scarpet.did.Name
auto tests::unit::did::Fixture::test_identifier_Name() -> void {
  auto subject0 = ::tunitas::scarpet::did::Name{};
  CPPUNIT_ASSERT(std::empty(subject0));
  auto subject1 = ::tunitas::scarpet::did::Name{"1"};
  CPPUNIT_ASSERT(!std::empty(subject1));
  CPPUNIT_ASSERT("1"sv == view(subject1));
}
#import tunitas.scarpet.did.Identifier
auto tests::unit::did::Fixture::test_identifier_Identifier() -> void {
  auto subject0 = ::tunitas::scarpet::did::Identifier{};
  CPPUNIT_ASSERT(std::empty(subject0));
  auto subject1 = ::tunitas::scarpet::did::Identifier{"1"};
  CPPUNIT_ASSERT(!std::empty(subject1));
  CPPUNIT_ASSERT("1"sv == view(subject1));
}
#import tunitas.scarpet.did.Method
auto tests::unit::did::Fixture::test_identifier_Method() -> void {
  auto subject0 = ::tunitas::scarpet::did::Method{};
  CPPUNIT_ASSERT(std::empty(subject0));
  auto subject1 = ::tunitas::scarpet::did::Method{"1"};
  CPPUNIT_ASSERT(!std::empty(subject1));
  CPPUNIT_ASSERT("1"sv == view(subject1));
}
#import tunitas.scarpet.did.Parser
auto tests::unit::did::Fixture::test_Parser_good() -> void {
  ::tunitas::scarpet::did::Parser parser;
  { auto u = parser("did:m:i");
    CPPUNIT_ASSERT(ok(u)); }
  { auto u = parser("did:tape:123456789");
    CPPUNIT_ASSERT(ok(u)); }
  { auto u = parser("did:baling:987654312");
    CPPUNIT_ASSERT(ok(u)); }
  { auto u = parser("did:wire:987654312");
    CPPUNIT_ASSERT(ok(u)); }
}
auto tests::unit::did::Fixture::test_Parser_bad() -> void {
  ::tunitas::scarpet::did::Parser parser;
  { auto u = parser("");
    CPPUNIT_ASSERT(!ok(u)); }
  { auto u = parser("did:");
    CPPUNIT_ASSERT(!ok(u)); }
  { auto u = parser("did::");
    CPPUNIT_ASSERT(!ok(u)); }
  { auto u = parser("did::1");
    CPPUNIT_ASSERT(!ok(u)); }
  { auto u = parser("did:m:");
    CPPUNIT_ASSERT(!ok(u)); }
}
#import tunitas.scarpet.did.isa
auto tests::unit::did::Fixture::test_is_a_simple_word_Identifier() -> void {
  using namespace ::tunitas::scarpet::did;
  CPPUNIT_ASSERT(false == is_a_simple_word(::tunitas::scarpet::did::Identifier{}));
}
auto tests::unit::did::Fixture::test_is_a_simple_word_Method() -> void {
  using namespace ::tunitas::scarpet::did;
  CPPUNIT_ASSERT(false == is_a_simple_word(::tunitas::scarpet::did::Method{}));
}
auto tests::unit::did::Fixture::test_is_a_simple_word_string_view() -> void {
  using namespace ::tunitas::scarpet::did::detail;
  CPPUNIT_ASSERT(false == is_a_simple_word(""sv));
  //
  CPPUNIT_ASSERT(true == is_a_simple_word("a"sv));
  CPPUNIT_ASSERT(true == is_a_simple_word("A"sv));
  CPPUNIT_ASSERT(true == is_a_simple_word("1"sv));
  CPPUNIT_ASSERT(true == is_a_simple_word("_"sv));
  CPPUNIT_ASSERT(true == is_a_simple_word("-"sv));
  CPPUNIT_ASSERT(true == is_a_simple_word("+"sv));
  //
  CPPUNIT_ASSERT(false == is_a_simple_word(" "sv));
  CPPUNIT_ASSERT(false == is_a_simple_word("\t"sv));
  CPPUNIT_ASSERT(false == is_a_simple_word("\r"sv));
  CPPUNIT_ASSERT(false == is_a_simple_word("\n"sv));
  CPPUNIT_ASSERT(false == is_a_simple_word("\f"sv));
  CPPUNIT_ASSERT(false == is_a_simple_word("/"sv));
  CPPUNIT_ASSERT(false == is_a_simple_word("|"sv));
  CPPUNIT_ASSERT(false == is_a_simple_word("\\"sv));
  CPPUNIT_ASSERT(false == is_a_simple_word(":"sv));
  CPPUNIT_ASSERT(false == is_a_simple_word("="sv));
  //
  CPPUNIT_ASSERT(true == is_a_simple_word("d41d8cd98f00b204e9800998ecf8427e"sv));
  CPPUNIT_ASSERT(true == is_a_simple_word("da39a3ee5e6b4b0d3255bfef95601890afd80709"sv));
  CPPUNIT_ASSERT(true == is_a_simple_word("e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855"sv));
  CPPUNIT_ASSERT(true == is_a_simple_word("cf83e1357eefb8bdf1542850d66d8007d620e4050b5715dc83f4a921d36ce9ce47d0d13c5d85f2b0ff8318d2877eec2f63b931bd47417a81a538327af927da3e"sv));
}
#import tunitas.scarpet.did.unparse
auto tests::unit::did::Fixture::test_unparse() -> void {
  namespace did = ::tunitas::scarpet::did;
  auto mmm = did::Method{"freegan"};
  auto iii = did::Identifier{"123456789abcdefghi"};
  auto const actual = to_string(unparse(mmm, iii)); // ADL found them..
  auto const expected = "did:freegan:123456789abcdefghi"s;
  CPPUNIT_ASSERT_EQUAL(expected, actual);
}
#import tests.unit.did.Document.DOME
#import tests.unit.did.Document.JSON
#import tests.unit.did.Document.ZONE
#import tests.unit.did.Parser
#import unit.rigging.suite.Stream
#import unit.rigging.suite.add
#import unit.rigging.suite.call
auto tests::unit::did::Fixture::suite() -> cppunit::Test * {
  using namespace ::unit::rigging::suite;
  Stream series{"did"};
  {
    Stream ide{"identifier"};
    ide << call("Name", &Fixture::test_identifier_Name)
        << call("Identifier", &Fixture::test_identifier_Identifier)
        << call("Method", &Fixture::test_identifier_Method)
      ;
    series << add(ide.release());
  } {
    Stream par{"Parser"};
    par << call("good", &Fixture::test_Parser_good)
        << call("bad", &Fixture::test_Parser_bad)
      ;
    series << add(par.release());
  } {
    Stream isa{"is_a_simple_word"};
    isa << call("Method", &Fixture::test_is_a_simple_word_Method)
        << call("Identifier", &Fixture::test_is_a_simple_word_Identifier)
        << call("string_view", &Fixture::test_is_a_simple_word_string_view)
      ;
    series << add(isa.release());
  }
  series << call("unparse", &Fixture::test_unparse)
    ;
  series << add(Parser::suite())
    // namespace rigging is defined in module tunitas.scarpet.did.Document.declaration
         << add(rigging::Document<did::document::DOME>::suite())
         << add(rigging::Document<did::document::JSON>::suite())
         << add(rigging::Document<did::document::ZONE>::suite())
    ;
  return series.release();
}
#endiv
