// This is -*- c++ -*- C++2a in the stylings of S.C.O.L.D. stylings that are so popular these days.
// Copyright 2019, Oath Inc.; Copyright 2020, Verizon Media
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-scarpet/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/services/scarpet/tree/LICENSE
#divert <fpp>
namespace tests::unit::pki { class Algorithm; }
#endiv
#divert <hpp>
#import cppunit.Test
#import cppunit.test.Fixture
class tests::unit::pki::Algorithm : public cppunit::test::Fixture {
public:
  auto test_SIGNATURE_Algorithm() -> void;
  auto test_VERIFICATION_Algorithm() -> void;
  static auto suite() -> cppunit::Test *;
protected:
  template<typename PURPOSE> auto test_PURPOSE_Algorithm() -> void;
};
#endiv
#divert <tpp>
#import tunitas.scarpet.pki.Algorithm
template<typename PURPOSE> auto tests::unit::pki::Algorithm::test_PURPOSE_Algorithm() -> void {
  using Subject = typename PURPOSE::Algorithm;
  for (auto i{-100}, e{100} ; e != i; ++i) {
    auto a = Subject(i);
    auto s = to_string(a);
    CPPUNIT_ASSERT(!s.empty());
  }
}
#divert <cpp>
#import rigging.suite.io
auto tests::unit::pki::Algorithm::suite() -> cppunit::Test * {
  using namespace ::rigging::suite;
  Stream series{"Algorithm"};
  namespace subject = ::tunitas::scarpet::pki;
  series << call("something", &Algorithm::test_PURPOSE_Algorithm<subject::Purpose<subject::SIGNATURE>>)
         << call("something", &Algorithm::test_PURPOSE_Algorithm<subject::Purpose<subject::VERIFICATION>>)
    ;
  return finalize(series);
}
#endiv
