// This is -*- c++ -*- C++2a in the stylings of S.C.O.L.D. stylings that are so popular these days.
// Copyright 2019-2019, Oath Inc.
// Licensed under the terms of the Apache-2.0 license. See the LICENSE file in https://github.com/yahoo/tunitas-scarpet/blob/master/LICENSE for terms.
#divert <fpp>
#import std.string
#import std.uint16_t
#import std.uint64_t
#import std.variant
namespace tunitas::scarpet::model::service {
  //
  // The well known services.
  // And the unknown ones too.
  //
  // Usage:
  //
  //    look, it's a variant, so it's difficult to use.
  //
  enum class Standard : std::uint16_t; // assigned by IANA, e.g. from /etc/services
  enum class Well_Known : std::uint64_t {
    // These should be greater than 2^16; and biggish so as not to clash with the IANA numbering space.  CBOR has something?
    // .../module-rabinpoly/bin/rfp64 'OpenID Connect 0.0'
    OIDC_0_0 = 0x0'78d8'5cbd'7201'a7eellu,
    OIDC_1_0 = 10+OIDC_0_0,
    OIDC_2_0 = 10+OIDC_1_0,
    OIDC_3_0 = 10+OIDC_2_0,
  };
  using Definition = std::variant<Standard, Well_Known, std::string>;
}
#endiv
#divert <hpp>
#import std.to_string
namespace tunitas::scarpet::model::service {
  inline auto to_string(Definition) -> std::string;
}
#endiv
#divert <ipp>
#import std.ostringstream
#import std.setw
#import std.setfill
#import std.visit
#import std.underlying_type
#import nonstd.Visitor
namespace tunitas::scarpet::model {
  inline auto service::to_string(Definition definition) -> std::string {
    std::ostringstream buf;
    auto visitor = nonstd::Visitor{[&buf](Standard value) { buf << "Service_" << std::dec << (std::underlying_type<Standard>::type) value; },
                                   [&buf](Well_Known value) { buf << "Service_" << std::hex << std::setw(16) << std::setfill('0') << (std::underlying_type<Well_Known>::type) value; },
                                   [&buf](std::string const & value) { buf << value; }};
    std::visit(visitor, definition);
    return buf.str();
  }
}
#endiv
