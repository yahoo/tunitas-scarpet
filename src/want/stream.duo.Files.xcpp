// This is -*- c++ -*- C++23 in the stylings of S.C.O.L.D. stylings that are so popular these days.
// Copyright (c) 2019-2019, Wendell Craig Baker, wbaker@scold-lang.org
#divert <fpp>
namespace want::stream::duo {
  //
  // The dual files of the output
  // This is typically the (private, public) keys
  //
  // Usage:
  //
  //   Files out;
  //   out.exceptions(std::ios::badbit|std::ios::failbit);
  //   out.open{keyfile, crtfile};
  //   out << {key, crt};
  //   out.close();
  //
  //   Files out{keyfile, crtfile};
  //   out << {key, crt};
  //   out.close(); ................... throws if the streams are not good
  //
  class Files;
}
#endiv
#divert <hpp>
#import std.ofstream
#import std.filesystem.path
class want::stream::duo::Files {
  using Filepath = std::filesystem::path;
public:
  Files() = default;
  inline Files(Filepath const &key, Filepath const &crt);
  inline auto open(Filepath const &key, Filepath const &crt) -> void;
  inline auto close() -> void; // throws if !good
  inline operator bool() const;
  inline auto operator!() const -> bool;;
  using IOState = std::ios_base::iostate;
  inline auto exceptions() const -> IOState;
  inline auto exceptions(IOState) -> void;
  // used with gang(T, T)
  template<typename TYPE> inline auto operator<<(std::pair<TYPE const &, TYPE const &> const &) -> Files &;
protected:
  std::ofstream private_part, public_part;
};
#endiv
#divert <ipp>
namespace want::stream::duo {
  Files::Files(Filepath const &private_part, Filepath const &public_part)
    : private_part{private_part}
    , public_part{public_part}
  { }
  auto Files::open(Filepath const &private_part_filepath, Filepath const &public_part_filepath) -> void {
    private_part.open(private_part_filepath);
    public_part.open(public_part_filepath);
  }
  auto Files::close() -> void {
    private_part.close();
    public_part.close();
  }
  Files::operator bool() const {
    return private_part && public_part;
  }
  auto Files::operator!() const -> bool {
    return !private_part || !public_part;
  }
  auto Files::exceptions() const -> IOState {
    return private_part.exceptions() | public_part.exceptions();
  }
  auto Files::exceptions(IOState exc) -> void {
    private_part.exceptions(exc);
    public_part.exceptions(exc);
  }
  template<typename TYPE> auto Files::operator<<(std::pair<TYPE const &, TYPE const &> const &pair) -> Files & {
    private_part << pair.first;
    public_part << pair.second;
    return *this;
  }
}
#endiv
