// This is -*- c++ -*- C++2a in the stylings of S.C.O.L.D. stylings that are so popular these days.
// Copyright 2019, Oath Inc.; Copyright 2020, Verizon Media
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-scarpet/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/services/scarpet/tree/LICENSE
#divert <hpp>
#import apache.httpd.status.constants // namespace HTTP and HANDLER
#import apache.httpd.io.Stream
#import apache.httpd.request_rec
namespace mod::scarpet::httpd {
  //
  // The standard handler callback interface
  //
  // WATCHOUT - no exceptions may leak back out to the C runtime.
  //
  namespace packaging::handler::function {
    namespace HTTP = apache::httpd::status::HTTP;
    namespace HANDLER = apache::httpd::status::handler;
    namespace io = apache::httpd::io;
    auto handler(request_rec *) noexcept -> int;
    // these are implementation details and are not exported out to namespace httpd
    auto banner_invalid(io::Stream &, request_rec *) -> void;
  }
  using packaging::handler::function::handler;
}
#endiv
#divert <cpp>
#define __trace__ ap_log_rerror(APLOG_MARK, APLOG_TRACE4, /*status*/ 0, r, "line %d", __LINE__);
#import apache.httpd.io.Stream
#import apache.httpd.module_config.get
#import autotools.autoconf.Config.mod.scarpet.CONFIG
#import mod.scarpet.httpd.module
#import mod.scarpet.method.Getter
#import mod.scarpet.method.Poster
#import mod.scarpet.method.Putter
#import mod.scarpet.router.url.parser.Tail
#import mod.scarpet.server.State
#import nonstd.exception.Unimplemented
#import nonstd.exception.Unreachable
#import std.cerr
#import std.exception
#import std.runtime_error
#import std.string
#import strcmp
namespace mod::scarpet::httpd::packaging::handler {
  auto function::handler(request_rec *r) noexcept -> int try {
    //
    // reminder: the word "scarpet: is the name of the declared module
    // and appears in configuration files and also in variables herein
    //
    // module.conf
    //     LoadModule scarpet_module modules/mod_scarpet.so
    //
    // handler_name is the soname of the library; e.g. "mod_scarpet"
    // we find this name via the autotools' config package_name()
    //
    // variables herein
    //     ::module AP_MODULE_DECLARE_DATA scarpet_module = {... }
    //     APLOG_DECLARE_MODULE(scarpet);
    //     APLOG_USE_MODULE(scarpet);
    //
    char const *const HANDLER_NAME = autotools::autoconf::Config<CONFIG>::module_name();
    ap_log_rerror(APLOG_MARK, APLOG_TRACE4, /*status*/ 0, r, "%s (trying %s)", HANDLER_NAME, r->uri);
    if (nullptr == r || nullptr == r->handler || 0 != strcmp(r->handler, HANDLER_NAME)) {
      return HANDLER::DECLINED;
    }
    ap_log_rerror(APLOG_MARK, APLOG_TRACE4, /*status*/ 0, r, "%s (accepted %s)", HANDLER_NAME, r->uri);
    namespace module_config = apache::httpd::module_config;
    auto *state = module_config::get<server::State>(r->server, scarpet_module);
    if (nullptr == state) {
      ap_log_rerror(APLOG_MARK, APLOG_TRACE4, /*status*/ 0, r, "null server config");
      throw std::runtime_error("null server state");
    }
    namespace io = apache::httpd::io;
    io::Stream rs(r);
    if (false) {
    } else if (method::GET == r->method_number) {
      ap_log_rerror(APLOG_MARK, APLOG_TRACE4, /*status*/ 0, r, "GET");
      router::url::parser::Tail parse;
      auto const url_path = r->uri;
      auto [routed, call] = parse(url_path);
      if (false) {
      } else if ("ping" == call) {
        //
        // GET .../ping HTTP/5.0
        // ...ignored...
        //
        ap_log_rerror(APLOG_MARK, APLOG_TRACE4, /*status*/ 0, r, "daptr");
        return method::Getter<method::getter::PING>{r, state}();
      } else {
        auto [location, call] = parse(routed);
        if (false) {
        } else if ("daptr" == call) {
          //
          // ... this DAPTR thing is our invention ...a DID Authority "with a D"...
          // ... there should be an IETF draft on it ... we should totally do that.
          //
          // GET .../daptr/{DID} HTTP/5.0
          // ...ignored...
          //
          ap_log_rerror(APLOG_MARK, APLOG_TRACE4, /*status*/ 0, r, "daptr");
          return method::Getter<method::getter::DAPTR>{r, state, routed}();
        } else if ("naptr" == call) {
          //
          // GET .../naptr/{DID} HTTP/5.0
          // ...ignored...
          //
          ap_log_rerror(APLOG_MARK, APLOG_TRACE4, /*status*/ 0, r, "naptr");
          return method::Getter<method::getter::NAPTR>{r, state, routed}();
        } else if ("document" == call) {
          //
          // GET .../document/{DID} HTTP/5.0
          // ...ignored...
          //
          ap_log_rerror(APLOG_MARK, APLOG_TRACE4, /*status*/ 0, r, "document");
          return method::Getter<method::getter::DOCUMENT>{r, state, routed}();
        }
      }
      banner_invalid(rs, r);
      return HTTP_NOT_FOUND;
    } else if (method::POST == r->method_number) {
      //
      // POST / HTTP/5.0       no {DID} in the URL path
      // ...document...
      //
      ap_log_rerror(APLOG_MARK, APLOG_TRACE4, /*status*/ 0, r, "POST");
      method::Poster POST(r, state);
      return POST();
    } else if (method::PUT == r->method_number) {
      //
      // PUT /{DID} HTTP/6.7
      // ...document...
      //
      ap_log_rerror(APLOG_MARK, APLOG_TRACE4, /*status*/ 0, r, "PUT");
      method::Putter PUT(r, state);
      return PUT();
    } else {
      banner_invalid(rs, r);
      return HTTP::METHOD_NOT_ALLOWED;
    }
    throw nonstd::exception::Unreachable{__FUNCTION__, __FILE__, __LINE__};
  } catch (...) {
    // WATCHOUT -- again no C++ exception can escape back out to the C runtime.
    try {
      throw;
    } catch (nonstd::exception::Unimplemented const &e) {
      // We know it is unimplemented, and there is a special code for that
      ap_log_rerror(APLOG_MARK, APLOG_TRACE1, /*status*/ 0, r, "we know %s", e.what());
      return HTTP::NOT_IMPLEMENTED;
    } catch (std::exception const &e) {
      // Ours and maybe someone else's exceptions.
      ap_log_rerror(APLOG_MARK, APLOG_TRACE1, /*status*/ 0, r, "unexpected exception %s", e.what());
    } catch (...) {
      // Huh?  different only in the error message that's logged
      ap_log_rerror(APLOG_MARK, APLOG_TRACE1, /*status*/ 0, r, "unexpected unknown exception");
    }
    return HTTP::INTERNAL_SERVER_ERROR;
  }
}
#import want.null_maybe
#import apache.httpd.io.keywords
namespace mod::scarpet::httpd::packaging::handler {
  auto function::banner_invalid(io::Stream &rs, request_rec *r) -> void {
    ap_log_rerror(APLOG_MARK, APLOG_TRACE4, /*status*/ 0, r, "otherwise");
    using namespace io::keywords;
    using namespace want;
    ap_set_content_type(r, "text/html"); // [[FIXME]] as apache::httpd::set_content_type(...)
    rs << html << br
       << head << autotools::autoconf::Config<CONFIG>::module_name() << _head << br
       << body << p << null_maybe(r->method) << ' ' << null_maybe(r->uri) << " is not supported" << _p << _body
       << _html;
  }
}
#endiv
