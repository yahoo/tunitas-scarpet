// This is -*- c++ -*- nearly C++2a with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright 2019, Oath Inc.; Copyright 2020, Verizon Media
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-scarpet/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/services/scarpet/tree/LICENSE
#divert <fpp>
namespace app::exception {
  //
  // The Scarpet-flavored quitting exception
  // Just like nonstd::exception::Quitting, except Scarpet-friendly.
  //
  // Usage:
  //
  //   throw Quitting{NAME, sys::exits::FAIL};
  //   throw Quitting{NAME};
  //
  class Quitting;
}
#endiv
#divert <hpp>
#import tunitas.app.exception.Aspect
#import tunitas.scarpet.exception.Aspect
#import tunitas.app.exception.feature.Quitting
#import nonstd.exception.Quitting
#import sys.exits.Code
#import sys.exits.constants
class app::exception::Quitting : public tunitas::app::exception::Aspect,
                                 public tunitas::scarpet::exception::Aspect,
                                 public tunitas::app::exception::feature::Quitting,
                                 public nonstd::exception::Quitting {
  struct Ancestors {
    struct Aspects {
      using Tunitas = tunitas::app::exception::Aspect;
      using Scarpet = tunitas::scarpet::exception::Aspect;
    };
    struct Features {
      // [[FIXTHIS]] this should be an aspect (a pure abstract class) because all the features are already within nonstd::exception::Quitting
      using Quitting = app::exception::feature::Quitting;
    };
    using Exception = nonstd::exception::Quitting;
  };
public:
  inline explicit Quitting(std::string const &NAME, sys::exits::Code = sys::exits::FAIL);
  auto what() const noexcept -> char const * final;
  auto stream() const noexcept -> std::ostream & final;
  auto code() const noexcept -> sys::exits::Code final;
};
#endiv
#divert <ipp>
namespace app::exception {
  Quitting::Quitting(std::string const &NAME, sys::exits::Code code)
    : Ancestors::Features::Quitting{code} // [[FIXTHIS]] ibidem.
    , Ancestors::Exception{NAME, code}
  { }
}
#endiv
#divert <cpp>
namespace app::exception {
  auto Quitting::what() const noexcept -> char const * {
    return Ancestors::Exception::what();
  }
  auto Quitting::stream() const noexcept -> std::ostream & {
    return Ancestors::Exception::stream();
  }
  auto Quitting::code() const noexcept -> sys::exits::Code {
    return Ancestors::Exception::code();
  }
}
#endiv
