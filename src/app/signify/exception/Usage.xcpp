// This is -*- c++ -*- in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc. 2021.
// Licensed under the terms of the Apache-2.0 license.
// See the LICENSE file at https://github.com/yahoo/tunitas-scarpet/blob/master/LICENSE for terms.
// See the LICENSE file at https://git.tunitas.technology/all/services/scarpet/tree/LICENSE
#divert <fpp>
namespace app::signify::exception {
  //
  // The signify usage message, as an application exception
  //
  // Usage: (sic)
  //
  //   throw Usage{"program"};
  //
  // Usage: (sic)
  //
  //   try {
  //     ...
  //     throw Usage{"program"};
  //     ...
  //   } catch (exception::aspect::Quitting const &g) {
  //     g.stream() << g << '\n';
  //     return g.code();          ... equivalently ::exit(g.code());
  //   }
  //
  class [[nodiscard]] Usage;
}
#endiv
#divert <hpp>
#import app.exception.partial.Usage
class app::signify::exception::Usage final : public app::exception::partial::Usage {
  using Ancestor = app::exception::partial::Usage;
public:
  inline explicit Usage(Arguments::Name);
  inline explicit Usage(Arguments::Name, exits::Code);
private:
  static auto format(Arguments::Name NAME) -> Arguments::Message;
};
#endiv
#divert <ipp>
#import app.exits.constants
namespace app::signify::exception {
  Usage::Usage(Arguments::Name NAME) : Usage{NAME, exits::OK} { }
  Usage::Usage(Arguments::Name NAME, exits::Code code) : Ancestor{format(NAME), code} { }
}
#endiv
#divert <cpp>
#import std.ostringstream
#import app.well_known
namespace app::signify::exception {
  auto Usage::format(Arguments::Name NAME) -> Arguments::Message {
    std::ostringstream buf;
    buf << "Sign the Certificate Signing Request (CSR), returning the signed Certificate (CRT)"
        << "\nPresumably the CSR was created with " << well_known::SCISSOR << " or other such tooling"
        << '\n'
        << "\nusage: " << NAME << " [...options...]"
        << '\n'
        << "\nSigning Options:"
        << '\n'
        << "\n--authority-private-side=FILEPATH         the CA private key from the FILEPATH"
        << "\n --authority-private-key=FILEPATH         alternate"
        << "\n     --authority-private=FILEPATH         simple"
        << "\n          --private-side=FILEPATH         simpler"
        << "\n           --private-key=FILEPATH         simpler"
        << "\n               --private=FILEPATH         simplest"
        << "\n                   --key=FILEPATH         simplest"
        << '\n'
        << "\n--authority-public-side=FILEPATH          the CA public certificate from the FILEPATH"
        << "\n --authority-public-crt=FILEPATH          alternate"
        << "\n     --authority-public=FILEPATH          simple"
        << "\n          --public-side=FILEPATH          simpler"
        << "\n               --public=FILEPATH          simplest"
        << '\n'
        << "\n--certificate-signing-request=FILEPATH    the Certificate Signing Request (CSR)"
        << "\n            --signing-request=FILEPATH    simple"
        << "\n                    --request=FILEPATH    simpler"
        << "\n                       --sign=FILEPATH    simplest"
        << "\n                        --csr=FILEPATH    simplest"
        << '\n'
        << "\nGeneral Options:"
        << '\n'
        << "\n--usage, --help, -h                       emit this message, and exit"
        << "\n--version, -V                             emit the package version, and exit"
        << "\n--dry-run, --dryrun, -y                   dry run, do not start the server"
        << "\n--warnings, --warning, -w                 emit warnings"
        << "\n--quiet, -q                               be quiet, emit no notices or warnings"
        << "\n--verbose, -v                             be verbose (independent of --quiet)"
        << "\n--debug, -d                               debug output (you should not need this)";
    return buf.str();
  }
}
#endiv
