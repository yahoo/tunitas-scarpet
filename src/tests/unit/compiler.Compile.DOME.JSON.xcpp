// This is -*- c++ -*- C++23 in the stylings of S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc. 2021.
// Licensed under the terms of the Apache-2.0 license.
// See the LICENSE file in https://github.com/yahoo/tunitas-scarpet/blob/master/LICENSE for terms.
#divert <fpp>
#import tests.unit.compiler.Compile.declaration
#forward tunitas.scarpet.did.Document.DOME
#forward tunitas.scarpet.did.Document.JSON
namespace tests::unit::compiler {
  namespace dome_json {
    using Source = ::tunitas::scarpet::did::Document<::tunitas::scarpet::did::DOME>;
    using Destination = ::tunitas::scarpet::did::Document<::tunitas::scarpet::did::JSON>;
  }
  template<> struct Compile<dome_json::Source, dome_json::Destination>;
}
#endiv
#divert <hpp>
#import cppunit.Test
#import cppunit.test.Fixture
namespace tests::unit::compiler {
  template<> class Compile<dome_json::Source, dome_json::Destination> : public cppunit::test::Fixture {
  public:
    auto test_simple() -> void;
    static auto suite() -> cppunit::Test *;
  };
}
#endiv
#divert <ipp>
#import tunitas.scarpet.did.Document.DOME
#import tunitas.scarpet.did.Document.JSON
#endiv
#divert <cpp>
#import tunitas.scarpet.compiler.output.Null
#import tunitas.scarpet.compiler.compile.DOME.JSON
#import tunitas.scarpet.compiler.compile // ADL trick
namespace tests::unit::compiler {
  auto Compile<dome_json::Source, dome_json::Destination>::test_simple() -> void {
    namespace output = ::tunitas::scarpet::compiler::output;
    auto sink = output::Null{};
    auto source = dome_json::Source{};
    auto destination = dome_json::Destination{};
    auto compiled = compile(source, destination, sink);
    // An empty DOME cannot compile to JSON.  At least the "self" identifier is missing.
    CPPUNIT_ASSERT(!compiled);
  }
}
#import rigging.suite.io
namespace tests::unit::compiler {
  auto Compile<dome_json::Source, dome_json::Destination>::suite() -> cppunit::Test * {
    using namespace ::rigging::suite;
    Stream series{"compile(DOME const &, JSON &, Sink &)"};
    series << call("simple", &Compile::test_simple)
      ;
    return finalize(series);
  }
}
#endiv
