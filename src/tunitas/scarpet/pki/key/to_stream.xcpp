// This is -*- c++ -*- nearly C++23 with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc. 2021.
// Licensed under the terms of the Apache-2.0 license.
// See the LICENSE file at https://github.com/yahoo/tunitas-scarpet/blob/master/LICENSE for terms.
// See the LICENSE file at https://git.tunitas.technology/all/services/scarpet/tree/LICENSE
#divert <hpp>
#forward tunitas.scarpet.pki.key.Pair
#forward tunitas.scarpet.pki.key.Privat
#forward tunitas.scarpet.pki.key.Publik
#import nonstd.required.Character
#import nonstd.required.Character_Traits
#import std.basic_ostream
namespace tunitas::scarpet::pki::key {
  //
  // Convert to onto the stream in "base64"
  // see to_stream(...) which defines the base64 as used herein.
  //
  // Usage:
  //
  //   to_stream(outbound, pair);
  //   to_stream(outbound, priv);
  //   to_stream(outbound, publ);
  //
  template<nonstd::required::Character CHAR, nonstd::required::Character_Traits TRAITS> inline auto to_stream(std::basic_ostream<CHAR, TRAITS> &, Pair const &) -> std::basic_ostream<CHAR, TRAITS> &;
  template<nonstd::required::Character CHAR, nonstd::required::Character_Traits TRAITS> inline auto to_stream(std::basic_ostream<CHAR, TRAITS> &, Privat const &) -> std::basic_ostream<CHAR, TRAITS> &;
  template<nonstd::required::Character CHAR, nonstd::required::Character_Traits TRAITS> inline auto to_stream(std::basic_ostream<CHAR, TRAITS> &, Publik const &) -> std::basic_ostream<CHAR, TRAITS> &;
}
#endiv
#divert <ipp>
#import tunitas.scarpet.pki.key.to_string
namespace tunitas::scarpet::pki {
  //
  // Seems that the easiest, cleanest way to implement these is to depend upon to_string.
  // There does not seem to be a less-allocating alternative that will emit to a stream
  // [[FIXTHIS]] these templates will not work for wide characters because to_string(...) always generates narrow characters
  //
  template<nonstd::required::Character CHAR, nonstd::required::Character_Traits TRAITS> auto key::to_stream(std::basic_ostream<CHAR, TRAITS> &os, Pair const &pa) -> std::basic_ostream<CHAR, TRAITS> & {
    return os << to_string(pa);
  }
  template<nonstd::required::Character CHAR, nonstd::required::Character_Traits TRAITS> auto key::to_stream(std::basic_ostream<CHAR, TRAITS> &os, Privat const &pr) -> std::basic_ostream<CHAR, TRAITS> & {
    return os << to_string(pr);
  }
  template<nonstd::required::Character CHAR, nonstd::required::Character_Traits TRAITS> auto key::to_stream(std::basic_ostream<CHAR, TRAITS> &os, Publik const &pu) -> std::basic_ostream<CHAR, TRAITS> & {
    return os << to_string(pu);
  }
}
#endiv
