// This is -*- c++ -*- nearly C++23 with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc. 2021.
// Licensed under the terms of the Apache-2.0 license.
// See the LICENSE file at https://github.com/yahoo/tunitas-scarpet/blob/master/LICENSE for terms.
// See the LICENSE file at https://git.tunitas.technology/all/services/scarpet/tree/LICENSE
#divert <hpp>
#forward tunitas.scarpet.pki.key.Activated
#forward tunitas.scarpet.pki.key.Pair
#forward tunitas.scarpet.pki.key.Privat
#forward tunitas.scarpet.pki.key.Publik
namespace tunitas::scarpet::pki::key {
  //
  // Generate a key pair
  // Generate a (private) key
  // Of course generating a public key (alone) is impossible.
  //
  template<typename TYPE> auto generate() -> TYPE = delete;
  template<> inline auto generate<Activated>() -> Activated;
  template<> inline auto generate<Pair>() -> Pair;
  template<> inline auto generate<Privat>() -> Privat;
  template<> auto generate<Publik>() -> Publik = delete; // there is no such ... think about it.
}
#endiv
#divert <ipp>
#import openssl.ec.generate
#import tunitas.scarpet.pki.key.Activated
#import tunitas.scarpet.pki.key.Pair
#import tunitas.scarpet.pki.key.Privat
#import tunitas.scarpet.pki.key.Publik
#import tunitas.scarpet.pki.key.privat
#import tunitas.scarpet.pki.key.publik
namespace tunitas::scarpet::pki::key {
  template<> auto generate<Activated>() -> Activated {
    Activated k;
    namespace ec = openssl::ec;
    k.assign(ec::generate(ec::group::Name::PRIME256V1));
    return k;
  }
  template<> auto generate<Pair>() -> Pair {
    auto k = generate<Activated>();
    return Pair{privat(k), publik(k)};
  }
  template<> auto generate<Privat>() -> Privat {
    auto k = generate<Activated>();
    return privat(k);
  }
}
#endiv
