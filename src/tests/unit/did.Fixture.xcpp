// This is -*- c++ -*- C++2a in the stylings of S.C.O.L.D. stylings that are so popular these days.
// Copyright 2019-2019, Oath Inc.
// Licensed under the terms of the Apache-2.0 license. See the LICENSE file in https://github.com/yahoo/tunitas-scarpet/blob/master/LICENSE for terms.
#divert <fpp>
namespace tests::unit::did { class Fixture; }
#endiv
#divert <hpp>
#import cppunit.Test
#import cppunit.test.Fixture
class tests::unit::did::Fixture : public cppunit::test::Fixture {
public:
  auto test_identifier_Identifier() -> void;
  auto test_identifier_Method() -> void;
  auto test_Parser_bad() -> void;
  auto test_Parser_good() -> void;
  static auto suite() -> cppunit::Test *;
};
#endiv
#divert <cpp>
#import std.empty
#import tunitas.scarpet.did.Identifier
auto tests::unit::did::Fixture::test_identifier_Identifier() -> void {
  auto subject0 = ::tunitas::scarpet::did::Identifier{};
  CPPUNIT_ASSERT(std::empty(subject0));
  auto subject1 = ::tunitas::scarpet::did::Identifier{"1"};
  CPPUNIT_ASSERT(!std::empty(subject1));
  CPPUNIT_ASSERT("1"sv == view(subject1));
}
#import tunitas.scarpet.did.Method
auto tests::unit::did::Fixture::test_identifier_Method() -> void {
  auto subject0 = ::tunitas::scarpet::did::Method{};
  CPPUNIT_ASSERT(std::empty(subject0));
  auto subject1 = ::tunitas::scarpet::did::Method{"1"};
  CPPUNIT_ASSERT(!std::empty(subject1));
  CPPUNIT_ASSERT("1"sv == view(subject1));
}
#import tunitas.scarpet.did.Parser
auto tests::unit::did::Fixture::test_Parser_good() -> void {
  ::tunitas::scarpet::did::Parser parser;
  { auto u = parser("did:m:i");
    CPPUNIT_ASSERT(ok(u)); }
  { auto u = parser("did:tape:123456789");
    CPPUNIT_ASSERT(ok(u)); }
  { auto u = parser("did:baling:987654312");
    CPPUNIT_ASSERT(ok(u)); }
  { auto u = parser("did:wire:987654312");
    CPPUNIT_ASSERT(ok(u)); }
}
auto tests::unit::did::Fixture::test_Parser_bad() -> void {
  ::tunitas::scarpet::did::Parser parser;
  { auto u = parser("");
    CPPUNIT_ASSERT(!ok(u)); }
  { auto u = parser("did:");
    CPPUNIT_ASSERT(!ok(u)); }
  { auto u = parser("did::");
    CPPUNIT_ASSERT(!ok(u)); }
  { auto u = parser("did::1");
    CPPUNIT_ASSERT(!ok(u)); }
  { auto u = parser("did:m:");
    CPPUNIT_ASSERT(!ok(u)); }
}
#import tests.unit.did.Document.DOME
#import tests.unit.did.Document.JSON
#import tests.unit.did.Document.ZONE
#import tests.unit.did.Parser
#import unit.rigging.suite.Stream
#import unit.rigging.suite.add
#import unit.rigging.suite.call
auto tests::unit::did::Fixture::suite() -> cppunit::Test * {
  using namespace ::unit::rigging::suite;
  Stream series{"did"};
  {
    Stream ide{"identifier"};
    ide << call("Identifier", &Fixture::test_identifier_Identifier)
        << call("Method", &Fixture::test_identifier_Method)
      ;
    series << add(ide.release());
  } {
    Stream par{"Parser"};
    par << call("good", &Fixture::test_Parser_good)
        << call("bad", &Fixture::test_Parser_bad)
      ;
    series << add(par.release());
  }
  namespace testing = tests::unit::did;
  namespace subjecting = ::tunitas::scarpet::did;
  series << add(Parser::suite())
         << add(testing::Document<subjecting::Document<subjecting::DOME>>::suite())
         << add(testing::Document<subjecting::Document<subjecting::JSON>>::suite())
         << add(testing::Document<subjecting::Document<subjecting::ZONE>>::suite())
    ;
  return series.release();
}
#endiv
