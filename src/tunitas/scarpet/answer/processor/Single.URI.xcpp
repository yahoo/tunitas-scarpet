// This is -*- c++ -*- nearly C++2a with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright 2019, Oath Inc.; Copyright 2020, Verizon Media
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-scarpet/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/services/scarpet/tree/LICENSE
#divert <fpp>
#import tunitas.scarpet.answer.processor.Single.declaration
namespace tunitas::scarpet::answer::processor {
  template<> class Single<dns::URI>;
}
#endiv
#divert <hpp>
namespace tunitas::scarpet::answer::processor {
  template<> class Single<dns::URI> : public single::Prototype, public ares::function::Query<Response<drrs::Record<dns::URI>>> {
    using ancestor = ares::function::Query<Response<drrs::Record<dns::URI>>>;
  protected:
    ~Single() = default;
  public:
    inline explicit Single(State &);
    inline auto receive(error::Code<ARES>, Count timeouts, Buffer) -> void final;
  };
}
#endiv
#divert <ipp>
namespace tunitas::scarpet::answer::processor {
  Single<dns::URI>::Single(State &response) : ancestor{response} { }
  auto Single<dns::URI>::receive(error::Code<ARES> code, Count timeouts, Buffer buffer) -> void {
    auto const assignment = [](drrs::Record<dns::URI> &lhs, ares::managed::list::Entry<ares::URI> const &rhs) {
                              lhs.priority = rhs.priority();
                              lhs.weight = rhs.weight();
                              lhs.endpoint = rhs.uri();
                            };
    reception<ares::URI>(this->state, code, timeouts, buffer, assignment);
  }
}
#endiv
